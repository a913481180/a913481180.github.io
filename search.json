[{"title":"Hello World","url":"http://www.baidu.com/2021/08/21/hello-world/","content":"<p>Welcome to <a href=\"https://hexo.io/\">Hexo</a>! This is your very first post. Check <a href=\"https://hexo.io/docs/\">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href=\"https://hexo.io/docs/troubleshooting.html\">troubleshooting</a> or you can ask me on <a href=\"https://github.com/hexojs/hexo/issues\">GitHub</a>.</p>\n<h2 id=\"Quick-Start\"><a href=\"#Quick-Start\" class=\"headerlink\" title=\"Quick Start\"></a>Quick Start</h2><h3 id=\"Create-a-new-post\"><a href=\"#Create-a-new-post\" class=\"headerlink\" title=\"Create a new post\"></a>Create a new post</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo new <span class=\"string\">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/writing.html\">Writing</a></p>\n<h3 id=\"Run-server\"><a href=\"#Run-server\" class=\"headerlink\" title=\"Run server\"></a>Run server</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo server</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/server.html\">Server</a></p>\n<h3 id=\"Generate-static-files\"><a href=\"#Generate-static-files\" class=\"headerlink\" title=\"Generate static files\"></a>Generate static files</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo generate</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/generating.html\">Generating</a></p>\n<h3 id=\"Deploy-to-remote-sites\"><a href=\"#Deploy-to-remote-sites\" class=\"headerlink\" title=\"Deploy to remote sites\"></a>Deploy to remote sites</h3><figure class=\"highlight bash\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo deploy</span><br></pre></td></tr></table></figure>\n\n<p>More info: <a href=\"https://hexo.io/docs/one-command-deployment.html\">Deployment</a></p>\n","categories":[],"tags":[]},{"title":"Vue","url":"http://www.baidu.com/2021/06/01/vue/","content":"<h1 id=\"Vue2-0\"><a href=\"#Vue2-0\" class=\"headerlink\" title=\"Vue2.0\"></a>Vue2.0</h1><p>一套用于构建用户界面的渐进式javascrip框架</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">        &lt;head&gt;</span><br><span class=\"line\">                &lt;meta charset=&quot;utf8&quot;&gt;</span><br><span class=\"line\">                &lt;title&gt;vue&lt;/title&gt;</span><br><span class=\"line\">                &lt;/head&gt;</span><br><span class=\"line\">                &lt;script src=&quot;https://cdn.jsdelivr.net/npm/vue@2/dist/vue.js&quot;&gt; //引入 Vue&lt;/script&gt;</span><br><span class=\"line\">                &lt;script&gt;</span><br><span class=\"line\">                window.onload=function()&#123;</span><br><span class=\"line\">        Vue.config.productionTip=false;         //阻止vue启动时的生成的提醒</span><br><span class=\"line\">        ///创建vue实例</span><br><span class=\"line\">       const vu= new Vue(&#123;</span><br><span class=\"line\">        el:&#x27;#root&#x27;,     //挂载点，指定容器,可写类名，不能用在html和body上；第二种写法可用vu.$mount(&#x27;#root&#x27;);代替</span><br><span class=\"line\">        data:&#123;</span><br><span class=\"line\">                msg:&#x27;hello&#x27;,</span><br><span class=\"line\">                name:&#x27;xiaomi&#x27;,</span><br><span class=\"line\">\t\ttest()&#123;...&#125;\t//不建议在data中写函数，因为会data中的属性会进行数据代理，而方法并不需要进行数据代理</span><br><span class=\"line\">\t//data第二种写成函数式,由Vue管理的函数不能写成箭头函数，对象里的方法可省略:function</span><br><span class=\"line\">\t/*</span><br><span class=\"line\">\tdata:function()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\t\tname:&#x27;xiaoming&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\">                &#125;);</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">                &lt;/script&gt;</span><br><span class=\"line\">                &lt;body&gt;</span><br><span class=\"line\">                &lt;div id=&#x27;root&#x27;&gt;&#123;&#123;msg&#125;&#125; &#123;&#123;name&#125;&#125; &lt;/div&gt;  &lt;!-- &#123;&#123;&#125;&#125;中可写js表达式--&gt;</span><br><span class=\"line\">                &lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>MVVM模型<br>一种软件架构</p>\n<ul>\n<li>M:模型model:对应data中的数据</li>\n<li>V：视图view:模板   </li>\n<li>VM：视图模型view model：vue实例</li>\n</ul>\n</li>\n<li><p>数据代理</p>\n</li>\n</ul>\n<p>通过一个对象对另一个对象中的属性的操作<br><code>Object.defineproperty()</code>第一个参数为对象，第二个为对象的属性，第三个为配置项</p>\n<p>如添加属性：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let person&#123;</span><br><span class=\"line\">name:&#x27;xiaomei&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">Object.defineproperty(person,&#x27;age&#x27;,&#123;</span><br><span class=\"line\">value:18,</span><br><span class=\"line\">//默认情况下添加的属性不可枚举，即无法遍历出来</span><br><span class=\"line\">enumerable:true\t\t//true表示可以枚举</span><br><span class=\"line\">//默认情况下添加的属性的值无法更改</span><br><span class=\"line\">writable:true\t//控制属性是否可修改</span><br><span class=\"line\">//默认情况下添加的属性无法删除</span><br><span class=\"line\">configurable: true\t////控制属性是否可删除</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//当读取person的age属性时，get函数会被调用，且返回age的值</span><br><span class=\"line\">get:function()&#123;</span><br><span class=\"line\">return &#x27;hello&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//当修改person的age属性时，set函数会被调用</span><br><span class=\"line\">set:function(value)&#123;</span><br><span class=\"line\">age=value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>vue中的数据代理：通过vm对象来代理data对象中属性的操作</p>\n<p>通过Object.defineProperty()把data对象中所有属性添加到vm上，为每一个添加到vm上的属性，都指定一个getter/setter方法,在它们内部去对data中的数据进行操作</p>\n<ul>\n<li>数据监听</li>\n</ul>\n<p>通过<code>vm._data</code>也可以访问到data中的数据,但其是经过加工的,即形成getter、setter形式</p>\n<p>示例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//###只能监测一层</span><br><span class=\"line\">let data=&#123;name:&#x27;xiaomei&#x27;&#125;</span><br><span class=\"line\">//创建一个监视的实例对象，用于监视data中的属性变化</span><br><span class=\"line\">const obs=new Observer(data);</span><br><span class=\"line\">function Observer(obj)&#123;</span><br><span class=\"line\">//汇总对象中所有的属性形成一个数组</span><br><span class=\"line\">const keys=Object.keys(obj);</span><br><span class=\"line\">//遍历</span><br><span class=\"line\">keys.forEach((k)=&gt;&#123;</span><br><span class=\"line\">Object.defineProperty(this,k,&#123;</span><br><span class=\"line\">get()&#123;</span><br><span class=\"line\">return obj;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">set(val)&#123;</span><br><span class=\"line\">console.log(&#x27;数据被修改了&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>原理：通过setter实现监测，且要在new Vue时就传入要监测的数据;</p>\n<ul>\n<li><p>对象中后追加的属性，vue默认不做响应式处理；如要给后添加的属性做响应式处理，需要用<code> Vue.set(对象,&#39;添加的属性&#39;,&#39;属性值&#39;)或vm.$set(对象,&#39;添加的属性&#39;,&#39;属性值&#39;)</code></p>\n</li>\n<li><p>数组更新检测<br>vue将被侦听的数组的变更方法进行了包裹，所以会触发视图的更新，即先调用原生方法对数组进行修改，接着重新解模板，进行更新页面。被包裹的方法有<code>push()</code>,<code>pop()</code>,<code>shift()</code>,<code>unshift()</code>,<code>splice()</code>,<code>sort()</code>,<code>reverse()</code>.或使用<code> Vue.set(数组,下标,&#39;修改的值&#39;)或vm.$set(数组,下标,&#39;修改的值&#39;)</code></p>\n</li>\n</ul>\n<blockquote>\n<p>!注意：Vue.set();和vm.$set()不能给vm或vm的根数据对象添加属性</p>\n</blockquote>\n<p>##模板语法</p>\n<ul>\n<li><p>插值语法<br>用于解析标签体内容<br><code>&#123;&#123;xxx&#125;&#125;</code>xxx为js表达式，可以直接读取到data中的属性</p>\n</li>\n<li><p>指令语法<br>用于解析标签</p>\n</li>\n</ul>\n<p><code>v-bind:href=&quot;xxx&quot;</code>或简写为<code>:href=&quot;xxx&quot;</code></p>\n<ul>\n<li><p>数据绑定</p>\n<ul>\n<li><p>单向数据绑定<br>数据只能从data流向页面;<code>v-bind:href=&quot;xxx&quot;</code>或简写为<code>:href=&quot;xxx&quot;</code></p>\n</li>\n<li><p>双向数据绑定</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>数据能从data流向页面,也能从页面流向data<br><code>v-model:value=&quot;xxx&quot;</code>或简写<code>v-model=&quot;xxx&quot;</code></p>\n<blockquote>\n<p>v-model指令只能用在表单类（输入类input、select）元素上</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!--收集表单数据--&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot;  v-model=&quot;keyWords/&gt;\t&lt;!--用户输入就是value值，v-model收集的就是value值;v0model的三个修饰符：lazy失去焦点在收集数据，number输入的字符串转为有效数字，trim去除首尾的空格--&gt;</span><br><span class=\"line\">&lt;input type=&quot;radio&quot; v-model=&quot;radio&quot; value=&quot;radio1&quot; /&gt; &lt;!--单选框--&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;study&quot;/&gt; &lt;!--多选框--&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;reading&quot;/&gt; &lt;!--若没有配置value，则当v-model初始值为数组时，勾选时收集的是null，为字符串时，收集的是布尔值--&gt;</span><br><span class=\"line\">&lt;input type=&quot;checkbox&quot; v-model=&quot;hobby&quot; value=&quot;sports&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tkeyWords:&#x27;&#x27;,</span><br><span class=\"line\">\thobby:[],</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>数据处理</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button v-on:cllick=&quot;showhello&quot;&gt;test&lt;/button&gt;</span><br><span class=\"line\">&lt;!--或简写成--&gt;</span><br><span class=\"line\">&lt;button @cllick=&quot;showhello($event,22)&quot;&gt;test&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot;&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;.button1&#x27;,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">name:&#x27;xiaomei&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">showhello(e,n)&#123;</span><br><span class=\"line\">alert(&#x27;hello&#x27;);</span><br><span class=\"line\">console.log(e.target,n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>事件修饰符<br>vue中的事件修饰符：<ul>\n<li>prevent:阻止默认事件</li>\n<li>stop:阻止事件冒泡</li>\n<li>once：事件只触发一次</li>\n<li>capture:使用事件的捕获模式</li>\n<li>sefl:只有event.target是当前操作的元素时才触发事件</li>\n<li>passive:事件的默认行为立即执行，无需等待事件回调执行完毕</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;a href=&#x27;www.baidu.com&#x27; v-on:click.prevent.stop=&quot;showhello()&quot;&gt;test&lt;a&gt;\t&lt;!--阻止a标签自动跳转,可连续写--&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>键盘事件<ul>\n<li>vue中的按键别名<code>回车enter</code>,<code>删除delete</code> , <code>退出esc</code>, <code>空格space</code>, <code>换行tap(必须配合keydown使用)</code>, <code>上up下down左left右right</code> </li>\n<li>vue中未提供的按键别名，可使用按键原始名去绑定，注意要转换为kebab-case（短横线命名）</li>\n<li>系统修饰键：<code>ctrl</code>,<code>alt</code>,<code>shift</code>,<code>meta</code>;<ul>\n<li>配合keyup使用时：需再按下其他键，随后释放其他键才能触发</li>\n<li>配合keydown使用时：正常触发</li>\n</ul>\n</li>\n<li>Vue.config.keyCodes.自定义键名=键码</li>\n</ul>\n</li>\n</ul>\n<p><code>&lt;input type=&quot;text&quot; placeholder=&quot;tips&quot; @keyup.enter=&quot;showhello&quot;&gt;</code></p>\n<ul>\n<li>条件渲染</li>\n</ul>\n<p>语法： <code>&lt;h2 v-show=&quot;false&quot;&gt; test&lt;/h2&gt;    &lt;!--元素还存在--&gt;</code></p>\n<p>v-if与v-show的区别：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> &lt;h2 v-if=&quot;false&quot;&gt; test&lt;/h2&gt;\t&lt;!--元素直接消失,中间不能被打断--&gt;</span><br><span class=\"line\">&lt;template v-else-if=&quot;true&quot;&gt; &lt;a&gt;test&lt;/a&gt;&lt;/template&gt;\t&lt;!--template不影响结构，但必须和v-if配合使用--&gt;</span><br><span class=\"line\"> &lt;h2 v-else&gt; test&lt;/h2&gt;\t</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>渲染文本</li>\n</ul>\n<p>   <code>v-text</code> 指令,向其所在的节点中渲染文本内容,其会替换掉节点中的内容，<code>&#123;&#123;xxx&#125;&#125;</code>插值语法则不会,可以替换指定内容。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h3 v-text=&quot;keyword&quot;&gt;&lt;/h3&gt;</span><br></pre></td></tr></table></figure>\n\n<p>   <code>v-html</code> 指令,向其所在的节点中渲染文本内容,其会替换掉节点中的内容,且会解析html标签，<code>v-text</code>则不会。其具有安全性问题，在网页上动态渲染html标签是非常危险的，易导致XSS攻击。</p>\n<ul>\n<li>列表渲染</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;div id=&quot;#root&quot;&gt; </span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">&lt;!--遍历数组--&gt;</span><br><span class=\"line\">&lt;li v-for=&quot;n in persons&quot; :key=&quot;n.id&quot; &gt; </span><br><span class=\"line\">&#123;&#123;index&#125;&#125;\t&lt;!--索引值--&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;!--遍历对象--&gt;</span><br><span class=\"line\">&lt;li v-for=&quot;(k,index2) of persons&quot; :key=&quot;index2&quot; &gt; </span><br><span class=\"line\">&#123;&#123;index2&#125;&#125;\t&lt;!--索引值--&gt;</span><br><span class=\"line\">&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;!-- 除此之外还可以遍历字符串，数字--&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const vm=new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">\tpersons:[</span><br><span class=\"line\">\t\t&#123;id:001,name:&#x27;xiaoMei&#x27;,age:18&#125;,</span><br><span class=\"line\">\t\t&#123;id:002,name:&#x27;xiaoHong&#x27;,age:22&#125;,</span><br><span class=\"line\">\t\t&#123;id:003,name:&#x27;xiaoLan&#x27;,age:12&#125;,</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p><em>key原理</em></p>\n<p>给节点提供唯一标识</p>\n<ol>\n<li>虚拟DOM中的key的作用：key是虚拟DOM对象的标识，当数据发送变化时，vue会根据新数据生成新的虚拟DOM，随后vue将新的虚拟DOM与旧的虚拟DOM进行差异比较</li>\n<li>对比规则为：<ul>\n<li>旧虚拟DOM中找到与新虚拟DOM相同的key：   <ul>\n<li>若虚拟DOM中的内容没有改变，则直接使用之前的真实DOM    - 若虚拟DOM中的内容改变了，则生成新的真实DOM，随后替换掉页面中之前的真实DOM</li>\n</ul>\n</li>\n<li>旧虚拟DOM中未找到与新虚拟DOM相同的key：创建新的真实DOM，随后渲染到页面。<ol start=\"3\">\n<li>index作为key可能发生的问题：对数据进行逆序添加、删除时，会产生没有必要的真实dom，界面虽然没问题，但效率低。当结构中存在输入类的DOM时，界面会出现问题。</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n<hr>\n<ul>\n<li>其他指令</li>\n</ul>\n<p>   <code>v-cloak</code>指令，Vue实例创建完毕并接管容器后，会删除所有v-cloak属性，常用于解决网速不好加载vue慢而显示问题</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">[v-cloak]&#123;display:none;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;h2 v-cloak&gt; &#123;&#123;keyword&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n\n<p>   <code>v-once</code>指令，其所在的节点在初次渲染后，就视为静态内容了，以后即使数据变化了，其也不再变化</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;h2 v-once&gt; &#123;&#123;keyword&#125;&#125;&lt;/h2&gt;</span><br></pre></td></tr></table></figure>\n\n<p>   <code>v-pre</code>指令，跳过其所在节点的编译过程，可用于跳过没有指令语法、插值语法的节点，加快编译速度。</p>\n<ul>\n<li>自定义指令</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">data:&#123;&#125;,</span><br><span class=\"line\">directives:&#123; </span><br><span class=\"line\">//局部指令</span><br><span class=\"line\">//指令与元素成功绑定时即一开始就被调用，当指令所在模板被重新解析时会被调用。</span><br><span class=\"line\">//简写</span><br><span class=\"line\">test(element,binding)&#123;\t//element,binding为规定写法</span><br><span class=\"line\">console.log(this);\t//这里的this为window</span><br><span class=\"line\">element.innerText=bindding.value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//标准写法</span><br><span class=\"line\">test2:&#123;\t//命名：多个单词用-分割，使用时不用-,后一个首字母改为大写</span><br><span class=\"line\">bind(element,binding)&#123;//指令与元素成功绑定时调用&#125;,</span><br><span class=\"line\">inserted(element,binding)&#123;//指令所在元素插入页面时调用&#125;,</span><br><span class=\"line\">update(element,binding)&#123;//指令所在模板被重新解析时被调用&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">//全局指令</span><br><span class=\"line\">Vue.directive(指令名，回调函数);</span><br><span class=\"line\">;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"计算属性\"><a href=\"#计算属性\" class=\"headerlink\" title=\"计算属性\"></a>计算属性</h2><p>要用的属性不存在，利用已有属性计算而得来</p>\n<p>内部有缓存机制，多次调用时只运行一次，效率更高,但不能开启异步任务如:<code>setTimeout()</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;.box&#x27;,</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">name:&#x27;xiaomei&#x27;,</span><br><span class=\"line\">hoby:&#x27;reading&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">fullName:&#123;</span><br><span class=\"line\">//初次读取fullName时，get会被调用;所依赖的数据改变时会调用,即data中的属性被改变时。</span><br><span class=\"line\">get()&#123;</span><br><span class=\"line\">return this.name+&#x27;-&#x27;+this.hoby;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//当fullname被修改时，会被调用</span><br><span class=\"line\">set()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">//当数据只读不修改时，可采用简写</span><br><span class=\"line\">fullName()&#123;</span><br><span class=\"line\">return this.name+&#x27;-&#x27;+this.hoby;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"监听属性\"><a href=\"#监听属性\" class=\"headerlink\" title=\"监听属性\"></a>监听属性</h2><p>能开启异步操作如:<code>setTimeout(()=&gt;&#123;&#125;,1000)</code>;所有不被vue所管理的函数最好写成箭头函数，这样this的指向才是vm</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">const vm = new Vue(&#123;</span><br><span class=\"line\">\tel:&#x27;#test&#x27;,</span><br><span class=\"line\">\tdata:&#123;</span><br><span class=\"line\">\tistrue: false\t</span><br><span class=\"line\">\tnumber:&#123;</span><br><span class=\"line\">\t\ta:1,</span><br><span class=\"line\">\t\tb:2&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;&#125;,</span><br><span class=\"line\">\tcomputed:&#123;&#125;,</span><br><span class=\"line\">\twantch&#123;</span><br><span class=\"line\">\t&#x27;istrue&#x27;:&#123;</span><br><span class=\"line\">\timmediate:true,\t///初始化时调用一下handler</span><br><span class=\"line\">\t//当istrue发生改变时调用\t</span><br><span class=\"line\">\thandler(newValue,oldValue)&#123;</span><br><span class=\"line\">\tconsole.log(newValue,oldValue);\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t//简写，当只有handler()时</span><br><span class=\"line\">\t/*istrue(newValue,oldValue)&#123;console.log(&#x27;test&#x27;);&#125;*/</span><br><span class=\"line\">\t&#x27;number&#x27;:&#123;</span><br><span class=\"line\">\tdeep:true,\t//深度监视，当对象内的属性发生变化时,能检测到多层级内容的改变</span><br><span class=\"line\">\thandler(newValue,oldValue)&#123;</span><br><span class=\"line\">\tconsole.log(newValue,oldValue);\t</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\"> &#125;);</span><br><span class=\"line\">/*//第二种写法</span><br><span class=\"line\">vm.$watch(&#x27;istrue&#x27;,&#123; handler()&#123;&#125; &#125; );</span><br><span class=\"line\">//简写</span><br><span class=\"line\">vm.$watch(&#x27;istrue&#x27;,function()&#123; console.log(&#x27;test&#x27;);&#125;);</span><br><span class=\"line\">*/</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"过滤器\"><a href=\"#过滤器\" class=\"headerlink\" title=\"过滤器\"></a>过滤器</h2><p>对要显示的数据进行特定格式化后在显示（常用于一些简单逻辑的处理）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">time:24356765432,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">computed:&#123;&#125;,</span><br><span class=\"line\">//注册过滤器</span><br><span class=\"line\">filters:&#123;</span><br><span class=\"line\">timeFormater1(value)&#123;</span><br><span class=\"line\">console.log(value);</span><br><span class=\"line\">return value;\t//返回数据</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">timeFormater2(value)&#123;</span><br><span class=\"line\">console.log(value);</span><br><span class=\"line\">return value;\t//返回数据</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//注册全局过滤器</span><br><span class=\"line\">Vue.filter(&#x27;myName&#x27;,function(value)&#123;return value;&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;h3&gt;</span><br><span class=\"line\">&lt;!--使用过滤器--&gt;</span><br><span class=\"line\">&#123;\\&#123;time|timeFormater1()|timeFormater2&#125;&#125;</span><br><span class=\"line\">&lt;!--或者v-bind:属性=&quot;xxx|过滤器名&quot;--&gt;</span><br><span class=\"line\">&lt;!--过滤器可额外接收参数，多个过滤器可串联，原始数据未改变，产生的是新的数据--&gt;</span><br><span class=\"line\">&lt;/h3&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"绑定样式\"><a href=\"#绑定样式\" class=\"headerlink\" title=\"绑定样式\"></a>绑定样式</h2><p>适用于动态指定类名<br><code>&lt;div class=&#39;box&#39; :class=&#39;xxx&#39; :style=&quot;&#123;fontSize: n +&#39;px&#39; &#125;&quot; &gt;test&lt;/div&gt;</code>;xxx可为字符串、数组[‘box1’,’box2’]、对象{box1:false,box2:true}。</p>\n<h2 id=\"生命周期\"><a href=\"#生命周期\" class=\"headerlink\" title=\"生命周期\"></a>生命周期</h2><p>又名生命周期回调函数、生命周期函数、生命周期钩子，是vue在关键时刻帮我们调用的一些特殊名称的函数，其名字不可更改，其中的this指向vm或组件实例对象。</p>\n<table>\n<thead>\n<tr>\n<th>生命周期</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>初始化：生命周期、事件</td>\n<td>但数据代理还未开始</td>\n</tr>\n<tr>\n<td>beforeCreate</td>\n<td>无法通过vm访问到data中的数据已经methods中的方法</td>\n</tr>\n<tr>\n<td>初始化：数据检测、数据代理</td>\n<td></td>\n</tr>\n<tr>\n<td>created</td>\n<td>可以通过vm可访问到data中的数据、methods中的方法</td>\n</tr>\n<tr>\n<td>解析模板，生成虚拟DOM</td>\n<td>此时页面还不能显示解析好的内容</td>\n</tr>\n<tr>\n<td>beforeMount</td>\n<td>页面呈现的是未经Vue编译的DOM结构，此时所有对DOM的操作，最终都不奏效</td>\n</tr>\n<tr>\n<td>创建vm $el</td>\n<td>将内存中的虚拟DOM转为真实DOM插入页面</td>\n</tr>\n<tr>\n<td>mounted</td>\n<td>页面中呈现的是经过Vue编译的DOM，对DOM的操作均有效，到此初始化过程结束。一般在此进行开启定时器、发送网络请求、订阅消息、绑定自定义事件等操作</td>\n</tr>\n<tr>\n<td>beforeUpdate</td>\n<td>此时数据是新的，但页面是旧的，即页面未与数据保持同步</td>\n</tr>\n<tr>\n<td>根据新的数据，生成新的虚拟DOM，随后与旧的虚拟DOM进行比较，最终完成页面的更新</td>\n<td></td>\n</tr>\n<tr>\n<td>updated</td>\n<td>此时数据和页面保持同步</td>\n</tr>\n<tr>\n<td>beforeDestroy</td>\n<td>此时vm中所有的data、methods、指令等都处于可用状态，马上要执行销毁过程，一般在此进行关闭定时器、取消订阅消息、解绑自定义事件等操作</td>\n</tr>\n<tr>\n<td>destroyed</td>\n<td>销毁vue实例后自定义事件会失效，但原生DOM事件依然有效</td>\n</tr>\n</tbody></table>\n<h2 id=\"组件\"><a href=\"#组件\" class=\"headerlink\" title=\"组件\"></a>组件</h2><p>实现应用中局部功能代码和资源的集合</p>\n<blockquote>\n<p>模块：向外提供特定功能的js程序</p>\n</blockquote>\n<ul>\n<li>非单文件组件：一个文件中包含有n个组件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">创建school组件</span><br><span class=\"line\">//简写</span><br><span class=\"line\">const school=&#123;&#125;;</span><br><span class=\"line\">//标准写法</span><br><span class=\"line\">const school=Vue.extend(&#123;</span><br><span class=\"line\">//组件定义时，不要写el配置项,最终所有的组件都要进过一个vm的管理</span><br><span class=\"line\">//名字</span><br><span class=\"line\">name:&#x27;xuexiao&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">//使用template可以配置组件结果。</span><br><span class=\"line\">template:`</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;h3&gt;test&lt;/h3&gt;</span><br><span class=\"line\">&lt;/div&gt;`,</span><br><span class=\"line\"></span><br><span class=\"line\">data()&#123;\t//data必须写成函数，为避免组件被复用时，数据存在引用关系</span><br><span class=\"line\">return &#123;</span><br><span class=\"line\">\tschoolName:&#x27;BST&#x27;,</span><br><span class=\"line\">\taddress:&#x27;beijing&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//定义app组件</span><br><span class=\"line\">const app=Vue.extend(&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建vm</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">template:&#x27;&lt;app&gt;&lt;/app&gt;&#x27;,</span><br><span class=\"line\">//局部注册组件</span><br><span class=\"line\">components:&#123;</span><br><span class=\"line\">\txuexioa:school,\t\t//组件名：一个单词通常首字母大小，多个单词通常用-分隔，或首字母大写（需要Vue脚手架支持）</span><br><span class=\"line\">\tapp</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//全局注册组件</span><br><span class=\"line\">Vue.component(&#x27;xuexiao&#x27;,school);</span><br><span class=\"line\"></span><br><span class=\"line\">//使用组件</span><br><span class=\"line\">&lt;xuexiao&gt;&lt;/xuexiao&gt;</span><br><span class=\"line\">&lt;xuexiao /&gt;&lt;!--需要脚手架支持，否则多个组件时，后续组件将不能渲染--&gt;</span><br></pre></td></tr></table></figure>\n\n<p>关于VueComponent，组件本质是一个名为VueComponent的构造函数，是由Vue.extend生成的。当我们写<xuexiao></xuexiao>，Vue解析时会帮我们创建school组件的实例对象，即vue帮我们执行<code>new VueComponent();</code>。当我们每次调用Vue.extend()时,返回的都是一个全新的VueComponent。在组件配置中，data函数、methods中的函数、watch中的函数等，它们的this都指向VueComponent实例对象。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义一个构造函数</span><br><span class=\"line\">function Demo()&#123;</span><br><span class=\"line\">this.a=1;</span><br><span class=\"line\">this.b=2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//创建一个Demo实例对象</span><br><span class=\"line\">const d=new Demo();</span><br><span class=\"line\">console.log(Demo.prototype);\t//显示原型属性</span><br><span class=\"line\">console.log(d.__proto__);\t//隐式原型属性</span><br><span class=\"line\">//显示原型属性与隐式原型属性都指向原型对象</span><br><span class=\"line\">//通过显示原型属性操作原型对象</span><br><span class=\"line\">Demo.prototype.e=21;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>!!重要内置关系：VueComponent.prototype.<strong>proto</strong>===Vue.prototype;其可以让组件实例对象访问到Vue原型上的属性和方法。</p>\n</blockquote>\n<ul>\n<li>单文件组件：一个文件中只包含有一个组件<ul>\n<li>school.vue组件</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!--组件的结构--&gt;</span><br><span class=\"line\">\t&lt;div class=&quot;demo&quot;&gt;</span><br><span class=\"line\">\t&lt;h2&gt;&#123;&#123;schoolName&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;h2&gt;&#123;&#123;address&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">\t&lt;/div&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//组件交互的代码</span><br><span class=\"line\">\texport default&#123;</span><br><span class=\"line\">\tname:&#x27;School&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\t  schoolName:&#x27;daxue&#x27;</span><br><span class=\"line\">\t  address:&#x27;beijing&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t   showName()&#123;</span><br><span class=\"line\">\t\talert(this.schoolName);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/*样式*/</span><br><span class=\"line\">.demoo&#123;</span><br><span class=\"line\">background-color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>App.vue组件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;School/&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//引入组件</span><br><span class=\"line\">import School from &#x27;./School&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">name:&#x27;App&#x27;,</span><br><span class=\"line\">components:&#123;School&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>main.js</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">components:&#123;App&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>index.html</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;</span><br><span class=\"line\">&lt;html&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&#x27;utf-8&quot;/&gt;</span><br><span class=\"line\">\t&lt;title&gt;test&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;root&quot;&gt;&lt;div&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;./vue.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;script type=&quot;text/javascript&quot; src=&quot;./main.js&quot;&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"脚手架vue-cli-command-line-interface\"><a href=\"#脚手架vue-cli-command-line-interface\" class=\"headerlink\" title=\"脚手架vue.cli(command line interface)\"></a>脚手架vue.cli(command line interface)</h2><ol>\n<li>全局安装@vue/cli:<code>npm install -g @vue/cli</code></li>\n<li>切换到要创建项目的目录，然后创建项目：<code>vue create xxxx</code></li>\n<li>启动项目：<code>npm run serve</code></li>\n</ol>\n<blockquote>\n<ol>\n<li>配置npm淘宝镜像：<code>npm config set registry https://registry.npm.taobao.org</code></li>\n<li>Vue脚手架隐藏了所有webpack相关的配置，若想查看具体webpack配置，执行：<code>vue inspect &gt; output.js</code></li>\n</ol>\n</blockquote>\n<ul>\n<li>main.js项目的入口文件</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入vue.runtime.xxx.js，其是运行版的vue,只包含核心功能，没有模板解析器,而完整版的Vue才有。</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;\t\t</span><br><span class=\"line\">//引入App组件</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">//关闭生产提示</span><br><span class=\"line\">Vue.config.productionTip=false;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建VUe实例对象</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#root&#x27;,</span><br><span class=\"line\">//将App组件放入容器中</span><br><span class=\"line\">render:h=&gt;h(app),\t//没有模板解析器，不能使用template配置项，需要使用render函数接收到的createElement函数去指定具体内容</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>vue.config.js配置</li>\n</ul>\n<p>使用vue.config.js可以对脚手架进行个性化定制</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">\tpages:&#123;</span><br><span class=\"line\">\t  index:&#123;</span><br><span class=\"line\">\t\t//入口</span><br><span class=\"line\">\t\tentry:&#x27;src/main.js&#x27;,</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tlintOnSave:false\t//关闭语法检查</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>脚手架文件结构</li>\n</ul>\n<p>|–node_modules<br>|–public<br>|–src<br>    |–assets:静态资源文件夹<br>    |–component:存放组件文件夹<br>    |–App.vue：汇总所有组件<br>    |–mian.js：入口文件<br>|–.gitignore: git版本管制忽略的配置<br>|–babel.config.js<br>|–package.json: 应用包配置文件<br>|–package-lock.json: 包版本控制文件</p>\n<ul>\n<li>ref属性</li>\n</ul>\n<p>id的替代者,用来给元素或组件注册引用信息,应用在html标签上获取的是真实DOM元素，应用组件标签上获取的是组件的实例对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;h1 v-text=&quot;msg&quot; ref=&quot;title&quot;&gt;&lt;/h1&gt;</span><br><span class=\"line\">&lt;button ref=&quot;btn&quot; @click=&quot;showDOM&quot;&gt;outPut_DOM&lt;/button&gt;</span><br><span class=\"line\">&lt;School ref=&quot;sch&quot; /&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import School from &#x27;./component/school&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tname:&#x27;App&#x27;,</span><br><span class=\"line\">\tcomponents:&#123;School&#125;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\tmsg:&#x27;hello&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\tshowDOM()&#123;</span><br><span class=\"line\">\tconsole.log(this.$ref.title);\t//真实DOM元素</span><br><span class=\"line\">\tconsole.log(this.$ref.sch);\t//School组件的实例对象</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>props配置项</li>\n</ul>\n<p>让组件接收外部传来的数据,props是只读的，Vue底层会监测(非深度监测)props，若发生修改会发出警告。若要修改数据，请复制一份到data中,再修改。</p>\n<blockquote>\n<p>v-modle绑定的值不应是props传过来的值，当其为对象类型时，修改对象中的属性时，vue无法发现</p>\n</blockquote>\n<p>子组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">data:&#123;&#125;,</span><br><span class=\"line\">//简单声明接收</span><br><span class=\"line\">props:[&#x27;name&#x27;,&#x27;age&#x27;,&#x27;sex&#x27;]</span><br><span class=\"line\">//接收的同时对数据进行类型限制</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">name:String,</span><br><span class=\"line\">age:Number,</span><br><span class=\"line\">sex:String</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//接收的同时对数据进行类型限制和默认值的指定</span><br><span class=\"line\">props:&#123;</span><br><span class=\"line\">name:&#123;</span><br><span class=\"line\">\ttype:String,</span><br><span class=\"line\">  \trequired:true,\t//name必填</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t&#125;</span><br></pre></td></tr></table></figure>\n\n<p>父组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t&lt;!--传递数据--&gt;</span><br><span class=\"line\">\t&lt;Student name=&quot;xiaoMei&quot; sex=&quot;female&quot; :age=&quot;12&quot;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import Student from &#x27;./components/Student&#x27;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tname:&#x27;App&quot;,</span><br><span class=\"line\">\tcomponents:&#123;Student&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>props适用于父组件和子组件的通信，子组件与父组件的通信要求父先给子一个函数，子再通过形参的形式传递数据</p>\n</blockquote>\n<h2 id=\"自定义事件\"><a href=\"#自定义事件\" class=\"headerlink\" title=\"自定义事件\"></a>自定义事件</h2><p>适用于子组件与父组件通信<br>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;!-- 通过父组件给子组件绑定一个自定义事件：用于子给父传递数据 --&gt;</span><br><span class=\"line\">&lt;Student v-on:test=&quot;getStudentName&quot;/&gt;</span><br><span class=\"line\">&lt;!-- 第二种写法,使用ref--&gt;</span><br><span class=\"line\">&lt;!-- &lt;student ref=&quot;student&quot;/&gt;  --&gt;</span><br><span class=\"line\">&lt;!-- &lt;student ref=&quot;student&quot;  @click.native=&quot;show&quot;/&gt;  组件绑定原生DOM事件，需要使用native修饰符 --&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import School from &#x27;./components/School.vue&#x27;</span><br><span class=\"line\">import Student from &#x27;./components/Student&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">name:&#x27;App&#x27;, components:&#123;School,Student&#125;</span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\t   msg: &#x27;test1!!!!!!!!&#x27;</span><br><span class=\"line\">\t&#125;&#125;</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">\tgetStudentName(name)&#123;</span><br><span class=\"line\">\t\tconsole.log(name);</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t// 第二种写法,使用ref--&gt;</span><br><span class=\"line\">\t/*</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\tthis.$refs.student.$on(&#x27;test&#x27;,this.getStudentName);</span><br><span class=\"line\">\t//this.$refs.student.$on(&#x27;test&#x27;,(name,...params)=&gt;&#123;...//要用箭头函数，否则this指向出错&#125;);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>Student.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;h2&gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;h2&gt;&#123;&#123;sex&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;button @click=&quot;sendStudentName&quot;&gt;test&lt;/button&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">name:&#x27;Student&#x27;</span><br><span class=\"line\">data()&#123;</span><br><span class=\"line\">return&#123;</span><br><span class=\"line\">name:&#x27;xiaoHu&#x27;,</span><br><span class=\"line\">sex:&#x27;man&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">sendStudentName()&#123;</span><br><span class=\"line\">//触发student组件实例身上的test(getStudentName)事件;即this.$emit(&#x27;传过来的事件名&#x27;,参数数据）；</span><br><span class=\"line\">this.$emit(&#x27;test&#x27;,this.name,xx,32);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">unbind()&#123;</span><br><span class=\"line\">//this.$off(&#x27;demo1&#x27;);\t//解绑一个自定义事件</span><br><span class=\"line\">//this.$off(&#123;&#x27;xx&#x27;,&#x27;xx&#x27;,&#x27;xx&#x27;&#125;);\t//解绑多个自定义事件</span><br><span class=\"line\">this.$off();\t//解绑所有自定义事件</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">death()&#123;</span><br><span class=\"line\">this.$destroy();\t//销毁当前student组件的实例，销毁后所有student实例的自定义事件全部失效</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> &#125;</span><br><span class=\"line\"> &lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"全局事件总线\"><a href=\"#全局事件总线\" class=\"headerlink\" title=\"全局事件总线\"></a>全局事件总线</h2><p>适用与任意组件间的通信</p>\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">\tel:&#x27;#root&#x27;,</span><br><span class=\"line\">\trender:h=&gt;h(App),</span><br><span class=\"line\">\tbeforeCreate()&#123;</span><br><span class=\"line\">\t   Vue.prototype.$bus=this\t//安装全局事件总线</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>School.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tname:&#x27;school&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\tname:&#x27;xuexiao&#x27;,</span><br><span class=\"line\">\taddress:&#x27;biejing&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t//接受数据</span><br><span class=\"line\">\tthis.$bus.$on(&#x27;hello&#x27;,(data)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(&#x27;recieve data&#x27;,data);</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeDestroy()&#123;</span><br><span class=\"line\">\t//解绑事件</span><br><span class=\"line\">\tthis.$bus.$off(&#x27;hello&#x27;)&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>School.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;temlate&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default(&#123;</span><br><span class=\"line\">\tname:&#x27;School&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\tname:&#x27;小米&#x27;,</span><br><span class=\"line\">\tsex:&#x27;woman&#x27;,</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\tsendStudentName()&#123;</span><br><span class=\"line\">\t//提供数据</span><br><span class=\"line\">\tthis.$bus.$emit(&#x27;hello&#x27;,32)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"消息发布和订阅\"><a href=\"#消息发布和订阅\" class=\"headerlink\" title=\"消息发布和订阅\"></a>消息发布和订阅</h2><p>适用于任意组件间通信</p>\n<p>School.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//安装pubsub: npm i pubsub-js</span><br><span class=\"line\">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tname:&#x27;School&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\tname:&#x27;xuexiao&#x27;,</span><br><span class=\"line\">\taddress:&#x27;beijing&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tmounted()&#123;</span><br><span class=\"line\">\t//订阅消息，接收数据</span><br><span class=\"line\">\tthis.pubId=pubsub.subscribe(&#x27;hello&#x27;,function(msgName,data)&#123;</span><br><span class=\"line\">\tconsole.log(&#x27;有人发布hello消息&#x27;,msgName,data);</span><br><span class=\"line\">\tconsole.log(this);</span><br><span class=\"line\">\t\t&#125;)</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tbeforeDestroy()&#123;</span><br><span class=\"line\">\tpubsub.unsubscribe(this.pubId);</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<p>student.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import pubsub from &#x27;pubsub-js&#x27;</span><br><span class=\"line\">export default (&#123;</span><br><span class=\"line\">\tname:&#x27;Student&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\tname:&#x27;xiaomei&#x27;,</span><br><span class=\"line\">\tsex:&#x27;woman&#x27;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t///提供数据</span><br><span class=\"line\">\tsendData()&#123;</span><br><span class=\"line\">\tpubsub.publish(&#x27;hello&#x27;,2222);</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>nextTick</li>\n</ul>\n<p>语法：<code>this.$nextTick(回调函数)</code><br>作用：在下一次DOM更新结束后执行其指定的回调,用于当改变数据后，要基于更新后的新DOM进行某些操作时，要在nextTick所指定的回调函数中执行</p>\n<ul>\n<li>mixins(混入)配置项</li>\n</ul>\n<p>可以把多个组件共用的配置提取成一个混入对象<br>school组件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;h2 @click=&quot;showName&quot; &gt;&#123;&#123;name&#125;&#125;&lt;/h2&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//引用一个test</span><br><span class=\"line\">import&#123;test&#125; from &#x27;../mixin&#x27;</span><br><span class=\"line\">//import&#123;test,test2&#125; from &#x27;../mixn&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tname:&#x27;School&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn &#123;name:&#x27;daxue&#x27;&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tmixins:[test]</span><br><span class=\"line\">\t//mixins:[test,test2]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//全局混入</span><br><span class=\"line\">//Vue.mixin(xxx)</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>mixin.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义混合</span><br><span class=\"line\">export const test=&#123;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\t\tshowNamw()&#123;alert(this.name);&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tmounted()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">export const test2=&#123;</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn&#123;</span><br><span class=\"line\">\t\tx:2,</span><br><span class=\"line\">\t\ty:1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tmounted()&#123;&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>插件:用于增强Vue</li>\n</ul>\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入Vue</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">//引入APP</span><br><span class=\"line\">import APP from &#x27;./App.vue&#x27;</span><br><span class=\"line\">//引入插件</span><br><span class=\"line\">import plugins from &#x27;./plugins&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用插件</span><br><span class=\"line\">Vue.use(plugins,33,2);</span><br><span class=\"line\"></span><br><span class=\"line\">//创建VM</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">\tel:&#x27;#root&#x27;,</span><br><span class=\"line\">\trender:h=&gt;h(App)</span><br><span class=\"line\">\t&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>plugins.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义插件</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">install (Vue,x,y)&#123;</span><br><span class=\"line\">console.log(x,y);</span><br><span class=\"line\">//添加全局过滤器</span><br><span class=\"line\">Vue.filter(....)</span><br><span class=\"line\">//添加实例方法</span><br><span class=\"line\">Vue.prototype.$myMethod=function()&#123;..&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>scoped样式<br>让样式只在本组件内有效，即局部生效，防止冲突。写法：<code>&lt;style scoped&gt;&lt;/style&gt;</code></li>\n</ul>\n<blockquote>\n<p>组件化编码流程：1.拆分成静态组件。2.实现动态组件。3.实现交互即绑定事件</p>\n</blockquote>\n<ul>\n<li>vue封装的动画与过渡</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;ransition name=&quot;hello&quot; appear&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;style&gt;</span><br><span class=\"line\">/*动画*/</span><br><span class=\"line\">.hello-enter-active&#123;</span><br><span class=\"line\">\tanimation: test 0.5s linear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.hello-leave-active&#123;</span><br><span class=\"line\">\tanimation: test 0.3s linear reverse;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">@keyframes test&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">/*详细写法</span><br><span class=\"line\">/*进入的起点*/</span><br><span class=\"line\">.hello-enter&#123;</span><br><span class=\"line\">\ttransform:translateX(-100x);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*进入的终点*/</span><br><span class=\"line\">.hello-enter-to&#123;</span><br><span class=\"line\">\ttransform:translateX(0px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**/</span><br><span class=\"line\">.hello-leave&#123;</span><br><span class=\"line\">\ttransform:translateX(0px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/**/</span><br><span class=\"line\">.hello-leave-to&#123;</span><br><span class=\"line\">\ttransform:translateX(-100px);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*/</span><br><span class=\"line\">&lt;/style&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"vue脚手架配置代理服务\"><a href=\"#vue脚手架配置代理服务\" class=\"headerlink\" title=\"vue脚手架配置代理服务\"></a>vue脚手架配置代理服务</h2><p>vue.config.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.export=&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tpages:&#123;</span><br><span class=\"line\">\t\tindex:&#123;</span><br><span class=\"line\">\t\t\t//入口</span><br><span class=\"line\">\t\tentry:&#x27;src/main.js&#x27;</span><br><span class=\"line\">\t\t\t&#125;,</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">lintOnSave:false,\t//关闭语法检测</span><br><span class=\"line\">//开启代理服务器（一）:配置简单，但不能配置多个代理</span><br><span class=\"line\">/*</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">\tproxy:&#x27;http://localhost:3333&#x27;</span><br><span class=\"line\">&#125;*/</span><br><span class=\"line\">//开启代理服务器（二）:可以配置多个代理</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">proxy:&#123;</span><br><span class=\"line\">&#x27;/api&#x27;:&#123;\t//匹配所有以&#x27;/api&#x27;开头的请求路径</span><br><span class=\"line\">target:&#x27;&lt;url&gt;&#x27;,</span><br><span class=\"line\">ws:true,\t//用于支持websocket</span><br><span class=\"line\">changeOrigin:true\t//用于控制请求头中的host值,true时，服务器请求头伪装成localhost：5050，false时为localhost:8080</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#x27;/test&#x27;:&#123;</span><br><span class=\"line\">target:&#x27;&lt;other_url&gt;&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#x27;/test2&#x27;&#123;</span><br><span class=\"line\">target:&#x27;http://localhost:5000&#x27;,</span><br><span class=\"line\">pathRewrite:&#123;&#x27;^/test2&#x27;:&#x27;&#x27;&#125;,\t//清除地址前面的协议域名端口http://localhost:8080</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import axios from &#x27;axios&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">\tname:&#x27;App&#x27;,</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\tgetStudents()&#123;</span><br><span class=\"line\">\taixos.get(&#x27;http://localhost:8081/students&#x27;).then(</span><br><span class=\"line\">\tresponse=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(&#x27;请求成功&#x27;,data);\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\terror=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(&#x27;请求fail&#x27;,message);\t</span><br><span class=\"line\">\t&#125;);</span><br><span class=\"line\">//aioxs.post(地址,&#123;key:value,key2:value2&#125;).then(function(response)&#123;&#125;,function(error)&#123;&#125;)</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插槽\"><a href=\"#插槽\" class=\"headerlink\" title=\"插槽\"></a>插槽</h2><p>用于父组件与子组件的通信</p>\n<p>Category.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div class=&quot;category&quot;&gt;</span><br><span class=\"line\">&lt;h3&gt;&#123;&#123;title&#125;&#125;&lt;/h3&gt;</span><br><span class=\"line\">&lt;!--定义插槽--&gt;</span><br><span class=\"line\">&lt;!-- 默认插槽 --&gt;</span><br><span class=\"line\">&lt;slot &gt;默认 当没有传递具体结构时，会显示&lt;/slot&gt;</span><br><span class=\"line\">&lt;!-- 具名插槽 --&gt;</span><br><span class=\"line\">&lt;slot name=&quot;center&quot;&gt;默认 当没有传递具体结构时，会显示&lt;/slot&gt;</span><br><span class=\"line\">&lt;slot name=&quot;footer&quot;&gt;默认 当没有传递具体结构时，会显示&lt;/slot&gt;</span><br><span class=\"line\">&lt;!-- 作用域插槽:数据在组件的自身，但根据数据生成的结构需要组件的使用者来决定 --&gt;</span><br><span class=\"line\">&lt;slot :games=&quot;test&quot;&gt;默认 当没有传递具体结构时，会显示&lt;/slot&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">\tname:&#x27;Category&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\treturn &#123;</span><br><span class=\"line\">\ttest:[&#x27;xxx&#x27;,&#x27;0989&#x27;,&#x27;33&#x27;]\t</span><br><span class=\"line\">\t&#125;\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tprops:[&#x27;listData&#x27;,&#x27;title&#x27;]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>App.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">&lt;img slot=&quot;center&quot; src=&quot;xxx&quot;&gt;</span><br><span class=\"line\">&lt;a slot=&quot;footer&quot; href=&quot;xxxx&quot;&gt;&lt;/a&gt;</span><br><span class=\"line\">&lt;/Category&gt;</span><br><span class=\"line\">&lt;Category&gt;</span><br><span class=\"line\">&lt;template scope=&quot;test1&quot;&gt;</span><br><span class=\"line\">&lt;h1&gt;&#123;&#123;test1.test&#125;&#125;&lt;/h1&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\">&lt;/Category&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<h2 id=\"webStorage\"><a href=\"#webStorage\" class=\"headerlink\" title=\"webStorage\"></a>webStorage</h2><p>存储内容大小一般支持5MB左右<br>浏览器端通过Window.sessionStorage和Window.localStorage属性来实现本地存储。<br>相关api：</p>\n<ol>\n<li>xxx.Storage.setItem(‘key’,’value’);接受一个键和值作为参数，把键值添加到存储中，若存在则更新。</li>\n<li>xxxxStorage.getItem(‘person’);接受一个键名作为参数,返回键名对应的值。</li>\n<li>xxxStorage.removeItem(‘key);接受一个键名作为参数,删除键名和其对应的值。</li>\n<li>xxxStorage.clear();清空存储中的所有数据。</li>\n</ol>\n<p>注意：1.SessionStorage存储内容会随浏览器窗口的关闭而消失；2.LocalStorage存储的内容，需手动清除才会消失。3.xxxxx.Storage.getItem(xx);若xx对应的值获取不到则返回null；4.JSON.parse(null)的结果依然是null。</p>\n<h2 id=\"vuex\"><a href=\"#vuex\" class=\"headerlink\" title=\"vuex\"></a>vuex</h2><p>专门在vue中实现集中式状态（数据）管理的一个vue插件,对vue应用中多个组件的共享状态进行集中式的管理（读与写），也是一种组件间通信的方式，适用于任意组件间的通信。</p>\n<p>使用时机：多个组件需要共享数据时</p>\n<p><a href=\"https://imgtu.com/i/fJo8ZF\"><img src=\"https://z3.ax1x.com/2021/08/10/fJo8ZF.png\" alt=\"fJo8ZF.png\"></a></p>\n<h3 id=\"store\"><a href=\"#store\" class=\"headerlink\" title=\"store\"></a>store</h3><p>创建文件：src/store/index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import Vuex from &#x27;vuex&#x27;</span><br><span class=\"line\">//使用vuex插件</span><br><span class=\"line\">Vue.use(Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\">//action--用于响应组件中的动作</span><br><span class=\"line\">const actions=&#123;&#125;</span><br><span class=\"line\">//mutations--用于操作数据state</span><br><span class=\"line\">const mutations=&#123;&#125;</span><br><span class=\"line\">//state--用于储存数据</span><br><span class=\"line\">const state=&#123;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建store</span><br><span class=\"line\">const store =new Vuex.Store(&#123;</span><br><span class=\"line\">actions,</span><br><span class=\"line\">mutatuons,</span><br><span class=\"line\">state,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//暴露store</span><br><span class=\"line\">expore default store</span><br></pre></td></tr></table></figure>\n\n<p>在main.js中创建vm时传入store配置项</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue form &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;/App.vue&#x27;</span><br><span class=\"line\">//引用插件</span><br><span class=\"line\">import vueResource from &#x27;vue-resource&#x27;</span><br><span class=\"line\">import Vuex form &#x27;vuex&#x27;</span><br><span class=\"line\">import store form  &#x27;./store&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用插件</span><br><span class=\"line\">Vue.use(vueResource);</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&#x27;#app&#x27;,</span><br><span class=\"line\">render:h=&gt;h(App),</span><br><span class=\"line\">store,</span><br><span class=\"line\">beforeCreate()&#123;</span><br><span class=\"line\">Vue.prototype.$bus=this</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"基本使用\"><a href=\"#基本使用\" class=\"headerlink\" title=\"基本使用\"></a>基本使用</h4><p>初始化数据、配置actions、mutations，操作文件store.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import Vuex form &#x27;vuex&#x27;</span><br><span class=\"line\">Vue.use (Vuex);</span><br><span class=\"line\"></span><br><span class=\"line\">const actions=&#123;</span><br><span class=\"line\">//响应组件中的动组</span><br><span class=\"line\">jia(context,value)&#123;</span><br><span class=\"line\">context.commit(&#x27;JIA&#x27;,value);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const mutations=&#123;</span><br><span class=\"line\">//执行jia</span><br><span class=\"line\">JIA(state,value)&#123;</span><br><span class=\"line\">state.sum+=value;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//初始化数据</span><br><span class=\"line\">const state=&#123;sum=0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建并暴露store</span><br><span class=\"line\">export default new Vuex.store(&#123;</span><br><span class=\"line\">actions,</span><br><span class=\"line\">mutations,</span><br><span class=\"line\">state,</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>组件中读取vuex中的数据：<code>$store.state.sum</code><br>组件中修改vuex中的数据：<code>$store.dispatch(&#39;actions中的方法名&#39;,数据)</code>或<code>$store.commit(&#39;mutatuins中的方法名&#39;,数据)</code></p>\n<blockquote>\n<p>若没有网络请求或其他业务逻辑，组件中也可以越过actions，即不写dispatch,直接编写commit</p>\n</blockquote>\n<h4 id=\"四个map方法的使用\"><a href=\"#四个map方法的使用\" class=\"headerlink\" title=\"四个map方法的使用\"></a>四个map方法的使用</h4><ul>\n<li>mapState:用于帮助我们映射state中的数据为计算属性</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">//借助mapState生成计算属性，对象写法</span><br><span class=\"line\">...mapState(&#123;sum:&#x27;sum&#x27;,school:&#x27;shchool&#x27;,subject:&#x27;subject&#x27;&#125;);</span><br><span class=\"line\">//借助mapState生成计算属性，对象写法</span><br><span class=\"line\">...mapState([&#x27;sum&#x27;,&#x27;shchool&#x27;,&#x27;subject&#x27;]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mapGetters: 帮助我们映射getters中的数据为计算属性</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">computed:&#123;</span><br><span class=\"line\">...mapGetters(&#123;b:&#x27;b&#x27;&#125;);</span><br><span class=\"line\">...mapGetters([&#x27;b&#x27;]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mapActions方法：帮助我们生成与action对法的方法，即包含<code>$store.dispatch(xxx)</code>的函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">...mapActions(&#123;inicrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;)</span><br><span class=\"line\">...mapActions([&#x27;jiaOdd&#x27;,&#x27;jiaWait&#x27;])</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mapMutations方法：用于帮助我们生成与mutations对话的方法，即：包含$store.commit(xxx)的函数</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">methods:&#123;</span><br><span class=\"line\">...mapMutations(&#123;increment:&#x27;JIA&#x27;,decrement:&#x27;JIAN&#x27;&#125;)</span><br><span class=\"line\">...mapMutations([&#x27;JIA&#x27;,&#x27;JIAN&#x27;])</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>mapActions与mapMutations使用时，若需要传递参数需要在模板中绑定事件时传递好参数，否则参数是事件对象</p>\n</blockquote>\n<h3 id=\"store-1\"><a href=\"#store-1\" class=\"headerlink\" title=\"store\"></a>store</h3><p>index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建store</span><br><span class=\"line\">import vue from &#x27;vue&#x27;</span><br><span class=\"line\">import vuex from &#x27;vuex&#x27;</span><br><span class=\"line\">//应用vuex插件</span><br><span class=\"line\">Vue.use(vuex);</span><br><span class=\"line\"></span><br><span class=\"line\">const test=&#123;</span><br><span class=\"line\">//namespaced:true,</span><br><span class=\"line\">action:&#123;&#125;,</span><br><span class=\"line\">mutations:&#123;&#125;,</span><br><span class=\"line\">state:&#123;&#125;,</span><br><span class=\"line\">getters:&#123;&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//store：actions、mutations、state、getters</span><br><span class=\"line\"></span><br><span class=\"line\">//创建暴露store</span><br><span class=\"line\">export default new Vuex.store&#123;</span><br><span class=\"line\">\tmodules:&#123;</span><br><span class=\"line\">\ta:test,</span><br><span class=\"line\">\tb:xxx\t</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>test.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">,,,</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">import &#123;mapState,mapGetters,mapMutations,mapActions &#125; form &#x27;vuex&#x27;</span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">name:&#x27;test&#x27;</span><br><span class=\"line\">data()&#123;&#125;,</span><br><span class=\"line\">computed:&#123;</span><br><span class=\"line\">personList()&#123;</span><br><span class=\"line\">\treturn this.$store.state.personAbout</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"模块化-命名空间\"><a href=\"#模块化-命名空间\" class=\"headerlink\" title=\"模块化+命名空间\"></a>模块化+命名空间</h3><p>为了让代码更好维护，让多种数据分类更加明确</p>\n<p>修改store.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const countAbout=&#123;</span><br><span class=\"line\">namespaced:true,\t//开启命名空间</span><br><span class=\"line\">state:&#123;x:1&#125;,</span><br><span class=\"line\">mutatuions:&#123;.........&#125;,</span><br><span class=\"line\">actions:&#123;..&#125;,</span><br><span class=\"line\">getters:&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">bigSum(state)&#123;</span><br><span class=\"line\">\treturn state.sum+1;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const personAbout=&#123;</span><br><span class=\"line\">namespaced:true,</span><br><span class=\"line\">state:&#123;..&#125;,</span><br><span class=\"line\">mutations:&#123;&#125;,</span><br><span class=\"line\">actions:&#123;&#125;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const store=new Vuex.Store(&#123;</span><br><span class=\"line\">modules:&#123;</span><br><span class=\"line\">countAbout,</span><br><span class=\"line\">personAbout</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>开启命名空间后，组件读取state数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.state.personAbout.list</span><br><span class=\"line\">//借助mapState读取</span><br><span class=\"line\">...mapState(&#x27;countAbout&#x27;,[&#x27;sum,&#x27;school&#x27;,&#x27;subject&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>开启命名空间后，组件读取getters数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.getters(&#x27;personAbout/firstPersonName&#x27;)</span><br><span class=\"line\">//借助mapGetters读取</span><br><span class=\"line\">...mapGetters(&#x27;countAbout&#x27;,[&#x27;bigSum&#x27;]);</span><br></pre></td></tr></table></figure>\n\n<p>开启命名空间后，组件读取dispatch数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.dispatch(&#x27;personAbout/addPersonWang&#x27;person`)</span><br><span class=\"line\">//借助mapActions读取</span><br><span class=\"line\">...mapActions(&#x27;countAbout&#x27;,&#123;incrementOdd:&#x27;jiaOdd&#x27;,incrementWait:&#x27;jiaWait&#x27;&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>开启命名空间后，组件读取commit数据</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$store.commit(&#x27;personAbout/ADD_PERSON&#x27;,person)</span><br><span class=\"line\">...mapMutations(&#x27;countAbout&#x27;,&#123;increment:&quot;JIA&quot;,decrement:&quot;JIAN&quot;&#125;)</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h2><p>路由就是一组映射（key-value）的对应关系,key为路径，value是function或Component</p>\n<ul>\n<li>后端路由:value是function,用于处理客户端提交的请求，即服务端根据请求路径找到匹配的函数处理数据后，返回响应数据</li>\n</ul>\n<blockquote>\n<p>路由组件一般放在pages文件夹，一般组件则放在Component文件夹；通过切换，隐藏了的路由组件，默认是被销毁的，需要的时候在去挂载；每个组件都有$route属性，里面存储着自己的路由信息<br>；整个应用只有一个route，可通过组件的$router属性获取到。</p>\n</blockquote>\n<h4 id=\"vue-router：vue的一个插件库，用来实现SPA应用（单个web应用，整个页面只有一个完整页面，只会做页面的局部更新，数据需要通过ajax请求获取）\"><a href=\"#vue-router：vue的一个插件库，用来实现SPA应用（单个web应用，整个页面只有一个完整页面，只会做页面的局部更新，数据需要通过ajax请求获取）\" class=\"headerlink\" title=\"vue-router：vue的一个插件库，用来实现SPA应用（单个web应用，整个页面只有一个完整页面，只会做页面的局部更新，数据需要通过ajax请求获取）\"></a>vue-router：vue的一个插件库，用来实现SPA应用（单个web应用，整个页面只有一个完整页面，只会做页面的局部更新，数据需要通过ajax请求获取）</h4><p>index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入路由</span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\">//引入组件</span><br><span class=\"line\">import About form &#x27;../components/About.vue&#x27;</span><br><span class=\"line\">import Home form &#x27;../components/Home.vue&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建并暴露一个路由器</span><br><span class=\"line\">export default new VueRouter(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">routes:[</span><br><span class=\"line\">&#123;path:&quot;/about&quot;,</span><br><span class=\"line\">component:About</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path:&quot;/home&quot;</span><br><span class=\"line\">component:Home</span><br><span class=\"line\">children:[\t//多级路由</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path:&#x27;news&#x27;,\t//不能写‘/news’</span><br><span class=\"line\">component:News,</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引入Vue</span><br><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">//引入APP</span><br><span class=\"line\">import App form &#x27;./App.vue&#x27;</span><br><span class=\"line\">//引入VueRouter </span><br><span class=\"line\">import VueRouter from &#x27;vue-router&#x27;</span><br><span class=\"line\">//引入路由器</span><br><span class=\"line\">import router form &#x27;./router&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//应用插件</span><br><span class=\"line\">Vue.use(VueRouter)</span><br><span class=\"line\"></span><br><span class=\"line\">//创建vm</span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">el:&quot;#app&quot;,</span><br><span class=\"line\">render:h=&gt;h(App),</span><br><span class=\"line\">router:router</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>index.js跳转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">//active-class可配置高亮样式</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; active-class=&quot;active&quot; to=&quot;/about&quot;&gt;About&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;/home&quot;&gt;Home&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;/home/news&quot;&gt;Home&lt;/router-link&gt;</span><br><span class=\"line\">&lt;!--跳转路由并携带query参数（字符串写法）--&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;/home/news?id=xxx&amp;titel=xxx&quot;&gt;Home&lt;/router-link&gt;</span><br><span class=\"line\">&lt;!--跳转路由并携带query参数（对象写法）--&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;</span><br><span class=\"line\">&#123;path:&#x27;/home/news&#x27;,</span><br><span class=\"line\">query:&#123;id:xxx,titel:xxx&#125;</span><br><span class=\"line\">&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>接收query参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.query.id</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"命名路由\"><a href=\"#命名路由\" class=\"headerlink\" title=\"命名路由\"></a>命名路由</h4><p>简化路由跳转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">path:&#x27;/demo&#x27;,</span><br><span class=\"line\">component:Demo,</span><br><span class=\"line\">children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">\tpath:&#x27;test&#x27;</span><br><span class=\"line\">\tcomponent:Test,</span><br><span class=\"line\">\tchilren:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tname:&#x27;hello&#x27;\t//给路由命名</span><br><span class=\"line\">\t\tpath:&#x27;welcome&#x27;,</span><br><span class=\"line\">\t\tcomponent:Hello</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name:weather</span><br><span class=\"line\">path:&#x27;weather/:id/:title&#x27;,\t//使用占位符声明接收params参数</span><br><span class=\"line\">component:Weather</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>跳转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;router-link :to=&quot;name:hello&quot;&gt;test&lt;/router-link&gt;</span><br><span class=\"line\">&lt;router-link :to=&quot;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name:hello,</span><br><span class=\"line\">query:&#123;id:xxx,title:xxx&#125;</span><br><span class=\"line\">&#125;&quot;&gt;test&lt;/router-link&gt;</span><br><span class=\"line\">&lt;!--跳转路由并携带params参数（字符串写法）--&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;/home/news/id/title&quot;&gt;Home&lt;/router-link&gt;</span><br><span class=\"line\">&lt;!--跳转路由并携带params参数（对象写法）--&gt;</span><br><span class=\"line\">&lt;router-link  class=&quot;&quot; to=&quot;</span><br><span class=\"line\">&#123;name:&#x27;weather&#x27;,</span><br><span class=\"line\">params:&#123;id:xxx,titel:xxx&#125;</span><br><span class=\"line\">&#125;&quot;&gt;&lt;/router-link&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>携带params参数时，若使用to的对象写法，则不能使用path配置项，必须用name配置下</p>\n</blockquote>\n<p>接收params参数</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$route.params.id</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由的props配置\"><a href=\"#路由的props配置\" class=\"headerlink\" title=\"路由的props配置\"></a>路由的props配置</h3><p>index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export default new VueRouter(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">routes:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">path:&#x27;/home&#x27;,</span><br><span class=\"line\">component:Home,</span><br><span class=\"line\">children:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name:&#x27;test&#x27;,</span><br><span class=\"line\">path:&#x27;detail/:id/:title&#x27;,</span><br><span class=\"line\">compomemt:Detail,</span><br><span class=\"line\">//props的第一种写法，值为对象，该对象中的所有key-value都会以props的形式传给Detail组件</span><br><span class=\"line\">props:&#123;a:1,b:&#x27;hello&#x27;&#125;</span><br><span class=\"line\">//props的第二种写法，值为布尔值，若布尔值为真，就会把该路由组件收到的所有params参数，以props的形式传给detail组件。</span><br><span class=\"line\">props：true</span><br><span class=\"line\">//props的第三种写法，值为函数,该函数返回的对象中每一组key-value都会通过props传给Detail组件</span><br><span class=\"line\">props($route)&#123;</span><br><span class=\"line\">return &#123;id:$route.query.id,title:$route.query.title&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>Detail.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;ul&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">\t&lt;li&gt;&lt;/li&gt;</span><br><span class=\"line\">&lt;/ul&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\">name:&#x27;Detail&#x27;,</span><br><span class=\"line\">props:[&#x27;id&#x27;,&#x27;title&#x27;],</span><br><span class=\"line\">computed:&#123;xxx&#125;,</span><br><span class=\"line\">mounted()&#123;xxx&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><router-link>的replace属性<ul>\n<li>作用：控制路由跳转时操作的浏览器历史记录的模式</li>\n<li>历史记录的写入方式：<code>push</code>追加历史记录，<code>replace</code>替换当前记录；路由跳转时默认为<code>push</code></li>\n<li><router-link replace >test</router-link></li>\n</ul>\n</li>\n</ul>\n<p>message.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">name:&#x27;massage&#x27;,</span><br><span class=\"line\">data()&#123;&#125;,</span><br><span class=\"line\">methods:&#123;</span><br><span class=\"line\">pushShow(m)&#123;</span><br><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">\tname:&#x27;test&#x27;,</span><br><span class=\"line\">\tquery:&#123;</span><br><span class=\"line\">\t\tid:m.id,</span><br><span class=\"line\">\t\ttitle:m.title\t</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>Banner.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">export default &#123;</span><br><span class=\"line\">    name:&#x27;Banner&#x27;</span><br><span class=\"line\">\tmethods:&#123;</span><br><span class=\"line\">\tback()&#123;this.$router.back()&#125;,</span><br><span class=\"line\">\tforward()&#123;this.$router.forward()&#125;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"编程式路由导航\"><a href=\"#编程式路由导航\" class=\"headerlink\" title=\"编程式路由导航\"></a>编程式路由导航</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">this.$router.push(&#123;</span><br><span class=\"line\">\tname:&#x27;test&#x27;,</span><br><span class=\"line\">\tparams:&#123;id:xxx,title:xxx&#125;</span><br><span class=\"line\">\t&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">this.$router.replace(&#123;</span><br><span class=\"line\">\tname:&#x27;test&#x27;,</span><br><span class=\"line\">\tparams:&#123;id:xxx,title:xxx&#125;</span><br><span class=\"line\">\t&#125;)</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"缓存路由组件\"><a href=\"#缓存路由组件\" class=\"headerlink\" title=\"缓存路由组件\"></a>缓存路由组件</h3><p>让不展示的路由组件保持挂载，不被销毁</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;keep-alive include=&quot;News&quot;&gt;</span><br><span class=\"line\">&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br></pre></td></tr></table></figure>\n\n<p>home.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;template&gt;</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t&lt;ul&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;</span><br><span class=\"line\">\t\t\t&lt;router-link to=&quot;/home/new&quot;&gt;news&lt;/router-link&gt;</span><br><span class=\"line\">\t\t&lt;/li&gt;</span><br><span class=\"line\">\t\t&lt;li&gt;</span><br><span class=\"line\">\t\t\t&lt;router-link to=&quot;/home/message&quot;&gt;message&lt;/router-link&gt;</span><br><span class=\"line\">\t\t&lt;/li&gt;</span><br><span class=\"line\">\t&lt;/ul&gt;</span><br><span class=\"line\">&lt;!--缓存多个路由组件--&gt;</span><br><span class=\"line\">&lt;!-- &lt;keep-alive :include=&quot;[&#x27;&#x27;,&#x27;&#x27;]&quot;&gt;--&gt;</span><br><span class=\"line\">&lt;!--缓存一个路由组价--&gt;</span><br><span class=\"line\">&lt;keep-alive include=&quot;News&quot;&gt;</span><br><span class=\"line\">\t&lt;router-view&gt;&lt;/router-view&gt;</span><br><span class=\"line\">&lt;/keep-alive&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br><span class=\"line\">&lt;/template&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">export default&#123;</span><br><span class=\"line\"> name:&#x27;Home&#x27;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>New.vue</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\"> export default&#123;</span><br><span class=\"line\">\tname:&#x27;News&#x27;,</span><br><span class=\"line\">\tdata()&#123;</span><br><span class=\"line\">\t\treturn&#123;</span><br><span class=\"line\">\t\topacity:1</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t//路由组件所独有的两个钩子，用于捕获路由组件的激活状态</span><br><span class=\"line\">\tactivated()&#123;console.log(&#x27;News组件被激活了&#x27;)&#125;\t</span><br><span class=\"line\">\tdeactivated()&#123;console.log(&#x27;News组件失活了&#x27;)&#125;\t</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路由守卫\"><a href=\"#路由守卫\" class=\"headerlink\" title=\"路由守卫\"></a>路由守卫</h3><p>对路由进行权限控制</p>\n<ul>\n<li>全局守卫</li>\n</ul>\n<p>index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">const router=new VueRounter(&#123;</span><br><span class=\"line\">\troutes:[</span><br><span class=\"line\">\t\t&#123;</span><br><span class=\"line\">\t\tname:&#x27;test&#x27;,</span><br><span class=\"line\">\t\tpath:&#x27;/about&#x27;,</span><br><span class=\"line\">\t\tcomponent:About</span><br><span class=\"line\">\t\tmeta:&#123;isAuth:true,title:&#x27;新闻&#x27;&#125;,</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\t]</span><br><span class=\"line\">//全局前置路由守卫---初始化时被调用，每次路由切换之前被调用</span><br><span class=\"line\">router.beforeEach((to,from,next)=&gt;&#123;</span><br><span class=\"line\">if(to.meta.isAuth)&#123;//判断当前路由是否需要进行权限控制</span><br><span class=\"line\">\tif(localStorage.getItem(&#x27;shool&#x27;)===&#x27;test&#x27;)&#123;next();&#125;</span><br><span class=\"line\">\telse&#123;alert(&#x27;学校名不对&#x27;)&#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">next();\t//放行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//全局前置路由守卫---初始化时被调用，每次路由切换之后被调用</span><br><span class=\"line\">router.afterEach((to,from,next)=&gt;&#123;</span><br><span class=\"line\">console.log(&#x27;后置路由守卫&#x27;);</span><br><span class=\"line\">dovument.title=to.meta.title||&#x27;testTitle&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">export default router;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>独享守卫</li>\n</ul>\n<p>index.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">......</span><br><span class=\"line\">name:&#x27;news&#x27;,</span><br><span class=\"line\">path:&#x27;news&#x27;,</span><br><span class=\"line\">component:News,</span><br><span class=\"line\">meta:&#123;isAuth:true,title:&#x27;新闻&#x27;&#125;,</span><br><span class=\"line\">beforeEnter:(to,from,next)=&gt;&#123;</span><br><span class=\"line\">if(to.meta.isAuth)&#123;//判断当前路由是否需要进行权限控制</span><br><span class=\"line\">\tif(localStorage.getItem(&#x27;shool&#x27;)===&#x27;test&#x27;)&#123;next();&#125;</span><br><span class=\"line\">\telse&#123;alert(&#x27;学校名不对&#x27;)&#125;</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">next();\t//放行</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>组件内守卫</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//进入守卫：进入该组件时被调用</span><br><span class=\"line\">beforeRouteEnter(to,from,next)&#123;&#125;,</span><br><span class=\"line\">//离开守卫：离开该组件时被调用</span><br><span class=\"line\">beforeRouteLeave(to,from,next)&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"路由器工作模式\"><a href=\"#路由器工作模式\" class=\"headerlink\" title=\"路由器工作模式\"></a>路由器工作模式</h3><p>对于一个url来说<code>#</code>及其后的内容就是hash值;hash值不会包含在http请求中，即hash值不会带给服务器。</p>\n<ul>\n<li>hash模式:</li>\n</ul>\n<p>地址中永远带着#号，不美观；通过第三方手机app分享时可能会标记为不合法；但其兼容性好；</p>\n<ul>\n<li>history模式:</li>\n</ul>\n<p>地址干净，兼容比hash略差，应用部署上线时需要后端人员支持，解决刷新页面服务端404的问题；</p>\n<h2 id=\"Vue-UI组件库\"><a href=\"#Vue-UI组件库\" class=\"headerlink\" title=\"Vue UI组件库\"></a>Vue UI组件库</h2><p>移动端：<code>Vant</code>,<code>Cube UI</code>,<code>Mint UI</code></p>\n<p>PC端：<code>Element UI</code>, <code>IView UI</code></p>\n<p>main.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">import Vue from &#x27;vue&#x27;</span><br><span class=\"line\">import App from &#x27;./App.vue&#x27;</span><br><span class=\"line\">//引入ElementUI组件库</span><br><span class=\"line\">import ElementUI from &#x27;element-ui&#x27;</span><br><span class=\"line\">//引入ElementUI全部样式</span><br><span class=\"line\">import &#x27;element-ui/lib/theme-chalk/index.css&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">Vue.ues(ElementUI);</span><br><span class=\"line\"></span><br><span class=\"line\">new Vue(&#123;</span><br><span class=\"line\">\tel:&#x27;#app&#x27;</span><br><span class=\"line\">\trender:h=&gt;h(App),</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>balel.config.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">presets:[</span><br><span class=\"line\">\t&#x27;@vue/cli-plugin-babel/preset&#x27;,</span><br><span class=\"line\">\t[&quot;@babel/present-env&quot;,&#123;&quot;modules&quot;:false&#125;],</span><br><span class=\"line\">],</span><br><span class=\"line\">plugins:[</span><br><span class=\"line\">[</span><br><span class=\"line\">\t&quot;component&quot;,</span><br><span class=\"line\">\t&#123;</span><br><span class=\"line\">\t&quot;libraryName&quot;:&#x27;element-ui&#x27;,</span><br><span class=\"line\">\t&quot;styleLibraryName&quot;:&quot;theme-chalk&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n","categories":["study"],"tags":[]},{"title":"微信小程序","url":"http://www.baidu.com/2021/01/11/weixin/","content":"<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>app.json      //配置</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&quot;page&quot;:[</span><br><span class=\"line\">    &quot;page/index/index“，</span><br><span class=\"line\">    &quot;page下页面路径“</span><br><span class=\"line\">]&#125;</span><br><span class=\"line\">&quot;window&quot;:&#123;</span><br><span class=\"line\">   // 导航配置</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>app.js  //注册小程序应用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">App(&#123;.....&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>app.wxss    //全局公共样式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page&#123;       //小程序会在所有页面加一个page ，因此应设置页面高度为100%</span><br><span class=\"line\">           height:100%;</span><br><span class=\"line\">       &#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>页面：<br>page<br>\\index<br>\\-index.js  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">     page(&#123;</span><br><span class=\"line\">     //初始化数据</span><br><span class=\"line\">         data: &#123;</span><br><span class=\"line\">             msg: &#x27;hello&#x27;,</span><br><span class=\"line\">             userInfo:&#123;</span><br><span class=\"line\">                 //存放用户信息</span><br><span class=\"line\">             &#125;,</span><br><span class=\"line\">         &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        //事件绑定</span><br><span class=\"line\">        handleParent()&#123;            </span><br><span class=\"line\">            console.log(&#x27;parent&#x27;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        handleChild()&#123;</span><br><span class=\"line\">            console.log(&#x27;child&#x27;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">        //跳转至logs页面</span><br><span class=\"line\">        toLogs()&#123;                </span><br><span class=\"line\">            //需要使用api</span><br><span class=\"line\">            wx,navigateTo(&#123;         //保留当前页面跳转到另一个页面</span><br><span class=\"line\">                url:&#x27;/page/logs/logs&#x27;,   //相对路径</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">         //生命周期函数：监听页面加载，最先执行</span><br><span class=\"line\">         onLoad:function(options)&#123;</span><br><span class=\"line\">             console.log(&#x27;onLoad()&#x27;)        //打印</span><br><span class=\"line\"></span><br><span class=\"line\">             //修改msg数据：this.setData</span><br><span class=\"line\">             consile.log(this)  //this表示当前页面的实例对象</span><br><span class=\"line\">             consile.log(this.data.msg)   </span><br><span class=\"line\">              this.setData(&#123;</span><br><span class=\"line\">                 msg:&#x27;after&#x27;</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">             //授权以后获取用户信息</span><br><span class=\"line\">             wx.gerUserInfo(&#123;</span><br><span class=\"line\">                 succes:() =&gt; &#123;</span><br><span class=\"line\">                     condole.log(res);</span><br><span class=\"line\">                     //成功后更新数据</span><br><span class=\"line\">                     this.setData(&#123;</span><br><span class=\"line\">                         userInfo: res.userInfo</span><br><span class=\"line\">                     &#125;)</span><br><span class=\"line\">                 &#125;,</span><br><span class=\"line\">                 fail:() =&gt;&#123;</span><br><span class=\"line\">                     condole.log(err);</span><br><span class=\"line\">                 &#125;,</span><br><span class=\"line\">             &#125;)</span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">    //获取用户信息</span><br><span class=\"line\">       handleGetUserInfo(res)&#123;      //形参用于判断</span><br><span class=\"line\">           console.log(res)</span><br><span class=\"line\">        if(res.detail.userInfo)&#123;</span><br><span class=\"line\">            //修改userInfo的状态数据</span><br><span class=\"line\">            thsi.setData(&#123;</span><br><span class=\"line\">                userInfo: res.detail.userInfo</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        </span><br><span class=\"line\">       &#125;,</span><br><span class=\"line\">.....</span><br><span class=\"line\">                 &#125;)</span><br></pre></td></tr></table></figure>\n<ul>\n<li>index.wxml</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">  &lt;view class=&quot;indexcontainer&quot;&gt;   &lt;!--//样式--&gt;</span><br><span class=\"line\">    </span><br><span class=\"line\">    &lt;image wx:if=&#x27;&#123;&#123;userInfo.avatarUrl&#125;&#125;&#x27; class=&quot;avatarUrl&quot; src=&quot;&#123;&#123;userInfo.avatarUrl&#125;&#125;&quot;&gt; &lt;/image&gt;    &lt;!--图片路径--&gt;</span><br><span class=\"line\">    &lt;botton wx:else bindgetuserinfo=&#x27;handleGetUserInfo&#x27; open-type=&quot;getUserInfo&quot;&gt;获取用户信息&lt;/botton&gt;</span><br><span class=\"line\">    &lt;text class=&quot;userName&quot;&gt; 文字文字 &lt;/text&gt;</span><br><span class=\"line\">    &lt;text&gt;&#123;&#123;msg&#125;&#125;&lt;/text&gt;    &lt;!--//使用数据--&gt;</span><br><span class=\"line\">    &lt;!--  事件绑定  --&gt;</span><br><span class=\"line\">&lt;!--    &lt;view class=&quot;hello&quot; bindtap=&quot;handleParent&quot;&gt;  &lt;text bindtap=&#x27;handleChild&#x27;&gt;hello&lt;/text&gt;   &lt;/view&gt;  --&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">  &lt;view class=&quot;hello&quot; bindtap=&quot;toLogs&quot;&gt;  </span><br><span class=\"line\">    &lt;text&gt;hello&lt;/text&gt;  </span><br><span class=\"line\">   &lt;/view&gt; </span><br><span class=\"line\">&lt;/view&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>index.wxss      //样式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">             .indexContainer&#123;</span><br><span class=\"line\">  display: flex;</span><br><span class=\"line\">  flex-direction: column;</span><br><span class=\"line\">  align-items: center;</span><br><span class=\"line\">  background: #f0f;       /*只有16进制*/</span><br><span class=\"line\">  height: 100%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.avatarUrl&#123;         /*头像尺寸样式*/</span><br><span class=\"line\">  width: 200rpx;</span><br><span class=\"line\">  height:200rpx;</span><br><span class=\"line\">  border-radius: 50%;      /*圆角*/</span><br><span class=\"line\">  margin: 100rpx 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.usrName&#123;</span><br><span class=\"line\">  font-size: 32rpx;</span><br><span class=\"line\">  margin: 100rpx 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.hello&#123;</span><br><span class=\"line\">  width:300rpx;</span><br><span class=\"line\">  height: 80rpx;</span><br><span class=\"line\">  line-height: 80rpx;</span><br><span class=\"line\">  text-align: center;</span><br><span class=\"line\">  font-size: 28rpx;</span><br><span class=\"line\">  border: 1rpx solid #333;</span><br><span class=\"line\">  border-radius:10rpx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>index.json  </p>\n</li>\n<li><p>日志：<br>log/logs.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;usingComponens&quot;:&#123;&#125;,</span><br><span class=\"line\">    &quot;navigationBarTitleText&quot;: &quot;日志“    //最顶部栏文字</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"绑定事件\"><a href=\"#绑定事件\" class=\"headerlink\" title=\"绑定事件\"></a>绑定事件</h3><p>bind：冒泡事件<br>catch：非冒泡</p>\n<h3 id=\"条件渲染\"><a href=\"#条件渲染\" class=\"headerlink\" title=\"条件渲染\"></a>条件渲染</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx:if=&#x27;条件&#x27;</span><br><span class=\"line\">wx:else</span><br><span class=\"line\">wx:elif=&#x27;条件&#x27;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><h3 id=\"常用功能\"><a href=\"#常用功能\" class=\"headerlink\" title=\"常用功能\"></a>常用功能</h3><ol>\n<li>导航栏</li>\n</ol>\n<p>在app.json文件内：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">    &quot;pages&quot;:[</span><br><span class=\"line\">        &quot;路径&quot;,</span><br><span class=\"line\">        &quot;路径&quot;</span><br><span class=\"line\">    ],</span><br><span class=\"line\">    &quot;window&quot;:&#123;</span><br><span class=\"line\">        ...</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    &quot;tabBar&quot;:&#123;</span><br><span class=\"line\">        &quot;backgroundColor&quot;:&quot;#f6f6f5&quot;,</span><br><span class=\"line\">        &quot;list&quot;:[&#123;</span><br><span class=\"line\">            &quot;pagePath&quot;:&quot;路径&quot;,</span><br><span class=\"line\">            &quot;text&quot;:&quot;文字&quot;</span><br><span class=\"line\">        &#125;,</span><br><span class=\"line\">        &#123;</span><br><span class=\"line\">            &quot;pagePath&quot;:&quot;路径&quot;,</span><br><span class=\"line\">            &quot;text&quot;:&quot;文字&quot;</span><br><span class=\"line\"> </span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        ]</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>input</li>\n</ol>\n<p>在index.js文件夹内</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">        first:&quot;&quot;,</span><br><span class=\"line\">        second:&quot;&quot;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\">    first:function(e)&#123;</span><br><span class=\"line\">        var n=e.detail.value;</span><br><span class=\"line\">        if(!isNaN(n))&#123;</span><br><span class=\"line\">            this.setData(&#123;</span><br><span class=\"line\">                first:n</span><br><span class=\"line\">            &#125;)</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;,</span><br><span class=\"line\"> calculate:function()&#123;</span><br><span class=\"line\">    var n=this.data.first+1;</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">        second:n</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    )</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<p>在index.wxml文件中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;input bindinput=&quot;first&quot; placeholder=&quot;文字&quot;&gt;&lt;/input&gt;</span><br><span class=\"line\">&lt;input value=&quot;second&quot; placeholder=&quot;文字&quot;disabled&gt;&lt;/input&gt;</span><br><span class=\"line\">//placeholder：提示</span><br><span class=\"line\">//bindiniput:输入</span><br><span class=\"line\">//bindconfirm:回车触发事件</span><br><span class=\"line\">//value:输入框内容</span><br><span class=\"line\">&lt;input class=&quot;search_input&quot; placeholder=&quot;Search&quot; bindinput=&quot;text_input&quot; bindconfirm=&quot;searchtap&quot;value=&quot;&#123;&#123;search_key&#125;&#125;&quot;/&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">.....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>textarea</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//auto-focus: 自动聚焦</span><br><span class=\"line\">//maxlength=&quot;-1&quot;:不限长度</span><br><span class=\"line\"> &lt;textarea auto-focus placeholder=&quot;Text&quot;maxlength=&quot;-1&quot; bindinput=&quot;text_input&quot; value=&quot;&#123;&#123;record&#125;&#125;&quot;/&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>选择照片</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wx.chooseImage(&#123;</span><br><span class=\"line\">     count: 1, //数量 默认9</span><br><span class=\"line\">     sizeType: [&#x27;original&#x27;, &#x27;compressed&#x27;], //图片质量：原图，压缩</span><br><span class=\"line\">     sourceType: [&#x27;album&#x27;, &#x27;camera&#x27;],      //拍照，相册</span><br><span class=\"line\">     success: (res) =&gt; &#123;</span><br><span class=\"line\">       //成功后把地址放入全局变量中,</span><br><span class=\"line\">       app.data.picpath = res.tempFilePaths[0];</span><br><span class=\"line\">       //跳转到图片裁剪界面，文字识别界面</span><br><span class=\"line\">       wx.navigateTo(&#123;</span><br><span class=\"line\">         url: &#x27;/pages/ocr/ocr&#x27;,</span><br><span class=\"line\">       &#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">     &#125;</span><br><span class=\"line\">   &#125;)</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>跳转界面 </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//返回界面</span><br><span class=\"line\">           wx.navigateBack(&#123;</span><br><span class=\"line\">             delta: 0,     //0表示上一层</span><br><span class=\"line\">           &#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//关闭当前页面跳转到</span><br><span class=\"line\"> wx.redirectTo(&#123;</span><br><span class=\"line\">   url: &#x27;/pages/index/index&#x27;,</span><br><span class=\"line\"> &#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取列表index</li>\n</ul>\n<p>wx:for控制属性绑定一个数组进行列表渲染。</p>\n<blockquote>\n<p>（当前项的下标变量名默认为 index，数组当前项的变量名默认为 item，改名：使用 wx:for-item=“jjj” 可以指定数组当前元素的变量名，<br>使用 wx:for-index =”aa“可以指定数组当前下标的变量名。<br>这个注意了。wx:key还是要加上的，不然一直报这个提示错误：如果列表中项目的位置会动态改变或者有新的项目添加到列表中，并且希望列表中的项目保持自己的特征和状态（如 <input/> 中的输入内容，<switch/> 的选中状态），需要使用 wx:key 来指定列表中项目的唯一的标识符。</p>\n</blockquote>\n<blockquote>\n<p>wx:key 的值以两种形式提供<br>字符串，代表在 for 循环的 array 中 item 的某个 property，该 property 的值需要是列表中唯一的字符串或数字，且不能动态改变。<br>保留关键字 *this 代表在 for 循环中的 item 本身，这种表示需要 item 本身是一个唯一的字符串或者数字，如：<br>当数据改变触发渲染层重新渲染的时候，会校正带有 key 的组件，框架会确保他们被重新排序，而不是重新创建，以确保使组件保持自身的状态，并且提高列表渲染时的效率。如不提供 wx:key，会报一个 warning， 如果明确知道该列表是静态，或者不必关注其顺序，可以选择忽略。）</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wxml:</span><br><span class=\"line\"> &lt;view class=&quot;touch-item &#123;&#123;item.isTouchMove ? &#x27;touch-move-active&#x27; : &#x27;&#x27;&#125;&#125;&quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot; bindtouchstart=&quot;touchstart&quot; bindtouchmove=&quot;touchmove&quot; wx:for=&quot;&#123;&#123;item1&#125;&#125;&quot;   wx:key=&quot;i&quot;&gt;</span><br><span class=\"line\"> &lt;view class=&quot;del&quot; catchtap=&quot;del&quot; style=&quot;border-radius:20rpx 0 0 20rpx;&quot;  data-detail=&quot;&#123;&#123;item.content.text&#125;&#125; &quot; data-index=&quot;&#123;&#123;index&#125;&#125;&quot;&gt;删除&lt;/view&gt;&lt;/view&gt;</span><br><span class=\"line\">js:</span><br><span class=\"line\"> //列表删除</span><br><span class=\"line\">del(e)&#123;</span><br><span class=\"line\">    this.data.item1.splice(e.currentTarget.dataset.index, 1)</span><br><span class=\"line\">    this.setData(&#123;</span><br><span class=\"line\">     item1: this.data.item1</span><br><span class=\"line\">    &#125;)&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>搜索</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(var i=0,j=0;i&lt;app.data.item2.length;i++)&#123;</span><br><span class=\"line\">   if(app.data.item2[i].delete==0)&#123;</span><br><span class=\"line\">     //模糊搜索</span><br><span class=\"line\">  if(app.data.item2[i].content.text.indexOf(this.data.search_key)!=-1)&#123;</span><br><span class=\"line\">    this.data.item1[j]=app.data.item2[i];</span><br><span class=\"line\">    j++;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>复制</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*#######复制功能########################*/</span><br><span class=\"line\">copy: function (e) &#123;</span><br><span class=\"line\">  var that = this;</span><br><span class=\"line\">  wx.setClipboardData(&#123;</span><br><span class=\"line\">   data: e.currentTarget.dataset.detail,</span><br><span class=\"line\">   success: function (res) &#123;</span><br><span class=\"line\">   &#125;</span><br><span class=\"line\">  &#125;);</span><br><span class=\"line\"> &#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>云数据库</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">wx.cloud.init(&#123;         //初始化</span><br><span class=\"line\">  env:&quot;cloud1-3gerlsz2682ceb37&quot;,</span><br><span class=\"line\">  traceUser:true,</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">const db=wx.cloud.database();</span><br><span class=\"line\"></span><br><span class=\"line\">Page(&#123; </span><br><span class=\"line\">    var that = this;//定义到这里，让that先获取到外面方法的this</span><br><span class=\"line\">    db.collection(&#x27;my_data&#x27;).where(&#123;_openid:app.data.useropenid&#125;).get(&#123;</span><br><span class=\"line\">      success: function(res) &#123;</span><br><span class=\"line\">    //    that.setData(&#123;item2:res.data[0].array&#125;)</span><br><span class=\"line\">    //用户数据放入全局变量中</span><br><span class=\"line\">    app.data.item2=res.data[0].array; </span><br><span class=\"line\">    </span><br><span class=\"line\">    //更新数据 ，添加新条目</span><br><span class=\"line\">  db.collection(&#x27;my_data&#x27;)</span><br><span class=\"line\">  .doc(app.data.useropenid)     //_id</span><br><span class=\"line\">  .update(&#123;</span><br><span class=\"line\">    data:&#123;</span><br><span class=\"line\">     array: _.unshift([&#123;</span><br><span class=\"line\">      content:&#123;</span><br><span class=\"line\">        text: this.data.record,</span><br><span class=\"line\">        time: this.data.record_time,</span><br><span class=\"line\">      &#125;,</span><br><span class=\"line\">      isTouchMove:false,</span><br><span class=\"line\">      delete:0</span><br><span class=\"line\">    &#125;])&#125;</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取时间</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">util.js:</span><br><span class=\"line\">const formatTime = date =&gt; &#123;</span><br><span class=\"line\">  const year = date.getFullYear()</span><br><span class=\"line\">  const month = date.getMonth() + 1</span><br><span class=\"line\">  const day = date.getDate()</span><br><span class=\"line\">  const hour = date.getHours()</span><br><span class=\"line\">  const minute = date.getMinutes()</span><br><span class=\"line\">  const second = date.getSeconds()</span><br><span class=\"line\"></span><br><span class=\"line\">  return [year, month, day].map(formatNumber).join(&#x27;-&#x27;) + &#x27; &#x27; + [hour, minute, second].map(formatNumber).join(&#x27;:&#x27;)</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const formatNumber = n =&gt; &#123;</span><br><span class=\"line\">  n = n.toString()</span><br><span class=\"line\">  return n[1] ? n : &#x27;0&#x27; + n</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">module.exports = &#123;</span><br><span class=\"line\">  formatTime: formatTime</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> js:</span><br><span class=\"line\"> var util = require(&#x27;../../util/util.js&#x27;);</span><br><span class=\"line\"> Page(&#123;</span><br><span class=\"line\">  //获取时间</span><br><span class=\"line\">  const _ = db.command;</span><br><span class=\"line\">  var time = util.formatTime(new Date());</span><br><span class=\"line\">  this.setData(&#123;</span><br><span class=\"line\">    record_time:time</span><br><span class=\"line\">  &#125;)</span><br><span class=\"line\">  </span><br><span class=\"line\">  &#125;)</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>布局</li>\n</ol>\n<ul>\n<li>固定按钮</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">wxml:</span><br><span class=\"line\">&lt;view class=&quot;round-click&quot; bindtap=&quot;new_goto&quot;&gt;+&lt;/view&gt;</span><br><span class=\"line\">wxss:</span><br><span class=\"line\">  .round-click&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">    height: 120rpx;</span><br><span class=\"line\"></span><br><span class=\"line\">    width: 120rpx;</span><br><span class=\"line\">    background-color:rgb(246, 246, 246,0.9);</span><br><span class=\"line\">    border-radius: 100%;</span><br><span class=\"line\">    position: fixed;</span><br><span class=\"line\">    bottom: 100rpx;</span><br><span class=\"line\">    right: 20rpx;</span><br><span class=\"line\"></span><br><span class=\"line\">    display: flex;</span><br><span class=\"line\">    align-items: center;</span><br><span class=\"line\">\tfont-size:70rpx;</span><br><span class=\"line\">    justify-content: center;</span><br><span class=\"line\">    z-index: 9;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>wx.request发起 HTTPS 网络请求,data请求的参数,success接口调用成功的回调函数    </p>\n<p>AudioContext对象用于与audio组件绑定，通过它可以在逻辑层操作视图层的audio组件。可以用wx.createAudioContext(audioId)接口创建并返回audio的上下文对象AudioContext。</p>\n","categories":["study"],"tags":[]},{"title":"snowboy语音模型说明","url":"http://www.baidu.com/2021/01/01/snowboy/","content":"<h1 id=\"snowboy-离线语音唤醒说明\"><a href=\"#snowboy-离线语音唤醒说明\" class=\"headerlink\" title=\"snowboy 离线语音唤醒说明\"></a>snowboy 离线语音唤醒说明</h1><ul>\n<li>resources/models/snowboy.umdl：唤醒词为“snowboy”的通用模型。将SetSensitivity设置为0.5，ApplyFrontend设置为false。</li>\n<li>resources/models/jarvis.umdl: 唤醒词为“Jarvis” (<a href=\"https://snowboy.kitt.ai/hotword/29\">https://snowboy.kitt.ai/hotword/29</a>) 的通用模型，其中包含了对应于“Jarvis”的两个唤醒词模型，所以需要设置两个sensitivity。将SetSensitivity设置为0.8,0.8，ApplyFrontend设置为true。</li>\n<li>resources/models/smart_mirror.umdl: 唤醒词为“Smart Mirror” (<a href=\"https://snowboy.kitt.ai/hotword/47\">https://snowboy.kitt.ai/hotword/47</a>) 的通用模型。将SetSensitivity设置为0.5，ApplyFrontend设置为false。</li>\n<li>resources/models/subex.umdl: 唤醒词为“Subex”(<a href=\"https://snowboy.kitt.ai/hotword/22014\">https://snowboy.kitt.ai/hotword/22014</a>) 的通用模型。将SetSensitivity设置为0.5，ApplyFrontend设置为true。</li>\n<li>resources/models/neoya.umdl: 唤醒词为“Neo ya”(<a href=\"https://snowboy.kitt.ai/hotword/22171\">https://snowboy.kitt.ai/hotword/22171</a>) 的通用模型。其中包含了对应于“Neo ya”的两个&gt;唤醒词模型，所以需要设置两个sensitivity。将SetSensitivity设置为0.7,0.7，ApplyFrontend设置为true。</li>\n<li>resources/models/hey_extreme.umdl: 唤醒词为“Hey Extreme” (<a href=\"https://snowboy.kitt.ai/hotword/15428)%E7%9A%84%E9%80%9A%E7%94%A8%E6%A8%A1%E5%9E%8B%E3%80%82%E5%B0%86%60SetSensitivity%60%E8%AE%BE%E7%BD%AE%E4%B8%BA%600.6%60%EF%BC%8C%60ApplyFrontend%60%E8%AE%BE%E7%BD%AE%E4%B8%BA%60true%60%E3%80%82\">https://snowboy.kitt.ai/hotword/15428)的通用模型。将`SetSensitivity`设置为`0.6`，`ApplyFrontend`设置为`true`。</a></li>\n<li>resources/models/computer.umdl: 唤醒词为“Computer” (<a href=\"https://snowboy.kitt.ai/hotword/46\">https://snowboy.kitt.ai/hotword/46</a>) 的通用模型。将SetSensitivity设置为0.6，ApplyFrontend设置为true。</li>\n<li>resources/models/view_glass.umdl: 唤醒词为“View Glass” (<a href=\"https://snowboy.kitt.ai/hotword/7868\">https://snowboy.kitt.ai/hotword/7868</a>) 的通用模型。将SetSensitivity设置为0.7，ApplyFrontend设置为true。</li>\n</ul>\n","categories":["嵌入式"],"tags":[]},{"title":"昂达平板故障","url":"http://www.baidu.com/2021/01/01/angda/","content":"<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xrandr --output HDMI-2 --same-as DSI-1  //画面同步</span><br><span class=\"line\"></span><br><span class=\"line\">Alt+F3+s+上下 // 打开窗口，移动到另一显示器</span><br><span class=\"line\">-------------------</span><br><span class=\"line\">systemctl start sshd-service   // 开启ssh服务</span><br><span class=\"line\">password:</span><br><span class=\"line\">------------------</span><br><span class=\"line\">sudo wifi-menu    // 连接wifi</span><br></pre></td></tr></table></figure>\n","categories":["error"],"tags":[]},{"title":"嵌入式tools","url":"http://www.baidu.com/2021/01/01/tool/","content":"<h1 id=\"linux下的嵌入式开发工具\"><a href=\"#linux下的嵌入式开发工具\" class=\"headerlink\" title=\"linux下的嵌入式开发工具\"></a>linux下的嵌入式开发工具</h1><h2 id=\"串口调试\"><a href=\"#串口调试\" class=\"headerlink\" title=\"串口调试\"></a>串口调试</h2><p>查看串口：<code>ls -l /dev/tty*</code></p>\n<p>串口调试工具：<code>picocom</code> <code>putty</code></p>\n<blockquote>\n<p>使用时需要root权限</p>\n</blockquote>\n<h4 id=\"picocom\"><a href=\"#picocom\" class=\"headerlink\" title=\"picocom\"></a>picocom</h4><p>查看帮助：<code>picocom -h </code></p>\n<p>使用方法如：<code>picocom -b 115200 /dev/ttyUSB0</code></p>\n","categories":["嵌入式"],"tags":[]},{"title":"ubuntu系统安装","url":"http://www.baidu.com/2020/12/22/ubuntu/","content":"<h1 id=\"ubuntu系统安装\"><a href=\"#ubuntu系统安装\" class=\"headerlink\" title=\"ubuntu系统安装\"></a>ubuntu系统安装</h1><h2 id=\"安装\"><a href=\"#安装\" class=\"headerlink\" title=\"安装\"></a>安装</h2><h3 id=\"下载镜像\"><a href=\"#下载镜像\" class=\"headerlink\" title=\"下载镜像\"></a>下载镜像</h3><h3 id=\"软碟通写入硬盘镜像\"><a href=\"#软碟通写入硬盘镜像\" class=\"headerlink\" title=\"软碟通写入硬盘镜像\"></a>软碟通写入硬盘镜像</h3><h3 id=\"重启进入安装界面\"><a href=\"#重启进入安装界面\" class=\"headerlink\" title=\"重启进入安装界面\"></a>重启进入安装界面</h3><table>\n<thead>\n<tr>\n<th>分区：</th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>/boot/efi/</td>\n<td>引导分区</td>\n</tr>\n<tr>\n<td>/boot</td>\n<td>启动</td>\n</tr>\n<tr>\n<td>/</td>\n<td>根目录</td>\n</tr>\n<tr>\n<td>swap</td>\n<td>交换分区</td>\n</tr>\n<tr>\n<td>/home</td>\n<td>用户存放文件</td>\n</tr>\n</tbody></table>\n<h2 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h2><ul>\n<li>设置根用户密码：<br><code>sudo passwd</code></li>\n<li>换源<br><code>sudo vim /etc/apt/sources.list</code><br>粘贴<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#添加阿里源</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-proposed main restricted universe multiverse</span><br><span class=\"line\">deb http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb-src http://mirrors.aliyun.com/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">#添加清华源,默认注释了源码镜像以提高 apt update 速度，如有需要可自行取消注释</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-updates main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-backports main restricted universe multiverse</span><br><span class=\"line\">deb https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse</span><br><span class=\"line\"># deb-src https://mirrors.tuna.tsinghua.edu.cn/ubuntu/ focal-security main restricted universe multiverse multiverse</span><br></pre></td></tr></table></figure></li>\n<li>执行更新命令：<br><code>sudo apt-get update</code><br><code>sudo apt-get upgrade</code></li>\n</ul>\n<h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><ul>\n<li>vim</li>\n<li>neofetch</li>\n<li>ranger</li>\n<li>google chrome</li>\n<li>搜狗输入法</li>\n<li>网易云、QQ音乐</li>\n<li>wps</li>\n<li>字体安装<br>windows的字体一般存放在c:/windows/fonts目录下，我拷贝到linux下的字体有：<br><code>simfang.ttf</code> 仿宋体<br><code>simhei.ttf </code>黑体<br><code>simkai.ttf </code>楷体</li>\n</ul>\n<p>宋体：<code>simsunb.ttf </code>和<code>simsun.ttc</code><br><code>simsun.ttf </code>宋体和新宋体，原文件名<code>simsun.ttc</code><br>微软雅黑：<code>msyhbd.ttf</code></p>\n<p>下载字体文件，然后复制到Linux系统中的/usr/share/fonts文件夹中。<br>修改权限，并更新字体缓存<br><code>sudo chmod -R 777  /usr/share/fonts/windows-font</code><br><code>cd /usr/share/fonts/windows-font</code></p>\n<p>执行以下命令,生成字体的索引信息：<br><code>sudo mkfontscale</code><br><code>sudo mkfontdir</code><br>运行fc-cache命令更新字体缓存。<br><code>sudo fc-cache -fv</code></p>\n","categories":[],"tags":[]},{"title":"十大排序算法","url":"http://www.baidu.com/2020/12/22/paixushuanfa/","content":"<h1 id=\"十大排序算法\"><a href=\"#十大排序算法\" class=\"headerlink\" title=\"十大排序算法\"></a>十大排序算法</h1><p><a href=\"https://imgtu.com/i/2QDphq\"><img src=\"https://z3.ax1x.com/2021/06/02/2QDphq.md.png\" alt=\"2QDphq.md.png\"></a><br><a href=\"https://imgtu.com/i/2QDC90\"><img src=\"https://z3.ax1x.com/2021/06/02/2QDC90.md.png\" alt=\"2QDC90.md.png\"></a></p>\n<h2 id=\"选择排序\"><a href=\"#选择排序\" class=\"headerlink\" title=\"选择排序\"></a>选择排序</h2><blockquote>\n<p>时间复杂度O(n^2);稳定的排序方法，</p>\n</blockquote>\n<p>首先在未排序序列中找到最小元素，存放到排序序列的起始位置，然后，再从剩余未排序元素中继续寻找最小元素，然后放到已未排序序列的第一个。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void selection_sort(int arr[], int len)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">    int i,j;</span><br><span class=\"line\">        for (i = 0 ; i &lt; len - 1 ; i++)</span><br><span class=\"line\">    &#123;</span><br><span class=\"line\">                int min = i;\t//用于记录最小值的下标</span><br><span class=\"line\">                for (j = i + 1; j &lt; len; j++)     //从后面的元素开始找</span><br><span class=\"line\">                        if (arr[j] &lt; arr[min])    //找到比当前元素小的值</span><br><span class=\"line\">                                min = j;    //紀錄最小值的下标</span><br><span class=\"line\">                swap(&amp;arr[min], &amp;arr[i]);    //交换当前值与最小值</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"冒泡排序\"><a href=\"#冒泡排序\" class=\"headerlink\" title=\"冒泡排序\"></a>冒泡排序</h2><blockquote>\n<p>时间复杂度O(n^2);稳定的排序方法，</p>\n</blockquote>\n<p>比较相邻的元素。如果第一个比第二个大，就交换它们两个；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void bubble_sort(int arr[], int len) &#123;</span><br><span class=\"line\">        int i, j, temp;</span><br><span class=\"line\">        for (i = 0; i &lt; len - 1; i++)</span><br><span class=\"line\">                for (j = 0; j &lt; len - 1 - i; j++)</span><br><span class=\"line\">                        if (arr[j] &gt; arr[j + 1]) &#123;</span><br><span class=\"line\">                                temp = arr[j];</span><br><span class=\"line\">                                arr[j] = arr[j + 1];</span><br><span class=\"line\">                                arr[j + 1] = temp;</span><br><span class=\"line\">                        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"插入排序\"><a href=\"#插入排序\" class=\"headerlink\" title=\"插入排序\"></a>插入排序</h2><blockquote>\n<p>时间复杂度为O(n^2) ;稳定的排序方法，n值较小时的最佳排序方法；</p>\n</blockquote>\n<p>取出下一个元素，在已经排序的元素序列中从后向前扫描；如果已排序中的元素大于该元素，则将比它大的那个元素后移到下一位置,重复以上步骤，直到找到已排序的元素<em>小于或者等于新元素</em>的位置；将新元素插入到该位置后；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void insertion_sort(int arr[], int len)&#123;\t//传入数组和数组长度</span><br><span class=\"line\">        int i,j,key;</span><br><span class=\"line\">        for (i=1;i&lt;len;i++)&#123;</span><br><span class=\"line\">                key = arr[i];\t//key等于当前元素</span><br><span class=\"line\">                j=i-1;\t\t//j为前一个元素下标</span><br><span class=\"line\">                while((j&gt;=0) &amp;&amp; (arr[j]&gt;key)) &#123;\t\t//如果前面的元素大于当前元素</span><br><span class=\"line\">                        arr[j+1] = arr[j];\t\t//则比它大的那个元素后移一位</span><br><span class=\"line\">                        j--;\t\t//j下标前移</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">                arr[j+1] = key;\t\t//前面大的元素已经后移一位，现在只需插入当前元素</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"插入排序-希尔排序\"><a href=\"#插入排序-希尔排序\" class=\"headerlink\" title=\"插入排序-希尔排序\"></a>插入排序-希尔排序</h2><blockquote>\n<p>时间复杂度为O(n^(3/2));不稳定的排序方法， </p>\n</blockquote>\n<p>将整个待排序的记录序列分割成为若干子序列,分别进行直接插入排序，具体算法描述：</p>\n<p>选择一个增量序列t1，t2，…，tk，其中ti&gt;tj，tk=1；(dlta[k]=2^(t-k+1)-1, t为排序趟数，1&lt;=k&lt;=log(2)(n+1)]<br>按增量序列个数k，对序列进行k 趟排序；<br>每趟排序，根据对应的增量ti，将待排序列分割成若干长度为m 的子序列，分别对各子表进行直接插入排序。仅增量因子为1 时，整个序列作为一个表来处理，表长度即为整个序列的长度。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void shell_sort(int arr[], int len) &#123;</span><br><span class=\"line\">        int gap, i, j;</span><br><span class=\"line\">        int temp;</span><br><span class=\"line\">        for (gap = len &gt;&gt; 1; gap &gt; 0; gap &gt;&gt;= 1)\t//</span><br><span class=\"line\">                for (i = gap; i &lt; len; i++) &#123;</span><br><span class=\"line\">                        temp = arr[i];</span><br><span class=\"line\">                        for (j = i - gap; j &gt;= 0 &amp;&amp; arr[j] &gt; temp; j -= gap)&#123;\t//</span><br><span class=\"line\">\t\t\t  arr[j + gap] = arr[j];</span><br><span class=\"line\">\t\t\t&#125;</span><br><span class=\"line\">                        arr[j + gap] = temp;</span><br><span class=\"line\">                &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"归并排序\"><a href=\"#归并排序\" class=\"headerlink\" title=\"归并排序\"></a>归并排序</h2><blockquote>\n<p>时间复杂度O(nlogn);n值较大时，所需时间较堆排序省，但所需的辅助存储量最多。</p>\n</blockquote>\n<p>把长度为n的输入序列分成两个长度为n/2的子序列；<br>对这两个子序列分别采用归并排序；<br>将两个排序好的子序列合并成一个最终的排序序列。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int min(int x, int y) &#123;</span><br><span class=\"line\">    return x &lt; y ? x : y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void merge_sort(int arr[], int len) &#123;</span><br><span class=\"line\">    int *a = arr;</span><br><span class=\"line\">    int *b = (int *) malloc(len * sizeof(int));</span><br><span class=\"line\">    int seg, start;</span><br><span class=\"line\">    for (seg = 1; seg &lt; len; seg += seg) &#123;</span><br><span class=\"line\">        for (start = 0; start &lt; len; start += seg * 2) &#123;</span><br><span class=\"line\">            int low = start, mid = min(start + seg, len), high = min(start + seg * 2, len);</span><br><span class=\"line\">            int k = low;</span><br><span class=\"line\">            int start1 = low, end1 = mid;</span><br><span class=\"line\">            int start2 = mid, end2 = high;</span><br><span class=\"line\">            while (start1 &lt; end1 &amp;&amp; start2 &lt; end2)</span><br><span class=\"line\">                b[k++] = a[start1] &lt; a[start2] ? a[start1++] : a[start2++];</span><br><span class=\"line\">            while (start1 &lt; end1)</span><br><span class=\"line\">                b[k++] = a[start1++];</span><br><span class=\"line\">            while (start2 &lt; end2)</span><br><span class=\"line\">                b[k++] = a[start2++];</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">        int *temp = a;</span><br><span class=\"line\">        a = b;</span><br><span class=\"line\">        b = temp;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if (a != arr) &#123;</span><br><span class=\"line\">        int i;</span><br><span class=\"line\">        for (i = 0; i &lt; len; i++)</span><br><span class=\"line\">            b[i] = a[i];</span><br><span class=\"line\">        b = a;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    free(b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>递归版：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void merge_sort_recursive(int arr[], int reg[], int start, int end) &#123;</span><br><span class=\"line\">    if (start &gt;= end)</span><br><span class=\"line\">        return;</span><br><span class=\"line\">    int len = end - start, mid = (len &gt;&gt; 1) + start;</span><br><span class=\"line\">    int start1 = start, end1 = mid;</span><br><span class=\"line\">    int start2 = mid + 1, end2 = end;</span><br><span class=\"line\">    merge_sort_recursive(arr, reg, start1, end1);</span><br><span class=\"line\">    merge_sort_recursive(arr, reg, start2, end2);</span><br><span class=\"line\">    int k = start;</span><br><span class=\"line\">    while (start1 &lt;= end1 &amp;&amp; start2 &lt;= end2)</span><br><span class=\"line\">        reg[k++] = arr[start1] &lt; arr[start2] ? arr[start1++] : arr[start2++];</span><br><span class=\"line\">    while (start1 &lt;= end1)</span><br><span class=\"line\">        reg[k++] = arr[start1++];</span><br><span class=\"line\">    while (start2 &lt;= end2)</span><br><span class=\"line\">        reg[k++] = arr[start2++];</span><br><span class=\"line\">    for (k = start; k &lt;= end; k++)</span><br><span class=\"line\">        arr[k] = reg[k];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void merge_sort(int arr[], const int len) &#123;</span><br><span class=\"line\">    int reg[len];</span><br><span class=\"line\">    merge_sort_recursive(arr, reg, 0, len - 1);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"快速排序\"><a href=\"#快速排序\" class=\"headerlink\" title=\"快速排序\"></a>快速排序</h2><blockquote>\n<p>时间复杂度O(nlogn),不稳定的排序方法，最坏情况O(n^2)</p>\n</blockquote>\n<p>从数列中挑出一个元素，称为 “基准”（pivot）；<br>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区退出之后，该基准就处于数列的中间位置。这个称为分区（partition）操作；<br>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</p>\n<h2 id=\"堆排序\"><a href=\"#堆排序\" class=\"headerlink\" title=\"堆排序\"></a>堆排序</h2><blockquote>\n<p>时间复杂度O(nlogn);不稳定的排序方法，</p>\n</blockquote>\n<p>将初始待排序关键字序列(R1,R2….Rn)构建成大顶堆，此堆为初始的无序区；<br>将堆顶元素R[1]与最后一个元素R[n]交换，此时得到新的无序区(R1,R2,……Rn-1)和新的有序区(Rn),且满足R[1,2…n-1]&lt;=R[n]；<br>由于交换后新的堆顶R[1]可能违反堆的性质，因此需要对当前无序区(R1,R2,……Rn-1)调整为新堆，然后再次将R[1]与无序区最后一个元素交换，得到新的无序区(R1,R2….Rn-2)和新的有序区(Rn-1,Rn)。不断重复此过程直到有序区的元素个数为n-1，则整个排序过程完成。</p>\n<h2 id=\"基数排序\"><a href=\"#基数排序\" class=\"headerlink\" title=\"基数排序\"></a>基数排序</h2><blockquote>\n<p>时间复杂度O(d(n+rd));稳定的排序方法，适用于n值较大而关键词较小的序列</p>\n</blockquote>\n","categories":["study"],"tags":[]},{"title":"计算机网络","url":"http://www.baidu.com/2020/12/22/network_engineer/","content":"<h1 id=\"计算机网络基础\"><a href=\"#计算机网络基础\" class=\"headerlink\" title=\"计算机网络基础\"></a>计算机网络基础</h1><h2 id=\"进制转换\"><a href=\"#进制转换\" class=\"headerlink\" title=\"进制转换\"></a>进制转换</h2><p>十进制：89D；<br>八进制：89O；<br>十六进制：89H；</p>\n<blockquote>\n<p>二进制数1101.01转化成十进制<br><code>1101.01（2）=1*2^0+0*2^1+1*2^2+1*2^3 +0*2^(-1)+1*2^(-2)=1+0+4+8+0+0.25=13.25（10）</code></p>\n</blockquote>\n<ul>\n<li>十进制整数转换为二进制整数采用”除2取余，逆序排列”法。具体做法是：用2整除十进制整数，可以得到一个商和余数；再用2去除商，又会得到一个商和余数，如此进行，直到商为小于1时为止，然后把先得到的余数作为二进制数的低位有效位，后得到的余数作为二进制数的高位有效位，依次排列起来。</li>\n</ul>\n<ul>\n<li><p>十进制小数转换成二进制小数采用”乘2取整，顺序排列”法。具体做法是：用2乘十进制小数，可以得到积，将积的整数部分取出，再用2乘余下的小数部分，又得到一个积，再将积的整数部分取出，如此进行，直到积中的小数部分为零，此时0或1为二进制的最后一位。或者达到所要求的精度为止。</p>\n</li>\n<li><p>整数二进制转八进制：从右往左每三位二进制转1位八进制，不足三位在左边补零；反之八进制转二进制，每一位八进制转换为三位二进制</p>\n</li>\n<li><p>整数二进制转十六进制:从右往左每四位二进制转1位十六进制，不足四位在左边补零；反之十六进制转二进制，每一位十六进制转换为四位二进制</p>\n<blockquote>\n<p>[0~9,a-f]</p>\n</blockquote>\n</li>\n</ul>\n<p>最高位为符号位：1表示负数，0表示正数<br>反码：正数原码反码一样，负数符号位不变，其他取反<br>补码：正数原码补码一样，负数在反码的基础上加1，由补码求原码则是先取反再加1  </p>\n<blockquote>\n<p>计算机中一般采用补码进行存储，因为补码和移码的0是唯一，补码可以直接带符号运算而不出现错误</p>\n</blockquote>\n<p>取值范围：<br>原码：-[2^(n-1)-1]~2^(n-1)-1<br>反码：-[2^(n-1)-1]~2^(n-1)-1<br>补码：-2^(n-1)~2^(n-1)-1</p>\n<h3 id=\"逻辑运算\"><a href=\"#逻辑运算\" class=\"headerlink\" title=\"逻辑运算\"></a>逻辑运算</h3><ul>\n<li>或：有1则为1</li>\n<li>与：全1才为1</li>\n<li>非：取反</li>\n<li>异或：不相同才为1</li>\n</ul>\n<h3 id=\"计算机结构\"><a href=\"#计算机结构\" class=\"headerlink\" title=\"计算机结构\"></a>计算机结构</h3><ul>\n<li><p>总线：数据总线，地址总线，控制总线；</p>\n</li>\n<li><p>主机：</p>\n<ol>\n<li>主存储器</li>\n<li>cpu<ul>\n<li>运算器<ol>\n<li>算术逻辑单元ALU</li>\n<li>累加寄存器AC:暂存计算结果</li>\n<li>数据缓冲寄存器</li>\n<li>状态条件寄存器</li>\n</ol>\n</li>\n<li>控制器<ol>\n<li>程序计数器PC:储存指令地址</li>\n<li>指令寄存器IR</li>\n<li>指令译码器</li>\n<li>时序部件</li>\n</ol>\n</li>\n</ul>\n</li>\n</ol>\n</li>\n<li><p>寻址方式：<br>一条指令包括操作码和地址码</p>\n</li>\n</ul>\n<ol>\n<li>立即寻址</li>\n<li>内存寻址<ul>\n<li>变址寻址</li>\n<li>直接寻址</li>\n<li>间接寻址</li>\n</ul>\n</li>\n<li>寄存器寻址与寄存器间接寻址</li>\n</ol>\n<ul>\n<li>CISC(复杂)与RISC(精简)</li>\n</ul>\n<ul>\n<li>CISC:</li>\n<li>RISC:统一指令编码、泛用的寄存器、单纯的寻址方式、寻址方式少、硬件中支持少数资料类型。指令长度固定、指令种类尽可能少。增加寄存器数目减少访存次数。</li>\n</ul>\n<ul>\n<li>流水线：</li>\n</ul>\n<p>取址-》分析-》执行<br>流水线执行时间计算公式：<code>(t1+t2+t3)+(n-1)t1</code><br>(t1+t2+t3)为一条指令顺序执行时间即取址、分析、执行的时间之和。t1为三个步骤中执行时间最长的一段<br>吞吐率：指令条数/流水线执行时间<br>加速比：不使用流水线的时间/使用流水线的执行时间</p>\n<h3 id=\"存储容量单位\"><a href=\"#存储容量单位\" class=\"headerlink\" title=\"存储容量单位\"></a>存储容量单位</h3><p>主存(内存):RAM随机存储器，掉电丢失；ROM只读存储器，掉电不丢失；<br>缓存cache：缓和寄存器与内存间的速率矛盾；<br>Cache是一个高速小容量的临时储存器，其容量远远小于内存，cpu先访问Cache再访问内存，如果数据在cache中为命中，在内存中为不命中，</p>\n<blockquote>\n<p>Cache的访问命中率为h，Cache访问周期为t1，主存器访问时间为t2；整个系统的平均访存时间为<code>h* t1+(1-h)*t2</code></p>\n</blockquote>\n<p>地址范围：末地址-首地址+1</p>\n<blockquote>\n<p>注意：二进制10-1=1</p>\n</blockquote>\n<p>位：bit<br>字节：1B=8bit<br>字：通常为字节的整数倍</p>\n<p>1K=2^10b<br>1M=2^10K<br>1G=2^10M</p>\n<p>磁盘容量/物理块大小=物理块个数<br>物理块个数/字长（一个字需要的物理块=位示图大小需要的字<br>（物理块大小<em>系统字长</em>磁盘容量)/物理块=物理块大小*磁盘容量</p>\n<ul>\n<li>磁盘：<br>RAID技术:</li>\n</ul>\n<ol>\n<li>RAID0:将所有硬盘构成一个磁盘阵列。写入速度快，不具备备份和容错能力；可靠性最差;利用率为100%</li>\n<li>RAID1:磁盘镜像技术，将一个硬盘的内容同步备份到另一个硬盘；具备容错和备份能力；效率不高，可靠性好；利用率为50%</li>\n<li>RAID3:奇偶校验盘的分段技术；容错性好，可靠性高；单块硬盘失效时会出现I/O瓶颈。有一块磁盘用于存放校验数据所以利用率=（n-1）/n</li>\n<li>RAID5:分布式奇偶校验技术，校验值分布在各盘的不同位置；性能比RAID3好;利用率一样</li>\n<li>RAID6:带有两个独立分布式校验方案的独立数据磁盘；能实现两个磁盘掉线容错；磁盘利用率（n-2）/n</li>\n</ol>\n<p>DMA存取方式是一种完全有硬件执行I/O数据交换的工作方式，它即考虑到中断的响应，又要节约中断开销。此时，DMA控制器代替CPU完全接管对总线的控制，数据交换不经过CPU，直接在内存和外围设备之间进行数据交换</p>\n<ul>\n<li><p>进程管理<br>等待，就绪，运行</p>\n</li>\n<li><p>死锁：一个进程在等待一个不可能发生的事就会出现死锁<br>解决死锁：</p>\n</li>\n</ul>\n<ol>\n<li>预防死锁</li>\n<li>死锁避免<ul>\n<li>银行家算法</li>\n</ul>\n</li>\n<li>死锁检测</li>\n<li>死锁解除</li>\n</ol>\n<ul>\n<li><p>pv操作：<br>解决进程互斥同步问题<br>P操作：使s=s-1若s&gt;=0则进程继续执行，否则进入等待队列；<br>V操作：使s=s+1若s&lt;=0则唤醒等待队列中的一个进程</p>\n</li>\n<li><p>软件开发模型：<br>瀑布模型<br>v模型<br>喷泉模型<br>螺旋模型</p>\n<h3 id=\"网络按分布范围分类\"><a href=\"#网络按分布范围分类\" class=\"headerlink\" title=\"网络按分布范围分类\"></a>网络按分布范围分类</h3></li>\n</ul>\n<p>局域网(误码率最小)，城域网，广域网</p>\n<h3 id=\"网络按拓扑结构分类\"><a href=\"#网络按拓扑结构分类\" class=\"headerlink\" title=\"网络按拓扑结构分类\"></a>网络按拓扑结构分类</h3><p>总线型、星型、环型、树形、网状型、混合型</p>\n<h3 id=\"OSI七层模型\"><a href=\"#OSI七层模型\" class=\"headerlink\" title=\"OSI七层模型\"></a>OSI七层模型</h3><table>\n<thead>\n<tr>\n<th align=\"right\">osi层次</th>\n<th align=\"center\">封装单位</th>\n<th align=\"center\">地址标识</th>\n<th align=\"center\">功能</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"right\">物理层</td>\n<td align=\"center\">比特流</td>\n<td align=\"center\">Bit</td>\n<td align=\"center\">定义物理设备接口链路标准,用于建立、维护、拆除物理链路链接，确保原始数据在物理媒介上的传输</td>\n</tr>\n<tr>\n<td align=\"right\">数据链路层</td>\n<td align=\"center\">数据帧</td>\n<td align=\"center\">MAC地址</td>\n<td align=\"center\">在物理层提供的比特流的服务上，建立相邻结点间的数据链路，通过差错控制提供数据帧在信道上的无差错的传输，功能有物理寻址，比特流封装成帧，帧同步，差错、流量控制</td>\n</tr>\n<tr>\n<td align=\"right\">网络层</td>\n<td align=\"center\">数据包，分组</td>\n<td align=\"center\">IP地址</td>\n<td align=\"center\">基于IP地址进行不同网络间的路径选择，网络寻址</td>\n</tr>\n<tr>\n<td align=\"right\">传输层</td>\n<td align=\"center\">数据段</td>\n<td align=\"center\">端口号</td>\n<td align=\"center\">定义了传输数据的协议与端口，提供端与端可靠的数据传输，分段与重组</td>\n</tr>\n<tr>\n<td align=\"right\">会话层</td>\n<td align=\"center\">应用进程</td>\n<td align=\"center\">进程号</td>\n<td align=\"center\">会话的连接与释放,同步</td>\n</tr>\n<tr>\n<td align=\"right\">表示层</td>\n<td align=\"center\">应用进程</td>\n<td align=\"center\">进程号</td>\n<td align=\"center\">数据解释，数据加密，数据压缩</td>\n</tr>\n<tr>\n<td align=\"right\">应用层</td>\n<td align=\"center\">应用进程</td>\n<td align=\"center\">进程号</td>\n<td align=\"center\">用户应用程序的协议</td>\n</tr>\n</tbody></table>\n<p>OSI网络管理标准中的5大功能：配置管理、故障管理、性能管理、安全管理、计费管理；</p>\n<h3 id=\"tcp-ip四层模型\"><a href=\"#tcp-ip四层模型\" class=\"headerlink\" title=\"tcp/ip四层模型\"></a>tcp/ip四层模型</h3><table>\n<thead>\n<tr>\n<th>层</th>\n<th>常见协议</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>网络接口层(物理层和数据链路层)</td>\n<td>以太网、令牌环、帧中继、ATM</td>\n</tr>\n<tr>\n<td>网络层</td>\n<td>IP、ICMP、IGMP、ARP、RARP</td>\n</tr>\n<tr>\n<td>传输层</td>\n<td>tcp udp</td>\n</tr>\n<tr>\n<td>应用层</td>\n<td>tcp:pop3(110)、ftp(20、21)、http(80)、HTTPS(443)、telent(23)、SMTP。udp：DHCP、DNS(53)、SNMP(161、162)、TFTP(69)。共用：NFS、Samba等。</td>\n</tr>\n</tbody></table>\n<p><strong>数据的封装：</strong></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>上层数据</td>\n<td>应用层</td>\n<td>HTTP FTP TFTP SMTP SNMP DNS</td>\n</tr>\n<tr>\n<td>tcp头部+上层数据</td>\n<td>传输层</td>\n<td>TPC UDP</td>\n</tr>\n<tr>\n<td>ip头部+tcp头部+上层数据</td>\n<td>网络层</td>\n<td>ICMP iGMP IP ARP RARP</td>\n</tr>\n<tr>\n<td>MAC头部+ip头部+tcp头部+上层数据</td>\n<td>数据链路层</td>\n<td>由底层网络定义协议</td>\n</tr>\n<tr>\n<td>二进制数据</td>\n<td>物理层</td>\n<td>由底层网络定义的协议</td>\n</tr>\n</tbody></table>\n<h4 id=\"OSI模型服务访问点\"><a href=\"#OSI模型服务访问点\" class=\"headerlink\" title=\"OSI模型服务访问点\"></a>OSI模型服务访问点</h4><ul>\n<li>垂直方向：</li>\n</ul>\n<hr>\n<blockquote>\n<p>服务用户：  第n+1层 实体（n+1）</p>\n</blockquote>\n<hr>\n<blockquote>\n<p>服务提供者：第n层  实体（n）</p>\n</blockquote>\n<hr>\n<ul>\n<li>常见访问点SAP:</li>\n</ul>\n<ol>\n<li>数据链路层：LLC地址</li>\n<li>网络层：IP地址</li>\n<li>传输层：端口号</li>\n</ol>\n<h2 id=\"物理层\"><a href=\"#物理层\" class=\"headerlink\" title=\"物理层\"></a>物理层</h2><h3 id=\"时延\"><a href=\"#时延\" class=\"headerlink\" title=\"时延\"></a>时延</h3><ol>\n<li>发送时延=数据帧长度(bit)/发送速率(bit/s)</li>\n<li>传播时延=信道长度(m)/电磁波在信道上的传播速率(m/s)；电磁波的传输速率为光速；铜线为2.3<em>10^8m/s；光纤/电缆为2</em>10^8m/s;卫星信号的传播延迟为270ms。</li>\n<li>处理时延</li>\n<li>排队时延</li>\n</ol>\n<h3 id=\"传输介质\"><a href=\"#传输介质\" class=\"headerlink\" title=\"传输介质\"></a>传输介质</h3><ol>\n<li>双绞线：屏蔽双绞线（stp）非屏蔽双绞线（utp）；<br>双绞线线序：T568A,T6568B;<br>双绞线两端使用相同标准称为直通线，否则称为交叉线； </li>\n</ol>\n<table>\n<thead>\n<tr>\n<th>设备互联</th>\n<th>线缆种类</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>计算机–计算机</td>\n<td>交叉线</td>\n</tr>\n<tr>\n<td>计算机–交换机</td>\n<td>直通线</td>\n</tr>\n<tr>\n<td>计算机–路由器</td>\n<td>交叉线</td>\n</tr>\n<tr>\n<td>交换机–交换机</td>\n<td>交叉线</td>\n</tr>\n<tr>\n<td>交换机–路由器</td>\n<td>直通线</td>\n</tr>\n<tr>\n<td>路由器–路由器</td>\n<td>交叉线</td>\n</tr>\n</tbody></table>\n<ol start=\"2\">\n<li>同轴电缆<br>有很好的抗干扰性，常用于高数据传输；单工通信：无线广播</li>\n<li>光纤</li>\n</ol>\n<p>单模单纤: 激光二极管LED做光源;传播距离远，数据传输速率高，信号衰减小；造价高<br>多模光纤：发光二极管LED做为光源;反之  </p>\n<h4 id=\"信道\"><a href=\"#信道\" class=\"headerlink\" title=\"信道\"></a>信道</h4><ul>\n<li><p>信道带宽W:模拟信道<code>W=f2-f1</code>（f2、f1分别表示信道能通过的最高|最低频率，单位为hz）</p>\n</li>\n<li><p>码元：即一个数字脉冲</p>\n</li>\n<li><p>一个码元携带的信息量n与码元种类N的关系：<code>n=log(2)N</code></p>\n</li>\n<li><p>码元速率（波特率）B：单位时间内信道传输的码元个数，若码元宽度（脉冲周期）为T，则码元速率<code>B=1/T</code>,单位为波特Baud</p>\n</li>\n<li><p>无噪声影响：（尼奎斯特定理）信道带宽为W,最大码元速率为<code>B=2W</code>;数据极限传输速率为<code>R=Blog(2)N=2Wlog(2)N</code>其中N为码元种类数</p>\n</li>\n<li><p>噪声影响：(香农理论)信道的极限传输传输速率为：<code>C=Wlog(2)(1+S/N)</code>;W：带宽；S:信号平均功率；N:噪声平均功率；<br>由于信噪比S/N的比值通常太大，因此通常用分贝db来表示,分贝与信噪比的转换公式：db=10log(s/n);常见的：<code>db=30 =&gt; S/N=1000</code>;<code>log(2)1001=log(2)1024=10</code>;</p>\n</li>\n<li><p>信道复用：发送端复用器，接收端分用器；频分复用FDM、时分TDN、波分WDM、吗分CDM</p>\n</li>\n<li><p>调制与解调</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>数据种类</th>\n<th>模拟信道</th>\n<th>数字信道</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>模拟数据</td>\n<td>调幅AM、调频FM、调相PM、正交调相QAM</td>\n<td><em>PCM脉冲编码调制</em>：采样(奈奎斯特定理)、量化(如：量化128个信道=2^7==7bit)、编码</td>\n</tr>\n<tr>\n<td>数字数据</td>\n<td>调制：ASK(码元种类：2),FSK(码元种类：2),PSK(码元种类：2),DPSK(码元种类：2)、4DPSK(码元种类：4)、QPSK(码元种类：4)</td>\n<td>基本编码，应用型编码</td>\n</tr>\n</tbody></table>\n<ul>\n<li>E1:<br>E1载波有32个信道，30个用来传数据，2个不传，即控制率为<code>2/32*100%</code>,基本帧传送时间为125us;数据速率为2.048Mb/s,每个信道的速率是64Kb/s<br>E2信道由4个E1信道组成，数据速率为8.448Mb/s.</li>\n<li>T1：<br>T1载波控制位为24+1位，总帧长为<code>24*（7+1）=193</code>速率为1.544Mb/s<br>T2信道由4个T1信道组成，数据速率为6.312Mb/s<blockquote>\n<p>异步通信中，每个字符包含一位起始位、7位数据位、1位奇偶位、一位终止位，每秒传送100个字符，采用DPSK调制，则码元速率位1000波特，有效数据速率为700bps</p>\n</blockquote>\n</li>\n</ul>\n<p>采取pcm编码,信道的数据速率为<code>采样率*每次采样所占位数</code></p>\n<ul>\n<li>编码：</li>\n</ul>\n<ol>\n<li>不归零制：高电平为1，低电平为0；</li>\n<li>归零制：正脉冲为1，负脉冲为0；</li>\n<li>曼切斯特编码：在中心周期由高电平向低电平跳变为1，反之变为0；</li>\n<li>差分曼切斯特编码：边界处有跳变为0，没有为1；</li>\n</ol>\n<p>应用型编码：</p>\n<ol>\n<li>曼切斯特编码（常用于10M以太网）和差分曼特斯特编码（常用于令牌环网），编码效率只有50%</li>\n<li>8B/6B:100Base-T,</li>\n<li>4B/5B编码：常用于100base-x，编码效率为80%</li>\n<li>8B/10B编码：千兆以太网，编码效率为80%</li>\n</ol>\n<blockquote>\n<p>在采用曼斯特编码方式的数字通信中，传输一个比特需要发送2个码元，波特率是数据速率的2倍</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th>标准</th>\n<th>频段</th>\n<th>技术</th>\n<th>速率</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>802.11</td>\n<td>2.4GHz的ISM频段</td>\n<td>扩频通信技术</td>\n<td>1mbps</td>\n</tr>\n<tr>\n<td>802.11b</td>\n<td>2.4GHz的ISM频段</td>\n<td>CCK技术</td>\n<td>11mbps</td>\n</tr>\n<tr>\n<td>802.11a</td>\n<td>5GHz的U-NII频段</td>\n<td>OFDM调制技术</td>\n<td>54mbps</td>\n</tr>\n<tr>\n<td>802.11g</td>\n<td>2.4GHz的ISM频段</td>\n<td>OFDM调制技术</td>\n<td>54mbps</td>\n</tr>\n<tr>\n<td>802.11n</td>\n<td>2.4GHz和5GHz</td>\n<td>MIMO,OFDM</td>\n<td>600mbps</td>\n</tr>\n</tbody></table>\n<h3 id=\"接入技术\"><a href=\"#接入技术\" class=\"headerlink\" title=\"接入技术\"></a>接入技术</h3><ul>\n<li>常见接入网技术:SONET/SDH<br>SONET信号STS-1和OC-1的速率:51.840Mb/s<br>SONET信号STS-3、OC-3与SDH信号STM-1的速率:155.520Mb/s</li>\n</ul>\n<ol>\n<li>窄带（N-ISDN）用户利用2B+D数字用户线拨号上网</li>\n<li>xDSL：各种DSL数字用户线的总称，通过频分复用技术，利用电话线传输数字数据。<ul>\n<li>IDSL：数字用户线路，128kbps，对称模式</li>\n<li>HDSL:对称,上下行1.544Mb/s</li>\n<li>SDSL:对称,上下行2.3Mb/s</li>\n<li><em>ADSL：非对称用户数字线路，采用频分多路复用技术DMT，非对称模式。下行8Mbps，下640kbps-1Mbps</em></li>\n<li>VDSL：超高数据速率数字用户线路，非对称模式,上8Mb/s,下640kbps-1Mbps</li>\n</ul>\n</li>\n<li>局域网接入</li>\n<li>HFC光纤同轴混合网：电缆调制解调器:利用有线电视电缆</li>\n<li>FTTX:光纤接入技术:为了有效利用光纤资源，会在光纤干线与广大用户之间铺设一段管线转换器，即ODN光配线网，使得十几个用户共同享用一条光纤干线，无源的光配线网称为无源光网络：</li>\n</ol>\n<ul>\n<li> 无源光网络PON：<br>ODN光分配网络，没有有源电子设备，避免电磁干扰；下行采用TDM广播方式，上行采用TDMA时分多址接入方式</li>\n</ul>\n<p>PON三种类型：</p>\n<ol>\n<li>APON:以53字节固定长度的ATM信元方式传输</li>\n<li>EPON：基于以太网的PON技术，可变长度的分组进行</li>\n<li>GPON： 上下行传输不对称，兼容上面两种；</li>\n</ol>\n<h2 id=\"数据链路层\"><a href=\"#数据链路层\" class=\"headerlink\" title=\"数据链路层\"></a>数据链路层</h2><p>两种协议：ppp、CSMA/CD协议；<br>三个问题：封装成帧、透明传输、差错控制；<br>以太网MAC层的硬件地址；</p>\n<h4 id=\"封装成帧\"><a href=\"#封装成帧\" class=\"headerlink\" title=\"封装成帧\"></a>封装成帧</h4><ol>\n<li>把网络层交下来的IP数据报添加首部和尾部封装成帧；</li>\n<li>把封装好的数据帧发送给结点B的数据链路层；</li>\n<li>若结点B的数据链路层收到的帧无差错，则从帧中提取IP数据报交给网络层，否则丢弃该帧；</li>\n</ol>\n<p>帧的首部和尾部的作用是确定帧的界限即帧定界<br>为了提高帧的传输效率，应使帧的数据长度尽可能大于首部和尾部的长度。而规定数据部分长度的上限称为最大传送单元MTU；<br>帧定界可以使用特殊的帧定界符：帧开始SOH、帧结束EOT；</p>\n<ul>\n<li>MAC帧组成(最小64字节)：6B<code>目的地址</code>，6B<code>源地址</code>，2B<code>类型(上层协议类型)</code>，网络层的<code>数据</code>46~1500字节(不够时填充0保持最小帧长,46字节是最小帧长64字节减去首尾一共18字节而得的)，4B<code>FCS(CRC校验）</code>;即合法帧长为64~1518字节<blockquote>\n<p>规定最小帧长为64位，避免发送过程中检测不到冲突，若帧长不够则填充冗余字节到最小帧长</p>\n</blockquote>\n</li>\n</ul>\n<h4 id=\"透明传输\"><a href=\"#透明传输\" class=\"headerlink\" title=\"透明传输\"></a>透明传输</h4><p>数据链路层的透明传输指无论什么样的比特组合的数据，都能够按照原来没有差错的通过这个数据链路层；<br>避免非ASCII吗的的文本文件中的某个字节的二进制代码恰好和SOH、EOT这种控制字符一样；发送端会在数据部分的SOH、EOT、ESC等控制字符的前面插入一个转义字符“ESC”,接受端收到后会删除该字符在交给网络层，此方法称为字符填充</p>\n<h4 id=\"差错控制：\"><a href=\"#差错控制：\" class=\"headerlink\" title=\"差错控制：\"></a>差错控制：</h4><p>任意两个码字之间最少变化的二进制位数称为该数据编码的最小码距</p>\n<p>在一个码组内为了检测e个误码，最小码距应满足：<code>d&gt;=e+1</code>;<br>在一个码组内为了纠正t个误码，则最小码距应满足：<code>d&gt;=2t+1</code></p>\n<ul>\n<li><p>奇偶校验：<br>奇偶校验是最简单的错误检测码，是一个给定位数的二进制数中1的个数是奇数或偶数的二进制数。如果传输过程中包括校验位的奇数或者偶数个数据位发生改变，那么奇偶校验位将出错。奇偶检验位是一种检错码，但不能确定具体哪一位出错，所以无法纠正。<br>检错码=信息字段+校检字段；</p>\n<blockquote>\n<p>奇偶校验用的是模二加运算法则</p>\n</blockquote>\n<ol>\n<li>垂直奇偶校验（纵向奇偶校验）</li>\n<li>水平奇偶校验（横向奇偶校验）</li>\n</ol>\n</li>\n<li><p>海明校验：<br>海明码特点：<code>m+k+1&lt;=2^k</code> m为数据位数，k为冗余码个数，海明码存放的位置在2^n上，如：<code>4位冗余码==p1p2c1p3c2c3c4p4c5c6....</code>能纠错一位.</p>\n</li>\n<li><p>CRC校验<br>生成多项式的最高次幂为冗余码个数<br>如:P(x)=x^4+x^2+1;则冗余码为4个，即在发送的帧后面添加4个0；除数为10011；<br>模二运算法则,相同为0，不同为1</p>\n</li>\n</ul>\n<p>循环冗余检验一般不进行纠错，若数据出错则请求重传。</p>\n<h3 id=\"点对点协议PPP\"><a href=\"#点对点协议PPP\" class=\"headerlink\" title=\"点对点协议PPP\"></a>点对点协议PPP</h3><h3 id=\"CSMA-CD协议-载波监听多点接入-碰撞检测\"><a href=\"#CSMA-CD协议-载波监听多点接入-碰撞检测\" class=\"headerlink\" title=\"CSMA/CD协议:载波监听多点接入/碰撞检测\"></a>CSMA/CD协议:载波监听多点接入/碰撞检测</h3><p>使用CSMA/CD协议时，一个站不可能同时进行发送和接受，所以使用该协议的以太网只能进行半双工通信。</p>\n<ul>\n<li><p>载波监听过程</p>\n<ol>\n<li>非坚持型监听算法：空余时立即发送，忙时放弃监听，随机后退一段时间再监听(信道利用率低)</li>\n<li>1-坚持型监听算法：空时立即发送，忙时继续监听(减少发送延迟，发生冲突的概率大）</li>\n<li>P-坚持型监听算法：空时根据概率p决定是否发送，忙时继续监听（算法复杂）</li>\n</ol>\n</li>\n<li><p>冲突检测方法<br>边发边听:碰撞窗口（争用期）=2倍传播时延；<code>发送时延&gt;=2*传播时延</code>所以最短帧长计算：<code>发送时延&gt;=2*传播时延</code>;</p>\n</li>\n<li><p>发现冲突，停止发送</p>\n</li>\n<li><p>随机延迟重发<br>采用截断二进制指数退避算法：</p>\n<ol>\n<li>确定基本退避时间即2倍传播时延</li>\n<li>k=Min[重传次数,10],从集合[0,1,3,….,((2^k)-1)]中随机区一个数，乘于2倍传输时延，</li>\n<li>当重传16次仍不成功，则丢弃<blockquote>\n<p>第n次重传后再发生冲突的概率：<code>1/2^(n+1)</code></p>\n</blockquote>\n</li>\n</ol>\n</li>\n</ul>\n<h4 id=\"MAC地址-一般采用16进制表示\"><a href=\"#MAC地址-一般采用16进制表示\" class=\"headerlink\" title=\"MAC地址:一般采用16进制表示\"></a>MAC地址:一般采用16进制表示</h4><p>（硬件唯一标识地址）MAC地址： 48位；前24位为供应商标志；第8位I/G位为1表示组播地址,用于多播(一对多,广播为一对全体)，为0表示单播地址。后一半为网卡的唯一编码；</p>\n<h3 id=\"局域网\"><a href=\"#局域网\" class=\"headerlink\" title=\"局域网\"></a>局域网</h3><p>局域网分类：</p>\n<ul>\n<li>以太网</li>\n<li>令牌环网</li>\n<li>ATM网</li>\n<li>无线局域网</li>\n<li>FDDI网<h3 id=\"局域网设备\"><a href=\"#局域网设备\" class=\"headerlink\" title=\"局域网设备\"></a>局域网设备</h3></li>\n</ul>\n<ol>\n<li>集线器：物理层</li>\n<li>网桥：数据链路层；生成树网桥、源路由网桥；</li>\n<li>交换机：数据链路层；</li>\n<li>路由器：网络层</li>\n</ol>\n<blockquote>\n<p>网桥根据MAC帧的目的地址对帧进行转发和过滤<br>交换机根据以太网帧中的目的地址智能转发数据，只能分割冲突域,交换机分割冲突域，实现全双工通信，不使用CSMA/CD协议。交换机级联可在不同厂家的设备间使用，而堆叠只能在通厂家间的设备进行；路由器能分割冲突域和广播域，集线器啥都不能；</p>\n</blockquote>\n<p>交换机与路由器相关参数计算：<br>背板带宽=端口数<em>相应端口速率</em>2（全双工模式）<br>包转发率=千兆端口数量<em>1.488Mpps+百兆端口数量</em>0.1488MPPS+其余端口数*相应速率</p>\n<h3 id=\"无线局域网\"><a href=\"#无线局域网\" class=\"headerlink\" title=\"无线局域网\"></a>无线局域网</h3><table>\n<thead>\n<tr>\n<th>种类</th>\n<th>标准</th>\n<th>应用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>无线个人网WPAN</td>\n<td>IEEE802.15</td>\n<td>蓝牙</td>\n</tr>\n<tr>\n<td>无线局域网WLAN</td>\n<td>IEEE802.11</td>\n<td>企业</td>\n</tr>\n<tr>\n<td>无线城/广域网WMAN</td>\n<td>IEEE802.20&amp;&amp;蜂窝通信</td>\n<td>访问internet</td>\n</tr>\n</tbody></table>\n<p>无线局域网中的AP的轮询会锁定异步帧，在IEEE802.11网络中定义了无争用服务机制来解决这问题。</p>\n<ul>\n<li>加密<br>WEP：对称加密算法；<br>WPA:<br>WPA2:AES加密算法；</li>\n</ul>\n<h3 id=\"流量和差错控制\"><a href=\"#流量和差错控制\" class=\"headerlink\" title=\"流量和差错控制\"></a>流量和差错控制</h3><p>停等协议<br>滑动窗口协议<br>停等ARQ协议:应答帧大小为64B；<br>选择重发(SR)：其最大值就是最小帧编号总数的一半即<code>W发=W收&lt;=2^(k-1)</code><br>后退N帧(GBN):限制发送窗口的大小为<code>W&lt;=2^k-1</code>; 接收窗口=1</p>\n<h3 id=\"以太网标准\"><a href=\"#以太网标准\" class=\"headerlink\" title=\"以太网标准\"></a>以太网标准</h3><ol>\n<li><p>以太网：早期的局域网标准802.3，速率10Mbps。最小帧长64B，最大帧长1518B。10Basc-T：无屏蔽双绞线，曼切斯特编码，半双工模式</p>\n</li>\n<li><p>快速以太网：802.3u标准，速率100Mbps，最小帧长64B，最大帧长1518B。<br>100Base-T4:4对3类非屏蔽双绞线，最大长度100m，三对数据传输，一对冲突检测；8B/6T编码；半双工模式。<br>100Base-T2:2对3类UTP，100m<br>100Base_TX:2对5类非屏蔽双绞线，一对发，一对收，4B/5B与MLT-3编码，全双工模式。<br>100Base-FX:一对光纤，最大长度45m，一发一收，4B/5B编码；全双工</p>\n</li>\n<li><p>千兆以太网：速率1000Mbps，最小帧长512B,最大帧长1518B。<br>1000 Base-T:(802.3ab标准)非屏蔽双绞线，PAM5编码 100米。<br>1000 Base-X:全双工，半双工，多模光纤；8B/10B编码，</p>\n<ul>\n<li>1000 Base-CX:屏蔽双绞线，25m；802.3z标准，</li>\n<li>1000 Base-LX:单模光纤，3km；802.3z标准，</li>\n<li>1000 Base-SX:多模光纤，300m-500m；802.3z标准，</li>\n</ul>\n</li>\n<li><p>万兆以太网:只工作在<em>全双工模式</em>；802.3ae标准，最小帧长64B，最大1518B。64B/66B编码；光纤；</p>\n</li>\n</ol>\n<h3 id=\"VLAN\"><a href=\"#VLAN\" class=\"headerlink\" title=\"VLAN\"></a>VLAN</h3><p>基于802.1Q标准，每个交换机所有端口都处于广播域，交换机所有端口默认属于VLAN1。VLAN:把同一物理局域网内的不同用户，在逻辑上划分成不同的广播域。VLAN的取值范围为0-4095；</p>\n<ul>\n<li>access接口为数据打上VLAN id，用于交换机连接终端设备，只允许一个VLAN帧通过。</li>\n<li>trunk链路可以放行多个VLAN的流量，用于交换机之间连接。允许多个VLAN通过，除缺省VLAN外其它VLAN都带有标签通过trunk端口。</li>\n<li>hybrid端口：允许一个或多个VLAN的帧通过，可以选择是否带标签。</li>\n</ul>\n<blockquote>\n<p>VLAN静态划分的方式是按端口划分的。</p>\n</blockquote>\n<ul>\n<li>GARP通用属性注册协议<br>GVRP协议：VLAN注册协议<br> <em>交换机端口模式：</em><ol>\n<li>Normal模式：允许该端口动态注册或注销VLAN，传播动态或静态VLAN信息；</li>\n<li>Fixed模式：禁止该端口动态注册或注销VLAN，只传播静态VLAN信息；</li>\n<li>Forbidden模式：禁止该端口动态注册或注销VLAN，除VLAN1外，不传播任何VLAN信息；</li>\n</ol>\n</li>\n</ul>\n<hr>\n<p>VLAN trunk（vlan中继）指在交换机之间或交换机与路由器之间连接的情况下，在互相连接的端口上配置中继模式，使得属于不同vlan的数据帧都可以通过这条中继链路进行传输。</p>\n<ul>\n<li>VTP指VLAN中继协议,用于交换机设置VLAN。有三种工作模式：</li>\n</ul>\n<ol>\n<li>服务模式：可设置VLAN信息，服务器自动广播所以VLAN信息到其他交换机</li>\n<li>客户模式:不能配置VLAN信息，只能接受服务器的VLAN配置。</li>\n<li>透明模式：可以配置vlan信息，但不广播自己的vlan信息，接受服务器vlan配置信息后不使用，而是直接转发给其他交换机。</li>\n</ol>\n<p>交换机初始工作在透明模式下，这个模式下有一个默认的VLAN，所有的端口都属于这个VLAN<br>VTP修剪的作用是减掉不必要的trunk链路上的广播，以提升整个交换网的性能和带宽</p>\n<ul>\n<li><p>生成树协议：STP<br>删除交换机之间的网络环路，逻辑上断开环路，防止广播风暴的产生,增加了带宽，提高了网络的可靠性。</p>\n<ol>\n<li>选择根网桥：交换机之间选择网桥ID值最小的。网桥ID组成：网桥优先值2字节（取值范围0~65535，默认32768，越小优先级越高）+网桥mac地址6字节；</li>\n<li>选择根端口：从非跟网桥上选择，本端口到根网桥路径成本最低，带宽越小开销越小。网桥ID最小，端口ID最小。端口ID=端口优先级(默认128)+端口编号</li>\n<li>选择指定端口：根桥上的端口全是指定端口，所以还需要在非根网桥上选择指定端口，端口所在的网桥路径成本最低，网桥ID较小，端口ID较小。</li>\n</ol>\n</li>\n<li><p>快速生成树协议：RSTP</p>\n<ol>\n<li>rstp端口角色：根端口，指定端口，替代端口，备份端口；<br>替换端口是对根端口的备份，备份端口是指定端口的备份</li>\n<li>rstp端口状态：丢弃，学习，转发。<br>rstp快速收敛机制：</li>\n<li>边缘端口机制</li>\n<li>根端口快速切换机制</li>\n<li>指定端口快速切换机制</li>\n</ol>\n</li>\n<li><p>多生成树协议：MSTP<br>基于实例计算出多棵生成树</p>\n</li>\n</ul>\n<h4 id=\"以太网通道\"><a href=\"#以太网通道\" class=\"headerlink\" title=\"以太网通道\"></a>以太网通道</h4><p>多条链路负载均匀，提高带宽，容错率。<br>LACP链路聚合控制协议<br>PAGP端口聚合协议</p>\n<h3 id=\"广域网\"><a href=\"#广域网\" class=\"headerlink\" title=\"广域网\"></a>广域网</h3><ul>\n<li><p>交换方式：电路交换，报文交换、分组交换（虚电路、ATM、IP数据报）</p>\n</li>\n<li><p>广域网技术：</p>\n<ol>\n<li>HDLC:面向<em>比特</em>的高级数据链路控制协议，是思科私有协议;头尾8bit为01111110;</li>\n</ol>\n<blockquote>\n<p>HDLC中控制字段中第一，二位表示传送帧的类型：第一位为0表示信息帧（I帧），第一，二位为“10”是监控帧（S帧），S帧不带信息字段，“11”为无编号帧（U帧）。第三，四位S帧类型的编码“00”接受就绪（RR）；“01”拒绝（REJ）:用于要求发送方从编号为N开始的帧及其以后的所有的帧进行重传；“10”接收未就绪（RNR）:表示编号小于N的帧已被收到，但目前处于正忙状态，尚未准备好接受第N的帧；“11”选择拒绝（SREJ）:表示其他帧已接收但第N帧需要重发。</p>\n</blockquote>\n<ol start=\"2\">\n<li>PPP协议：点对点协议，面向<em>字符</em>；只检错，不纠错，没有流量控制。提供了一整套协议框架来解决链路建立配置、维护、拆除、上层协议协商和认证等问题；ppp验证方法：密码验证协议PAP、挑战式握手验证协议CHAP。<blockquote>\n<p>PPPoE为宽带上网的主机使用的链路层协议</p>\n</blockquote>\n</li>\n</ol>\n</li>\n<li><p>常见广域网协议：</p>\n<ol>\n<li>X.25:使用电话或ISDN设备作为网络硬件设备来构架广域网，建立虚电路，实现可靠交付；</li>\n<li>帧中继：第二层建立虚拟电路，只检错，不重传，没有流量控制，但有拥塞控制，把复杂的检错交个高层处理；</li>\n<li>ATM异步传输网络：面向连接，将数据分割成固定长度的信元.(采用固定53字节来进行帧分割，称为信元)。采用统计时分复用TDM技术。使用虚电路的虚通路VPI和虚信道VCI作为链路标识.数据速率为155Mb/s</li>\n<li>IP数据报</li>\n</ol>\n</li>\n<li><p>流量控制：</p>\n<ol>\n<li>停等协议：</li>\n<li>滑动窗口协议：</li>\n<li>停等ARQ协议</li>\n<li>选择重发ARQ：其最大值小于帧编号总数的一半，即W发=W收&lt;=2^(k-1)</li>\n<li>后退N帧ARQ：限制发送窗口大小为W&lt;=(2^k)-1,(K为帧编号的位数）</li>\n</ol>\n</li>\n</ul>\n<h2 id=\"网络层\"><a href=\"#网络层\" class=\"headerlink\" title=\"网络层\"></a>网络层</h2><h4 id=\"IP网际协议\"><a href=\"#IP网际协议\" class=\"headerlink\" title=\"IP网际协议\"></a>IP网际协议</h4><p>IP地址组成：<code>网络号</code>+<code>主机号</code><br>组成：首部+数据部分；</p>\n<blockquote>\n<p>首部固定20字节,最多60字节，</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>版本4位（ipv4、ipv6）</td>\n<td>首部长度4位（二进制5-15）</td>\n<td>区分服务8位</td>\n<td>总长度16位(首部和数据)</td>\n<td></td>\n</tr>\n<tr>\n<td>标识16位(判断是否为同一个数据报)</td>\n<td></td>\n<td></td>\n<td>标志2位(MF=1表示后面还有分片，DF=0表示允许分片)</td>\n<td>片偏移14位(字节，从数据部分开始)</td>\n</tr>\n<tr>\n<td>生存时间8位(TTL没经过一个路由器就-1)</td>\n<td>协议8位(TCP、UDP)</td>\n<td></td>\n<td>首部校验和16位(只校验首部)</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>源地址32位</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td></td>\n<td>目的地址32位</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<h3 id=\"ipv4\"><a href=\"#ipv4\" class=\"headerlink\" title=\"ipv4\"></a>ipv4</h3><p>ipv4使用32位（四字节）地址。</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>范围</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>A类地址(0….)</td>\n<td>1.0.0.0-127.255.255.255</td>\n<td>可用网络号为2^7-1即126个，网络号全0为保留地址，指本网络，网络号127用于环回测试；可用主机号为2^24-2,主机号全0表示该IP地址为本主机所连接到的单个地址，主机号全1表示该网络上的所有主机</td>\n</tr>\n<tr>\n<td>B类(10…)</td>\n<td>128.0.0.0-191.255.255.255</td>\n<td>可用网络号为2^14-1,因为前两位固定为10，128.0.0.0保留，不可指派；主机号同理</td>\n</tr>\n<tr>\n<td>C类(110..)</td>\n<td>192.0.0.0-223.255.255.255</td>\n<td>前三位固定110，192.0.0.0不指派，即可用网络号为2^21-1</td>\n</tr>\n<tr>\n<td>D类(1110…)（组播）</td>\n<td>224.0.0.1-239.255.255.254</td>\n<td></td>\n</tr>\n<tr>\n<td>E类（保留）</td>\n<td>240.0.0.0-255.255.255.255</td>\n<td></td>\n</tr>\n<tr>\n<td>0.0.0.0-0.255.255.255</td>\n<td></td>\n<td></td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>私有地址–NAT–公有地址</p>\n</blockquote>\n<ul>\n<li>ipv4私有地址范围：</li>\n</ul>\n<p>A类中：10.0.0.0-10.255.255.255(网络号：10，网络数：1）</p>\n<p>B类：172.16.0.0-172.31.255.255(网络号：172.16~172.31，网络数：16）</p>\n<p>C类：192.168.0.0-192.168.255.255(网络号：192.168.0~192.168.255，网络数：256）</p>\n<ul>\n<li>特殊地址：</li>\n</ul>\n<p><code>0.0.0.0</code>:在本网络上的本主机，目的地址不可以使用，源地址可以使用</p>\n<p><code>127.0.0.1</code>:本地环回地址，用于本地测试</p>\n<p><code>255.255.255.255</code>：全网广播地址，源地址不可以使用，目的地址可以；</p>\n<p><code>169.254.0.0/16</code>：本地链接地址段</p>\n<p><code>169.254.x.x/16</code>:自动专用IP地址（APIPA）</p>\n<blockquote>\n<p>子网掩码是用来标识两个IP地址是否同属于一个子网。32位长的二进制数值；为1则代表该位是网络位；为0则表示该位是主机位；</p>\n</blockquote>\n<ul>\n<li>单播地址：</li>\n<li>组播地址：tcp/ip协议使用的以太网多播地址块范围为224.0.0.0-239.255.255.255；组播地址只能用于目的地址，不能用于源地址</li>\n<li>广播地址：</li>\n</ul>\n<h3 id=\"ipv6\"><a href=\"#ipv6\" class=\"headerlink\" title=\"ipv6\"></a>ipv6</h3><ul>\n<li><p>优点：<br>更大的地址空间:128位地址<br>更灵活的首部格式等</p>\n</li>\n<li><p>地址表示：16进制</p>\n<ul>\n<li>删除一个或多个前导零，零连续部分用双冒号表示，但只能使用一次</li>\n<li>每个设备在启用ipv6时会自动配置一个链路本地地址：<code>FE80::110</code>,其用于邻居发现，因为ipv6中没有了广播，ARP协议不能用。链路本地地址以<code>FE80</code>开头，路由器不会转发链路本地地址</li>\n<li>环路地址：<code>::1</code></li>\n<li>多播地址：<code>FF00::</code></li>\n</ul>\n</li>\n<li><p>ipv6地址类型：</p>\n<ul>\n<li>单播：48位全球路由选择器前缀+16位子网标识符+64位接口标识符（mac地址）</li>\n<li>多播：组播地址在ipv6包中不能用作源地址。</li>\n<li>任播：用来标识一组网络接口，路由器会将目标地址是任播地址的数据包发给距本路由最近的一个网络接口；</li>\n</ul>\n</li>\n<li><p>ipv6特殊地址</p>\n<ol>\n<li>与ipv4兼容地址：0:0:0:0:0:0:w.x.y.z</li>\n<li>ipv4映射地址：0:0:0:0:0:FFFF:w.x.y.z</li>\n</ol>\n</li>\n<li><p>ipv6协议过渡方案：<br>双协议栈，隧道技术，网络地址转换技术；</p>\n</li>\n</ul>\n<h4 id=\"子网划分-可变长子网掩码-VLSM\"><a href=\"#子网划分-可变长子网掩码-VLSM\" class=\"headerlink\" title=\"子网划分:可变长子网掩码(VLSM)\"></a>子网划分:可变长子网掩码(VLSM)</h4><p><em>子网划分：使两级ip地址变成三级ip地址；只是把主机号这部分进行再划分，增加了灵活性，减少了主机总数</em><br>IP地址={《网络号》，《子网号》，《主机号》}</p>\n<blockquote>\n<p>进行子网划分后，路由器提取数据报首部提取IP地址与子网掩码相与（一一为一）；</p>\n</blockquote>\n<ul>\n<li>无分类编址CIDR记法：<br>消除了传统A、B、C类网络以及子网划分的概念：IP地址={《网络前缀》，《主机号》}<blockquote>\n<p>如192.168.1.0/26，其网络位是26位，主机位为6位，主机全为0是网络ID,不是有效主机地址；主机位全为1为此网络ID的广播地址；有效主机IP数量为2^m-2;</p>\n</blockquote>\n</li>\n</ul>\n<ul>\n<li>路由汇聚：选择网络地址相同的位进行汇聚，不同的位划分至主机位，从而实现将多个网段汇聚成一个新的超网网段。<br>最佳路由匹配原则：查找路由表时应当选择具有最长前缀的路由，网络的前缀越长，其地址块越小。</li>\n</ul>\n<blockquote>\n<p>使用路由汇聚时，路由表中的每个项目由‘网络前缀’和‘下一条地址’组成，因此查找路由表时可能会得到不止一个匹配结果，此时应当选择具有最长网络前缀的路由，因为网络前缀越长，其地址块越小，因而路由就越具体。</p>\n</blockquote>\n<p>路由汇聚是把小网段中网络位一模一样的位数全部保留，网络位不一样的全部变成主机位；汇聚后主机位有32-n位；其中有效地址个数为2的n次方减2。</p>\n<p>汇聚地址块120.64.4.0/22的ip地址范围为120.64.4.0/22-120.64.7.255/22其中120.64.6.0/22为汇聚网络ID，120.64.7.255/22为广播地址</p>\n<h3 id=\"网际控制报文协议ICMP\"><a href=\"#网际控制报文协议ICMP\" class=\"headerlink\" title=\"网际控制报文协议ICMP\"></a>网际控制报文协议ICMP</h3><blockquote>\n<p>封装在IP数据报中，作为数据部分</p>\n</blockquote>\n<ul>\n<li>ICMP差错报告报文：<ul>\n<li>终点不可达</li>\n<li>时间超过</li>\n<li>参数问题</li>\n<li>改变路由</li>\n</ul>\n</li>\n<li>ICMP询问报文：<ul>\n<li>回送请求与问答</li>\n<li>时间戳请求与问答</li>\n</ul>\n</li>\n</ul>\n<ol>\n<li>对ICMP差错报告报文不再发送ICMP差错报告报文</li>\n<li>对特殊地址0.0.0.0或127.0.0.0等的数据报不发送ICMP差错报告报文</li>\n<li>对具有多播地址的数据报不发送</li>\n<li>对第一个分片的数据报片的所有后续数据报片都不发送</li>\n</ol>\n<ul>\n<li>应用：<ul>\n<li>ping命令</li>\n<li>traceroute、tracert命令</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"IGMP-网际组管理协议\"><a href=\"#IGMP-网际组管理协议\" class=\"headerlink\" title=\"IGMP:网际组管理协议\"></a>IGMP:网际组管理协议</h3><p>IP多播需要使用网际组管理协议IGMP和多播路由选择协议</p>\n<h3 id=\"ARP地址解析协议\"><a href=\"#ARP地址解析协议\" class=\"headerlink\" title=\"ARP地址解析协议\"></a>ARP地址解析协议</h3><p>ARP位于OSI模型的网络层。ARP从已知的IP地址中找到主机的硬件地址。一台设备将数据报发送到另一台设备之前，它会查看其ARP缓存以查看目标设备是否存在MAC地址和相应的IP地址。如果没有，源设备将发送广播地址给网络中的每一台设备，每个设备都将自己的IP地址与其进行比较，只有具有匹配IP地址的设备才会回复包含该设备MAC地址的数据包，然后源设备会添加目标设备MAC地址放入到ARP表以供参考。</p>\n<blockquote>\n<p>ARP协议数据封装在以太帧中进行传输，ICMP协议数据封装在IP数据包中，RIP封装在UDP报中。</p>\n</blockquote>\n<h3 id=\"路由协议\"><a href=\"#路由协议\" class=\"headerlink\" title=\"路由协议\"></a>路由协议</h3><blockquote>\n<p>互联网太过于庞大，因此划分为许多较小的自治系统AS。</p>\n</blockquote>\n<ul>\n<li>静态路由协议</li>\n</ul>\n<p>配置形式：目标网络+对应掩码+下一跳地址（本地出接口）<br>动态路由协议</p>\n<ul>\n<li><p>RIP路由协议：距离矢量路由协议。基于UDP的520端口发送信息；路由协议优先级为100；经过节点最多不能超过15跳，经16跳的任何分组都将被路由器丢弃；只会和邻居路由器交换路由表信息；路由器更新周期为30s.每次路由更新最多承载25调路由；解决路由环路的方法:水平分割；毒性反转；触发更新；抑制计时器。</p>\n</li>\n<li><p>距离向量算法：</p>\n<ol>\n<li>收到邻居路由表时，邻居路由表跳数全部+1，下一跳路由器为它自己。</li>\n<li>与自己路由表比较，目的地址下一跳为它的，则更新跳数，不论多少。</li>\n<li>目的地址下一跳不是它的，则比较跳数,谁短要谁。</li>\n<li>条目没有的则直接添加</li>\n</ol>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>RIPv1</th>\n<th>RIPv2</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有无路由协议</td>\n<td>有</td>\n<td>无</td>\n</tr>\n<tr>\n<td>是否支持可变子网掩码VLSM与CIDR</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>是否支持认证</td>\n<td>否</td>\n<td>是</td>\n</tr>\n<tr>\n<td>更新类型</td>\n<td>广播</td>\n<td>组网</td>\n</tr>\n</tbody></table>\n<ul>\n<li>OSPF路由协议: </li>\n</ul>\n<p>链路状态路由器协议；OSPF报文封装在IP层，协议号为89作为标识，优先级为10。OSPF路由器所发的信息是与本路由相邻的所有路由器的链路状态。每个路由器都存在有全网的链路状态信息。当链路发生变化时才用泛洪法发送LSU分组更新路由链路信息。通过244.0.0.5与244.0.0.6发送hello报文(LSA分组)确定邻居路由是否连通（默认10s）。OSPF采用Dijkstra算法计算最佳路径.</p>\n<p>ospf将自治系统划分为多个区域，每个区域被指定了一个32位的区域标识符，可用点分十进制表示，如0.0.0.0。单域ospf网络只有主干区域网络（配置成区域0）。OSPF的区域分为五种：<br>1.标准区域：可接受任何链路更新信息和路由汇总信息<br>2.主干区域：其他区域都通过主干区域交换路由信息。主干区域拥有标准区域的所有性质<br>3.存根区域：不接受本地自治系统以外的路由信息，对自治系统以外的区域的目标采用默认路由0.0.0.0</p>\n<p>OSPF协议相对于RIP的优势：没有跳数的限制，支持可变长子网掩码。支持网络规模大，收敛速度快。不过RIP2也支持可变长子网掩码（VLSM）</p>\n<ul>\n<li>OSPF定义了4种网络：</li>\n</ul>\n<ol>\n<li>广播多址网络：具有共享介质的局域网(以太网Ethernet、 Token Ring、FDDI)</li>\n<li>非广播多址网络：通过组播的方式传播信息(X.25、Frame Relay、SMDS；)</li>\n<li>点到点网络：点到点可字节交换路由信息(PPP、HDLC、)</li>\n<li>点到多网络：把非广播网络当作多条点对点网络来使用，从而把一条路由信息发送到不同目标(RARP)</li>\n</ol>\n<ol start=\"3\">\n<li>BGP路由协议；边界网关协议。采用路径向量路由协议，寻找较好的路由。适用于自治域（AS）间的路由。通过TCP，179端口建立关系；封装在tcp报文中。防环机制：EBGP=&gt;通过AS-Path属性防环；IBGP=&gt;;</li>\n</ol>\n<h2 id=\"传输层\"><a href=\"#传输层\" class=\"headerlink\" title=\"传输层\"></a>传输层</h2><h3 id=\"UDP协议\"><a href=\"#UDP协议\" class=\"headerlink\" title=\"UDP协议\"></a>UDP协议</h3><p>特点：无连接，尽最大努力交付，面向报文，首部开销小（8字节），支持1对多,没有拥塞控制，</p>\n<p><em>首部（源端口2字节，目的端口2字节，长度2字节(数据长度)，校验和2字节）+数据</em></p>\n<p>UDP检验，添加伪首部，变成二进制，相加后取反放入校验和。</p>\n<h3 id=\"TCP\"><a href=\"#TCP\" class=\"headerlink\" title=\"TCP\"></a>TCP</h3><p>特点：面向连接，每一条连接只有两个端点，可靠交付，全双工通信，面向字节流</p>\n<ul>\n<li><p>TCP连接的端点叫套接字：socket=（IP地址：端口号）<br>TCP连接={socket1，socket2}</p>\n</li>\n<li><p>可靠传输：</p>\n<ul>\n<li>停止等待协议：发送一个分组停止发送，等待对方确认后再发送下一个分组。</li>\n<li>连续ARQ协议（滑动窗口）(后退N帧)：同时发送多个分组，每收到一个确认就把发送窗口移动一个分组。接收方收到多个分组，会对按序到达的最后一个分组发送确认表示前面的分组已经正确收到。缺点：当中间分组丢失时，会抛弃之后的分组，对前面的分组发送确认。发送方需要把之后的重新发送。</li>\n</ul>\n</li>\n<li><p>首部（最小20字节)+数据</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td></td>\n<td>源端口16位</td>\n<td>目的端口16位</td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>序号32位(一个字节流中每一个字节都按序编号)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td></td>\n<td>确认号32位(期待对方下一个报文段的第一个数据字节的序号)</td>\n<td></td>\n<td></td>\n</tr>\n<tr>\n<td>数据偏移4位(距离首部开头)</td>\n<td>保留4位</td>\n<td>2位:ACK（为1时确认号才有效）、URG（为1时，紧急指针才有效）、PSH（尽快交付给上层应用）、RST（TCP连接出现严重错误时重新建立连接）、SYN（建立连接时用来同步序号，置1表示连接请求）、FIN（置1表示释放连接）</td>\n<td>窗口16位(自己的窗口)</td>\n</tr>\n<tr>\n<td></td>\n<td>校验和16位</td>\n<td>紧急指针16位(紧急数据字节数、位置)</td>\n<td></td>\n</tr>\n</tbody></table>\n<p>三次握手，四次断开</p>\n<blockquote>\n<p>客户端收到服务器发送的释放连接报文后，必须对此发送确认。并且经过时间等待计时器（TIME-WAIT)设置的时间2MSL（最长报文段寿命）后，客户端才进入关闭状态。</p>\n</blockquote>\n<ul>\n<li><p>状态：</p>\n<ul>\n<li><code>LISTEN</code>:服务器等待连接 </li>\n<li><code>SYN_SENT</code>:客户端发起连接，</li>\n<li><code>SYN_RCVD</code>:服务器收到SYN包</li>\n<li><code>ESTABLISHED</code>:完成三次握手，可以开始传输数据</li>\n</ul>\n</li>\n<li><p>流量控制：可变窗口(单位位字节）</p>\n</li>\n<li><p>拥塞和控制：<br>判断网络拥塞的依据就是出现<em>超时</em></p>\n<ul>\n<li>慢开始，拥塞避免，<ol>\n<li>刚开始发送时设置初始拥塞窗口为1到2个发送方最大报文段（SMSS）</li>\n<li>慢开始：从0以指数增长</li>\n<li>拥塞避免：到达初始拥塞窗口则成线性增长</li>\n<li>网络拥塞即遇到超时，初始拥塞窗口设置为出现拥塞时的1/2</li>\n<li>从0进行慢开始</li>\n</ol>\n</li>\n<li>快重传，快恢复<ol>\n<li>快重传： 执行拥塞避免时一连收到3个同样的ack，则初始拥塞窗口设置为当前的1/2</li>\n<li>快恢复：从初始拥塞窗口开始，继续执行拥塞避免</li>\n</ol>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"传输层端口-16位\"><a href=\"#传输层端口-16位\" class=\"headerlink\" title=\"传输层端口(16位)\"></a>传输层端口(16位)</h3><ul>\n<li>熟知端口：0~1023<br><code>ftp</code>：数据20，控制21<br><code>tftp</code>:69<br><code>http</code>：80<br><code>https</code>：443<br><code>telnet</code>：23<br><code>SMTP</code>：25<br><code>pop3</code>:110<br><code>DNS</code>:53<br><code>DHCP</code>：服务端67，客户端68<br><code>SNMP</code>：udp协议；轮询161端口,发送请求和应答，陷阱162</li>\n<li>登记端口：1024~49151</li>\n<li>客户端端口：49152~65535</li>\n</ul>\n<h3 id=\"DNS域名系统\"><a href=\"#DNS域名系统\" class=\"headerlink\" title=\"DNS域名系统\"></a>DNS域名系统</h3><ul>\n<li>名称解析的方法：Host表、DNS系统</li>\n</ul>\n<p>DNS系统实现将域名和ip地址进行映射，提供解析的分布式数据库服务</p>\n<ul>\n<li><p>分类：<br>主域名服务器（权威域名服务器）<br>辅助域名服务器（从域名服务器）<br>转发域名服务器</p>\n</li>\n<li><p>解析过程：<br>本地解析，迭代解析，递归解析</p>\n</li>\n<li><p>资源记录：<br>SOA:定义该区域中的哪个名称服务器为主域名服务器（权威域名服务器）<br>NS:表示该区域中的所有域名服务器<br>A：列出域名到IP地址的映射<br>PTR：IP地址到域名的映射<br>MX：邮件交换器信息<br>CNAME：别名记录</p>\n</li>\n</ul>\n<h3 id=\"DHCP服务\"><a href=\"#DHCP服务\" class=\"headerlink\" title=\"DHCP服务\"></a>DHCP服务</h3><p>客户端（68）服务端（67）<br><code>Dhcpdiscover</code>：客户端ip租用请求<br><code>Dhcpoffer</code>:服务端分配ip<br><code>Dhcprequest</code>:客户端接受<br><code>Dhcpack</code>:服务端确认<br><code>Dhcpdecline</code>:客户端发现服务端分配的ip无法使用</p>\n<h3 id=\"服务质量QOS\"><a href=\"#服务质量QOS\" class=\"headerlink\" title=\"服务质量QOS\"></a>服务质量QOS</h3><p>用来解决网路延迟和阻塞问题的一种技术。用于区分流量，保证重要流量及时被转发</p>\n<ol>\n<li>尽力而为服务模型：先进先出</li>\n<li>综合服务模型：提前申请网络资源</li>\n<li>区分服务模型: 不预留资源，通过多种方式之指定报文的QOS</li>\n</ol>\n<h3 id=\"电子邮件服务\"><a href=\"#电子邮件服务\" class=\"headerlink\" title=\"电子邮件服务\"></a>电子邮件服务</h3><p>客户端：发送STMP-》STMP-》接收POP3<br>网页：http-》STMP-》http</p>\n<ul>\n<li><p>pops:电子邮件客户端上的操作不反馈到服务器上</p>\n</li>\n<li><p>IMAP：能同步到服务器上</p>\n</li>\n<li><p>MIME:多用途互联网邮件扩展，支持图片，视频，声音</p>\n</li>\n</ul>\n<h3 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h3><p>HTTP的URL的一般协议:<code>http://主机:端口/路径</code></p>\n<ol>\n<li>浏览器分析超链接指向页面的URL.</li>\n<li>浏览器向dns请求解析网址</li>\n<li>域名系统dns解析出网址的ip地址</li>\n<li>浏览器与服务器建立TCP连接</li>\n<li>浏览器发出取文件命令:GET/xx/index.htm</li>\n<li>服务器给出响应</li>\n<li>TCP连接释放</li>\n<li>浏览器显示页面</li>\n</ol>\n<h3 id=\"网络安全\"><a href=\"#网络安全\" class=\"headerlink\" title=\"网络安全\"></a>网络安全</h3><ol>\n<li>系统病毒：传染性，潜伏性，破坏性。前缀：win95</li>\n<li>网络蠕虫：不需要用户触发，基本模块：目标搜索模块，攻击模块；前缀worm</li>\n<li>木马：隐蔽性，木马本身不带有破坏性，服务端位于被攻击的主机上,用于夺取计算机控制权。前缀：Trojan</li>\n<li>后门：一般在黑客初次取得控制权后，留下后门便于下次入侵。前缀：Backdoor</li>\n<li>黑客：前缀：Hack</li>\n<li>宏病毒：只感染office。前缀：macro</li>\n<li>vb脚本病毒：浏览器，前缀：script</li>\n</ol>\n<h3 id=\"网络攻击\"><a href=\"#网络攻击\" class=\"headerlink\" title=\"网络攻击\"></a>网络攻击</h3><ol>\n<li>主动攻击：<ol>\n<li>拒绝服务攻击DOS：消耗资源，破坏配置如ping泛洪、缓冲区溢出、<br>ARP欺骗攻击：通过wireshark中的协议这栏，看到有大量ARP报文，说明可能遭遇ARP病毒的攻击。可通过<code>arp -s</code>设置静态储存表解决。</li>\n<li>分布式拒绝服务DDOs：控制一些计算机后，向攻击目标统一发起拒绝服务攻击（SYNFlooding)</li>\n<li>ping of Death攻击：通过ping发送的ICMP的echo请求消息</li>\n</ol>\n</li>\n<li>被动攻击：</li>\n</ol>\n<p>收集信息而不进行访问：嗅探、信息收集、端口扫描</p>\n<h3 id=\"网络安全设备\"><a href=\"#网络安全设备\" class=\"headerlink\" title=\"网络安全设备\"></a>网络安全设备</h3><ol>\n<li>防火墙： 具有访问控制功能，内容控制功能；对内部网络的攻击无能为力。</li>\n<li>IDS入侵检测系统：积极主动的安全防护工具，只能发出警告</li>\n<li>IPS入侵防护系统：提供实时的防护，自动拦截</li>\n</ol>\n<h3 id=\"加密技术\"><a href=\"#加密技术\" class=\"headerlink\" title=\"加密技术\"></a>加密技术</h3><ul>\n<li>对称加密(加密秘钥与解密秘钥相同,秘钥需要事先约定或通过信使传送或用高度安全的密钥分配中心KDC分配):(数字加密标准)DES(56位）、(三重DES)3DES（第一次和第三次加密秘钥一样,112位）、IDEA、AES</li>\n<li>非对称加密(公钥密码体系):RSA、ECC、Rabin、EIGamal、背包加密<ul>\n<li>数字签名：基于非对称加密(私钥生成)，主要用于报文鉴定，不可否认、报文完整性<br>报文摘要算法：MD5：128位输出。SHA：160位输出</li>\n<li>数字证书(数字标识):由证书鉴证机关（CA）签发的对用户<em>公钥</em>的认证。采用X.509 V3标准，内容包含：公钥、发行者签名、证书序列号等</li>\n</ul>\n</li>\n<li>安全协议SSL：功能有SSL服务器鉴别、加密的SSL会话、SSL客户鉴别</li>\n<li>安全协议PGP：对邮件报文摘要加密后组成的报文再次进行加密，然后传输。pgp不是一种完全的非对称加密体系，它是由一个对称加密算法IDEA,一个非对称加密算法RSA，一个单向散列算法MD5组成的混合加密算法。</li>\n<li>SNMPv3把对网络协议的安全威胁分为主要和次要两类：<br>主要：<br>修改信息，<br>假冒<br>修改报文流<br>消息泄露<br>次要：<br>拒绝服务<br>通信分析。</li>\n</ul>\n<h3 id=\"知识产权\"><a href=\"#知识产权\" class=\"headerlink\" title=\"知识产权\"></a>知识产权</h3><ul>\n<li><p>产权人的确定：<br>利用单位的物质条件进行创作、或有合同约定、或在本职工作中活动的结果：除署名权外其他著作权归单位。<br>本职工作中作出的发明、离职一年内、履行本职工作之外的任务所作出的发明：单位享有专利</p>\n</li>\n<li><p>保护期限：<br>公民的署名权、修改权、完整权没有限制,发表权、使用权、获得报酬权为死后50年<br>单位的发表权、使用权、获得报酬权为50年<br>注册商标有效期为10年，发明专利权为20年、实用新型和外观设计专利为10年</p>\n</li>\n</ul>\n<h3 id=\"常见命令\"><a href=\"#常见命令\" class=\"headerlink\" title=\"常见命令\"></a>常见命令</h3><ul>\n<li><p>Pathping :显示通信线路上每个子网的延迟和丢包率</p>\n</li>\n<li><p>Nslookup:用于查询internet域名信息或诊断dns服务器问题的工具</p>\n</li>\n<li><p>netstart<br><code>-r命令</code>：显示路由记录<br><code>a</code>:显示所有连接和监听端口<br><code>-e</code>:显示以太网统计信息<br><code>-s</code>:显示按协议统计信息<br><code>-n</code>:以数字形式显示地址和端口号<br><code>-o</code>：显示与每个连接相关的所属进程ID</p>\n</li>\n<li><p>Tracert：跟踪路由,通过多次向目标发送ICMP回声（echo）请求报文，每一次增加IP头中的TTL字段的值，从而确定到达各个路由器的时间。<br><code>-d</code>不进行名字解析，只显示中间节点的IP地址</p>\n</li>\n<li><p>route print；查看路由表命令</p>\n</li>\n<li><p>ping：发生ICMP回声请求报文检验与另一个计算机的连接<br><code>-t</code>:持续发送请求，直到Ctrl+C<br><code>-l</code>:显示目标IP域名：指定数据包大小<br><code>-a</code>:用ip地址表示目标，进行反向主机名字解析<br><code>-n 数字</code>:说明发送回声请求的次数，默认4次</p>\n</li>\n<li><p>ipconfig<br><code>/all</code>:显示本机TCP/IP配置<br><code>/release</code>:DHCP客户端手动释放IP地址<br><code>/renew</code>:DHCP客户端手动向服务器刷新请求<br><code>/flushdns</code>:清除本地DNS缓存内容<br><code>/displaydns</code>:显示本地DNS缓存内容</p>\n</li>\n<li><p>route:添加路由</p>\n</li>\n</ul>\n<h4 id=\"linux\"><a href=\"#linux\" class=\"headerlink\" title=\"linux\"></a>linux</h4><ul>\n<li><p>目录</p>\n<ul>\n<li>/etc/hosts:配置ip地址和对应主机名的文件</li>\n<li>/etc/hostname:系统的主机名称，域名</li>\n<li>/etc/resolv.conf:为DNS的配置文件</li>\n<li>/etc/gateway:路由表文件</li>\n<li>/etc/inetd.conf:是tcp/ip服务配置文件</li>\n<li>/etc/lilo.conf:加载配置为你阿基诺</li>\n<li>/etc/httpd/conf/httpdxonf:Web服务器主配置文件</li>\n</ul>\n</li>\n<li><p>命令</p>\n</li>\n</ul>\n<p>查看文件内容:</p>\n<ul>\n<li>cat：一次性全部输出</li>\n<li>more：分页</li>\n<li>less：可上下移动一行</li>\n</ul>\n<h3 id=\"综合布线系统\"><a href=\"#综合布线系统\" class=\"headerlink\" title=\"综合布线系统\"></a>综合布线系统</h3><ul>\n<li>工作区子系统：连接用户终端设备的子系统，如电脑和网线接口之间的部分</li>\n<li>水平子系统：连接工作区与主干的子系统，如楼层弱电井里的配线架到每个房间的网卡接口之间的部分。(插座接口到配线架之间）</li>\n<li>管理子系统：对布线电缆进行端接及配置管理的子系统，如配线间中的设备部分(配线架)</li>\n<li>干线子系统：连接管理间、设备间的子系统，如将接入层交换机连接到分布层交换机的网络线路(楼层之间）</li>\n<li>设备间子系统：核心交换机所在的位置就是设备间(机房）</li>\n<li>建筑群主干子系统：地下管道、直埋沟内、架空(建筑之间)</li>\n</ul>\n","categories":["study"],"tags":[]},{"title":"markdown语法","url":"http://www.baidu.com/2020/12/18/markdown/","content":"<h2 id=\"标题\"><a href=\"#标题\" class=\"headerlink\" title=\"标题\"></a>标题</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 这是一级标题</span><br><span class=\"line\">## 这是二级标题</span><br><span class=\"line\">### 这是三级标题</span><br><span class=\"line\">#### 这是四级标题</span><br><span class=\"line\">##### 这是五级标题</span><br><span class=\"line\">###### 这是六级标题</span><br><span class=\"line\">井号与标题间有空格</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong></p>\n<h1 id=\"这是一级标题\"><a href=\"#这是一级标题\" class=\"headerlink\" title=\"这是一级标题\"></a>这是一级标题</h1><h2 id=\"这是二级标题\"><a href=\"#这是二级标题\" class=\"headerlink\" title=\"这是二级标题\"></a>这是二级标题</h2><h3 id=\"这是三级标题\"><a href=\"#这是三级标题\" class=\"headerlink\" title=\"这是三级标题\"></a>这是三级标题</h3><h4 id=\"这是四级标题\"><a href=\"#这是四级标题\" class=\"headerlink\" title=\"这是四级标题\"></a>这是四级标题</h4><h5 id=\"这是五级标题\"><a href=\"#这是五级标题\" class=\"headerlink\" title=\"这是五级标题\"></a>这是五级标题</h5><h6 id=\"这是六级标题\"><a href=\"#这是六级标题\" class=\"headerlink\" title=\"这是六级标题\"></a>这是六级标题</h6><hr>\n<h2 id=\"字体\"><a href=\"#字体\" class=\"headerlink\" title=\"字体\"></a>字体</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">**这是加粗的文字**</span><br><span class=\"line\"></span><br><span class=\"line\">*这是倾斜的文字*</span><br><span class=\"line\"></span><br><span class=\"line\">***这是斜体加粗的文字***</span><br><span class=\"line\"></span><br><span class=\"line\">~~这是加删除线的文字~~</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong><br><strong>这是加粗的文字</strong><br><em>这是倾斜的文字</em>`<br><em><strong>这是斜体加粗的文字</strong></em><br><del>这是加删除线的文字</del></p>\n<hr>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;这是引用的内容</span><br><span class=\"line\"></span><br><span class=\"line\">&gt;&gt;&gt;这是引用的内容</span><br><span class=\"line\">在被引用的文本前加上&gt;符号，以及一个空格就可以了</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong></p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n<blockquote>\n<p>这是引用的内容</p>\n</blockquote>\n</blockquote>\n</blockquote>\n<hr>\n<h2 id=\"分隔线\"><a href=\"#分隔线\" class=\"headerlink\" title=\"分隔线\"></a>分隔线</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">***</span><br></pre></td></tr></table></figure>\n<h2 id=\"超链接\"><a href=\"#超链接\" class=\"headerlink\" title=\"超链接\"></a>超链接</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">[简书](http://jianshu.com)</span><br><span class=\"line\">[百度](http://baidu.com)</span><br></pre></td></tr></table></figure>\n<p><strong>效果:</strong><br><a href=\"http://jianshu.com/\">简书</a><br><a href=\"http://baidu.com/\">百度</a></p>\n<hr>\n<h2 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">- 列表内容</span><br><span class=\"line\">+ 列表内容</span><br><span class=\"line\">* 列表内容</span><br><span class=\"line\">1. 列表内容 </span><br><span class=\"line\">\\+ 列表内容\t</span><br><span class=\"line\">前面加反斜线\\即可显示符号本身\t\t\t  </span><br><span class=\"line\">2. 列表内容</span><br><span class=\"line\">注意：序号跟内容之间要有空格</span><br><span class=\"line\">3. 列表内容</span><br><span class=\"line\">  4. 列表嵌套</span><br><span class=\"line\">上一级和下一级之间敲三个空格即可</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong></p>\n<ul>\n<li>列表内容</li>\n</ul>\n<ul>\n<li>列表内容</li>\n</ul>\n<ul>\n<li>列表内容</li>\n</ul>\n<ol>\n<li>列表内容<br>+ 列表内容    </li>\n<li>列表内容</li>\n<li>列表内容<ol start=\"4\">\n<li>列表嵌套</li>\n</ol>\n</li>\n</ol>\n<hr>\n<h2 id=\"代码\"><a href=\"#代码\" class=\"headerlink\" title=\"代码\"></a>代码</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">\t`代码内容`</span><br><span class=\"line\"></span><br><span class=\"line\">单行代码：代码之间分别用一个反引号包起来</span><br><span class=\"line\"></span><br><span class=\"line\">\t\\```</span><br><span class=\"line\"></span><br><span class=\"line\">\t代码块</span><br><span class=\"line\"></span><br><span class=\"line\">\t\\```</span><br><span class=\"line\"></span><br><span class=\"line\">代码块：代码之间分别用三个反引号包起来，且两边的反引号单独占一行或者缩进 4 个空格或是 1 个制表符</span><br></pre></td></tr></table></figure>\n<h2 id=\"列表\"><a href=\"#列表\" class=\"headerlink\" title=\"列表\"></a>列表</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">|商品|数量|单价|</span><br><span class=\"line\">|-|-------:|:------:|</span><br><span class=\"line\">|:苹果:|10|\\$1|</span><br><span class=\"line\">|:电脑|1|\\$1000|</span><br><span class=\"line\">冒号在左边表示左对齐，右边表示有对齐，两边都有表示居中。</span><br></pre></td></tr></table></figure>\n<p><strong>效果：</strong></p>\n<table>\n<thead>\n<tr>\n<th>商品</th>\n<th align=\"right\">数量</th>\n<th align=\"center\">单价</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>:苹果:</td>\n<td align=\"right\">10</td>\n<td align=\"center\">$1</td>\n</tr>\n<tr>\n<td>:电脑</td>\n<td align=\"right\">1</td>\n<td align=\"center\">$1000</td>\n</tr>\n</tbody></table>\n<hr>\n<h2 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h2><h2 id=\"链接写法：-lt-http-baidu-com-gt\"><a href=\"#链接写法：-lt-http-baidu-com-gt\" class=\"headerlink\" title=\"链接写法：&lt;http://baidu.com&gt;\"></a><code>链接写法：&lt;http://baidu.com&gt;</code></h2><h2 id=\"图片\"><a href=\"#图片\" class=\"headerlink\" title=\"图片\"></a>图片</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">![文本](图片地址 &quot;可选标题&quot;)\t</span><br><span class=\"line\">开头一个感叹号 !</span><br><span class=\"line\">接着一个方括号，里面放上图片的替代文字</span><br><span class=\"line\">接着一个普通括号，里面放上图片的网址，最后还可以用引号包住并加上选择性的 &#x27;title&#x27; 属性的文字。</span><br></pre></td></tr></table></figure>\n","categories":["blog"],"tags":[]},{"title":"git","url":"http://www.baidu.com/2020/12/12/git/","content":"<h2 id=\"安装git\"><a href=\"#安装git\" class=\"headerlink\" title=\"安装git\"></a>安装git</h2><p><code>sudo apt-get install git</code></p>\n<h2 id=\"配置git\"><a href=\"#配置git\" class=\"headerlink\" title=\"配置git\"></a>配置git</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;用户名&quot;               //个人账号</span><br><span class=\"line\">git config --global user.email 123456@qq.com         //个人邮箱地址</span><br><span class=\"line\">上面的--global选项,表示以后管理git库时,默认使用上面的用户信息,也可以通过git config -l 来查看配置信息</span><br></pre></td></tr></table></figure>\n<h2 id=\"git命令\"><a href=\"#git命令\" class=\"headerlink\" title=\"git命令\"></a>git命令</h2><p>对当前目录进行git管理,该目录便会成为工作区,并在当前目录下会出现个.git隐藏目录.<br>该.git里会保存git所需要的数据和资源,也就是git仓库和暂存区都会保存在.git里</p>\n<ul>\n<li><code>git init</code> 本地初始化，建立缓存区</li>\n</ul>\n<p>由于git clone会自动生成.git隐藏目录,所以上面无需git init命令初始化。<br>而且.git目录里保存了远程仓库地址,所以上面无需git remote命令连接远端。</p>\n<ul>\n<li><p> <code>git add filename</code><br>将暂存区里的文件提交到本地仓库,若暂存区某个文件被删除掉,则会删除仓库里的文件。加参数 -a:跳过暂存区,git自动将工作区里记录的所有文件添加到暂存区并一起提交,从而跳过git add步骤<br>将工作区修改的文件添加到暂存区也可以使用<code>git add .</code>  将所有修改的文件进行添加;或<code>git add *</code>提交所有文件。</p>\n</li>\n<li><p><code>git rm filename</code><br>将暂存区的文件删除掉,若工作区文件存在,则需要使用git rm -f file来强制删除掉,</p>\n</li>\n<li><p><code>git commit -m &quot;your description&quot;</code><br>为本次操作添加描述</p>\n</li>\n</ul>\n<ul>\n<li><p><code>git clone https://......</code><br>克隆复制远程仓库到当前目录</p>\n</li>\n<li><p><code>git status</code><br>查看工作目录下文件的状态</p>\n</li>\n<li><p><code>git checkout filename</code><br>从暂存区恢复文件到工作区</p>\n</li>\n<li><p><code>git diff</code><br>查看工作区和暂存区版本区别</p>\n</li>\n<li><p><code>git log</code><br>查看已提交到暂存区的历史版本</p>\n</li>\n<li><p><code>git reset --hard 版本号</code><br>恢复文件到指定的版本</p>\n</li>\n</ul>\n<p>-<code>git remote add origin https://.......</code><br>添加远程仓库(origin),也就是关联本地仓库和github仓库</p>\n<ul>\n<li><p><code>git push origin 分支</code><br>推送(同步)数据到远程仓库,若是本地上传,必须先使用上个命令来指定远程仓库地址(origin),<br>若是从远程仓库克隆复制的,则不需要,因为.git里会自动保存远程仓库地址.</p>\n</li>\n<li><p><code>git pull</code><br>从远程仓库中同步代码</p>\n</li>\n</ul>\n<h2 id=\"ssh-key\"><a href=\"#ssh-key\" class=\"headerlink\" title=\"ssh key\"></a>ssh key</h2><p>首先通过ls ~/.ssh命令,查看是否已有ssh key,若有的话,先备份,然后通过rm -rf ~/.ssh来删除</p>\n<ol>\n<li><p>输入,创建密钥<br><code>ssh-keygen -t rsa -C &quot;....&quot;    // &quot;...&quot;里输入邮箱号</code></p>\n</li>\n<li><p>然后会提示设置密码,直接连按3个回车,表示密码为空</p>\n</li>\n<li><p>将新生成的key添加到ssh-agent中</p>\n</li>\n</ol>\n<p><code>eval  &quot;ssh-agent -s&quot;</code><br><code>ssh-add ~/.ssh/id_rsa</code><br>4. 若显示Could not open a connection to your authentication agent.,则继续输入<br><code>ssh-agent bash</code><br><code>ssh-add ~/.ssh/id_rsa</code><br>出现Identity added字段,则表示写入成功,ssh key公钥便保存在id_rsa.pub文件中了<br>5. 将复制的ssh key公钥添加到github中<br>6. 测试ssh key<br><code>ssh git@github.com</code><br>显示Hi  youname! ,则表示成功,后面的提示不用管；</p>\n","categories":["linux"],"tags":[]},{"title":"ranger","url":"http://www.baidu.com/2020/12/09/ranger/","content":"<h2 id=\"下面列出常用操作的快捷键\"><a href=\"#下面列出常用操作的快捷键\" class=\"headerlink\" title=\"下面列出常用操作的快捷键\"></a>下面列出常用操作的快捷键</h2><p>?  查看帮助</p>\n<h3 id=\"浏览\"><a href=\"#浏览\" class=\"headerlink\" title=\"浏览:\"></a>浏览:</h3><p>S 使用终端定位到当前所在目录<br>H   后退<br>L   前进<br>gg  跳到顶端<br>G   跳到底端<br>gh  go home<br>gn  新建标签<br>f   查找<br>/   搜素<br>g   快速进入目录</p>\n<h3 id=\"编辑\"><a href=\"#编辑\" class=\"headerlink\" title=\"编辑:\"></a>编辑:</h3><p>space   选择<br>uv      取消选择<br>yy      复制<br>dd      剪切<br>pp      粘贴<br>delete  删除<br>cw      重命名<br>A       在当前名称基础上重命名<br>I       类似A, 但是光标会跳到起始位置<br>Ctrl-f  向下翻页<br>Ctrl-b  向上翻页</p>\n<h3 id=\"书签\"><a href=\"#书签\" class=\"headerlink\" title=\"书签:\"></a>书签:</h3><p>m       新建书签<br>`       打开书签<br>um      删除书签</p>\n<h3 id=\"标签\"><a href=\"#标签\" class=\"headerlink\" title=\"标签:\"></a>标签:</h3><p>gn / C-n        新建标签<br>TAB / S-TAB     切换标签<br>A-Right, A-Left 切换标签<br>gc / C-w        关闭标签</p>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序:\"></a>排序:</h3><p>on/ob   根据文件名进行排序(natural/basename)<br>oc      根据改变时间进行排序 (Change Time 文件的权限组别和文件自身数据被修改的时间)<br>os      根据文件大小进行排序(Size)<br>ot      根据后缀名进行排序 (Type)</p>\n<p>oa      根据访问时间进行排序 (Access Time 访问文件自身数据的时间)<br>om      根据修改进行排序 (Modify time 文件自身内容被修改的时间)</p>\n<h3 id=\"其他\"><a href=\"#其他\" class=\"headerlink\" title=\"其他:\"></a>其他:</h3><p>zh      显示隐藏文件</p>\n<p>zp      打开/关闭文件预览功能<br>zP      打开目录预览功能</p>\n<h3 id=\"链接-Link\"><a href=\"#链接-Link\" class=\"headerlink\" title=\"链接(Link):\"></a>链接(Link):</h3><p>pl      粘贴绝对路径的链接<br>pL      粘贴相对路径的链接<br>phl     硬链接</p>\n<h3 id=\"批量改名\"><a href=\"#批量改名\" class=\"headerlink\" title=\"批量改名:\"></a>批量改名:</h3><p>批量选择文件后, 键入命令:bulkname, 会打开编辑器, 其中的文件名编辑后保存退出, 再次打开操作确认编辑, 然后就批量改名了, 如果想取消批量改名, 在确认时把文件内容删除即可.</p>\n<h3 id=\"任务管理\"><a href=\"#任务管理\" class=\"headerlink\" title=\"任务管理:\"></a>任务管理:</h3><p>在执行某些操作(比如复制一个大文件)时不能立即完成, 这在 ranger 中就是一个任务. 你可以停止, 启动某个任务, 也可以对某个任务设置优先级.</p>\n<p>w: 打开/关闭任务视图. 在w打开的任务视图中:<br>dd: 终止一个任务<br>J: 降低当前任务的优先级<br>K: 提升当前任务的优先级</p>\n<h3 id=\"其他-1\"><a href=\"#其他-1\" class=\"headerlink\" title=\"其他:\"></a>其他:</h3><dl><dt>zf      过滤器(如过滤pdf文件, zf+pdf,回车)<br>S       在当前目录打开终端<br>z(*)    改变设置, <em>表示在弹出选项中的选择<br>o(</em>)    改变排序方式<br>! / s   使用shell命令(！shell -w ls -hl %s,%s代表当前被选中的文件)</dt><dd>使用ranger命令(3? 查看可用命令)<br>:set colorscheme snow 设置颜色模式</dd></dl>","categories":["linux"],"tags":[]},{"title":"Vim常用操作","url":"http://www.baidu.com/2020/12/01/vim/","content":"<h1 id=\"Vim常用操作\"><a href=\"#Vim常用操作\" class=\"headerlink\" title=\"Vim常用操作\"></a>Vim常用操作</h1><h2 id=\"常用功能键\"><a href=\"#常用功能键\" class=\"headerlink\" title=\"常用功能键\"></a>常用功能键</h2><ol>\n<li>插入模式</li>\n</ol>\n<p>i ：在光标前插内内容:按8，再按i，进入插入模式，输入=， 按esc进入命令模式，就会出现8个=。</p>\n<p>a ：在光标后插入内容<br>A: 在当前行最后插入；</p>\n<p>o ：在所在行的下一行插入新行<br>O ：在所在行的上一行插入新行</p>\n<ol start=\"2\">\n<li>删除文本</li>\n</ol>\n<p>x：删除光标后面的字符<br>X：删除光标前面的字符</p>\n<p>nx：删除光标后面n个字符<br>nX：删除光标前面的n个字符</p>\n<p>d0：删除光标至行首的内容<br>d$：删除光标至行尾的内容</p>\n<p>dd ：删除整行<br>ndd ：向下删除n行</p>\n<ol start=\"3\">\n<li>移动光标</li>\n</ol>\n<p>vi可以直接用键盘上的光标来上下左右移动，但正规的vi是用小写英文字母「h」、「j」、「k」、「l」，分别控制光标左、下、上、右移一格。</p>\n<p>按「ctrl」+「b」：屏幕往“后”移动一页。</p>\n<p>按「ctrl」+「f」：屏幕往“前”移动一页。</p>\n<p>按「ctrl」+「u」：屏幕往“后”移动半页。</p>\n<p>按「ctrl」+「d」：屏幕往“前”移动半页。</p>\n<p>按数字「gg」:移动到文章开头<br>按「G」：移动到文章的最后。</p>\n<p>按「$」：移动到光标所在行的“行尾”。</p>\n<p>按「0」：移动到光标所在行的“行首”</p>\n<p>按「w」：光标跳到下个字的开头</p>\n<p>按「e」：光标跳到下个字的字尾</p>\n<p>按「b」：光标回到上个字的开头</p>\n<p>按「nl」：光标移到该行的第n个位置，如：5l,56l。</p>\n<ol start=\"4\">\n<li>查找文本</li>\n</ol>\n<p>/pattern ：向下查找</p>\n<p>?pattern ：向上查找</p>\n<p>n ：顺序查找</p>\n<p>N ：反向查找</p>\n<p>:s/p1/p2/g ：在当前行，将p1替换成p2</p>\n<p>:n1,n2s/p1/p2/g ：将n1至n2行之间的p1替换成p2<br>5. 复制<br>「yw」：将光标所在之处到字尾的字符复制到缓冲区中。<br>「nyw」：复制n个字到缓冲区<br>yy ：复制整行</p>\n<p>nyy ：复制n行</p>\n<p>p ：在所在行下一行粘贴</p>\n<p>P ：在所在行上一行粘贴</p>\n<p>在Vim中你可以把两行合并为一行，也就是说两行之间的换行符被删除了：命令是”J”。<br>dd ：剪切</p>\n<p>复制vim里面的内容至系统粘贴板：”+y</p>\n<p>粘贴系统粘贴板里面的内容至vim：”+p</p>\n<p>:n1,n2 co n3  ：将n1至n2行复制到n3行的下面</p>\n<p>:n1,n2 m n3 ：将n1至n2行剪切至n3行的下面</p>\n<p>:n1,n2 d ：将n1至n2行删除<br>6. 替换<br>「r」：替换光标所在处的字符。<br>「R」：替换光标所到之处的字符，直到按下「ESC」键为止。</p>\n<ol start=\"7\">\n<li><p>回复上一次操作<br>「u」：如果您误执行一个命令，可以马上按下「u」，回到上一个操作。按多次“u”可以执行多次回复。<br>CTRL-R(重做)来反转撤消的动作</p>\n</li>\n<li><p>更改<br>「cw」：更改光标所在处的字到字尾处<br>「c#w」：例如，「c3w」表示更改3个字</p>\n</li>\n<li><p>跳至指定的行<br>「ctrl」+「g」列出光标所在行的行号。<br>「#G」：例如，「15G」，表示移动光标至文章的第15行行首。</p>\n</li>\n</ol>\n<p> 跳到文件中的某一行<br>「#」：「#」号表示一个数字，在冒号后输入一个数字，再按回车键就会跳到该行了<br>10. 宏<br>. –重复上一个编辑动作<br>qa：开始录制宏a（键盘操作记录）<br>q：停止录制<br>@a：播放宏a</p>\n<ol start=\"11\">\n<li>vi命令列表<br>ctrl+v进入可视块模式，之后使用 j/k/h/l键可以选中一块<br>ggVG 选中全部的文本， 其中gg为跳到行首，V选中整行，G末尾<br>:pwd 显示vim的工作目录<br>:Sex – 水平分割一个窗口，浏览文件系统；<br>:Vex – 垂直分割一个窗口，浏览文件系统<br>:ce(nter) 本行文字居中<br>:le(ft) 本行文字靠左<br>:ri(ght) 本行文字靠右<h2 id=\"命令：\"><a href=\"#命令：\" class=\"headerlink\" title=\"命令：\"></a>命令：</h2></li>\n</ol>\n<p>设置backspace的工作方式<br>:set backspace=indent,eol,start<br>:set spell－开启拼写检查功能<br>:set nospell－关闭拼写检查功能<br>「set nu」后，会在文件中的每一行前面列出行号。<br>高亮显示搜索结果用”:set hlsearch”<br>:set ruler  会在屏幕右下角显示当前光标所处位置</p>\n<h2 id=\"Gvim配置：\"><a href=\"#Gvim配置：\" class=\"headerlink\" title=\"Gvim配置：\"></a>Gvim配置：</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">（“为注释）</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; 代码补全</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">set wildmenu        &quot;vim自身命令行模式智能补全</span><br><span class=\"line\">set completeopt-=preview    &quot;补全时不显示窗口，只显示补全列表</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot;代码折叠</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">set foldmethod=syntax       &quot;设置基于语法进行代码折叠</span><br><span class=\"line\">set nofoldenable            &quot;关闭代码折叠</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; 缓存设置</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">set nobackup        &quot;设置不备份</span><br><span class=\"line\">set noswapfile      &quot;禁止生成临时文件</span><br><span class=\"line\">set noundofile\t\t&quot; 操作记录</span><br><span class=\"line\">set autoread        &quot;文件在vim之外修改过，自动重新载入</span><br><span class=\"line\">set autowrite       &quot;设置自动保存</span><br><span class=\"line\">set confirm         &quot;在处理未保存或只读文件时，弹出确认</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; 编码设置</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; Lang &amp; Encoding &#123;&#123;&#123;</span><br><span class=\"line\">set fileencodings=utf-8,gbk2312,gbk,gb18030,cp936</span><br><span class=\"line\">set encoding=utf-8</span><br><span class=\"line\">set langmenu=zh_CN</span><br><span class=\"line\">let $LANG = &#x27;en_US.UTF-8&#x27;</span><br><span class=\"line\">&quot;language messages zh_CN.UTF-8</span><br><span class=\"line\">&quot; &#125;&#125;&#125;</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">&quot; 隐藏GVIM菜单及设置</span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">source $VIMRUNTIME/delmenu.vim</span><br><span class=\"line\">source $VIMRUNTIME/menu.vim</span><br><span class=\"line\">&quot; 窗口大小</span><br><span class=\"line\">set lines=35 columns=140</span><br><span class=\"line\">&quot; 分割出来的窗口位于当前窗口下边/右边</span><br><span class=\"line\">set splitbelow</span><br><span class=\"line\">set splitright</span><br><span class=\"line\">&quot;不显示工具/菜单栏</span><br><span class=\"line\">set guioptions-=T</span><br><span class=\"line\">set guioptions-=m</span><br><span class=\"line\">set guioptions-=L</span><br><span class=\"line\">set guioptions-=r</span><br><span class=\"line\">set guioptions-=b</span><br><span class=\"line\">&quot; 使用内置 tab 样式而不是 gui</span><br><span class=\"line\">set guioptions-=e</span><br><span class=\"line\">set nolist</span><br><span class=\"line\"></span><br><span class=\"line\">set nu</span><br><span class=\"line\">set guifont=Consolas:h11:cANSI:qDRAFT</span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":[]},{"title":"调用百度语音识别api","url":"http://www.baidu.com/2020/11/28/baidu_speech/","content":"<h3 id=\"注册账号申请api-key\"><a href=\"#注册账号申请api-key\" class=\"headerlink\" title=\"注册账号申请api key\"></a>注册账号申请api key</h3><h3 id=\"下载\"><a href=\"#下载\" class=\"headerlink\" title=\"下载\"></a>下载</h3><ul>\n<li>源码：语音识别、语音合成</li>\n</ul>\n<p><code>git clone https://github.com/Baidu-AIP/speech-demo</code></p>\n<ul>\n<li>依赖(curl.h)：</li>\n</ul>\n<p><code>apt install libcurl4-openssl-dev</code></p>\n<h3 id=\"编辑源文件\"><a href=\"#编辑源文件\" class=\"headerlink\" title=\"编辑源文件\"></a>编辑源文件</h3><p>编辑<code>asrmain.c</code> <code>ttsmain.c</code>填入自己的keys，修改相应参数</p>\n<p>编译<code>sh build_xxxxxxx</code></p>\n<h2 id=\"语音唤醒\"><a href=\"#语音唤醒\" class=\"headerlink\" title=\"语音唤醒\"></a>语音唤醒</h2><h3 id=\"snowboy下载\"><a href=\"#snowboy下载\" class=\"headerlink\" title=\"snowboy下载\"></a>snowboy下载</h3><p><code>git clone https://github.com/Kitt-AI/snowboy.git</code></p>\n<h3 id=\"依赖\"><a href=\"#依赖\" class=\"headerlink\" title=\"依赖\"></a>依赖</h3><p><code>sudo apt-get -y install libasound2-dev</code><br><code>sudo apt-get install python3-pyaudio</code><br><code>sudo apt-get install swig3.0 sox</code><br><code>sudo apt-get install libatlas-base-dev</code>  </p>\n<p>通过ffplay工具(安装ffmpeg会带上这个工具)。</p>\n<p><code>ffplay -ar 44100 -channels 2 -f s16le -i 123.pcm</code></p>\n","categories":["嵌入式"],"tags":[]},{"title":"C语言常见例题","url":"http://www.baidu.com/2020/11/22/arithmetic/","content":"<h1 id=\"例题\"><a href=\"#例题\" class=\"headerlink\" title=\"例题\"></a>例题</h1><hr>\n<ul>\n<li>求闰年</li>\n</ul>\n<p>能被4整除且不能被100整除,或能够被400整除的年份就是闰年</p>\n<hr>\n","categories":["study"],"tags":[]},{"title":"Alsa库移植和安装","url":"http://www.baidu.com/2020/11/22/alsa/","content":"<h3 id=\"alsa库下载\"><a href=\"#alsa库下载\" class=\"headerlink\" title=\"alsa库下载\"></a>alsa库下载</h3><p><code>ftp://ftp.alsa-project.org/pub</code></p>\n<h3 id=\"编译安装\"><a href=\"#编译安装\" class=\"headerlink\" title=\"编译安装\"></a>编译安装</h3><p>解压进入文件夹<br><code>./configure  --prefix=/home/mine/alsa    //生成文件存放的位置</code><br>开始安装驱动<br><code>make &amp;&amp; sudo make install </code></p>\n<h3 id=\"交叉编译\"><a href=\"#交叉编译\" class=\"headerlink\" title=\"交叉编译\"></a>交叉编译</h3><p>使用命令</p>\n<p><code>./configure --host=arm-jyxtec-linux-gnueabi --prefix=/usr/share/arm-alsa</code></p>\n<blockquote>\n<p>–host参数指定了交叉编译器为“arm-jyxtec-linux-gnueabi（根据自己板子上的工具链稳准）”，因此必须确保交叉编译器已成功配置（也就是已经导出为全局环境变量，切记！切记！我就在这浪费了很多时间，我的习惯是添加据对路径），且可以在shell里直接调用；–prefix参数指定了alsa-lib的目标安装目录，之后的alsa-util配置也一样</p>\n</blockquote>\n<p>使用命令</p>\n<p><code>./configure --host=arm-jyxtec-linux-gnueabi --prefix=/usr/share/arm-alsa --with-alsa-inc-prefix=/usr/share/arm-alsa/include --with-alsa-prefix=/usr/share/arm-alsa/lib --disable-alsamixer --disable-xmlto</code></p>\n<blockquote>\n<p>–with-alsa-inc-prefix和–with-alsa-prefix分别指定了交叉编译util应用所需要的alsa-lib的头文件和库文件；–disable-alsamixer表示不编译生成alsamixer这个应用程序，因为该程序依赖于ncurses这个图形界面库，目前我们对于该库还不能交叉编译，故放弃</p>\n</blockquote>\n<h3 id=\"可能出现的错误\"><a href=\"#可能出现的错误\" class=\"headerlink\" title=\"可能出现的错误\"></a>可能出现的错误</h3><hr>\n<p><code> error: this packages requires a curses library</code>  </p>\n<p><strong>解决办法：</strong>  </p>\n<p><code>apt-get install libncurses5-dev</code></p>\n<hr>\n<p><code> error: panelw library not found</code>  </p>\n<p><strong>解决办法：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">sudo ln -s libpanelw.so.5 /usr/lib/libpanelw.so</span><br><span class=\"line\">sudo ln -s libformw.so.5 /usr/lib/libformw.so</span><br><span class=\"line\">sudo ln -s libmenuw.so.5 /usr/lib/libmenuw.so</span><br><span class=\"line\">sudo ln -s libncursesw.so.5 /lib/libncursesw.so</span><br></pre></td></tr></table></figure>\n<hr>\n<p><strong>解决办法：</strong></p>\n<p>根据自己的错误提示来输入命令  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果提示是t-ru.gmo的话，就用命令：touch alsaconf/po/t-ru.gmo</span><br><span class=\"line\">如果提示是t-ja.gmo的话，就用命令：touch alsaconf/po/t-ja.gmo</span><br></pre></td></tr></table></figure>\n","categories":["嵌入式"],"tags":[]},{"title":"Webpack","url":"http://www.baidu.com/2020/11/22/webpack/","content":"<h1 id=\"Webpack\"><a href=\"#Webpack\" class=\"headerlink\" title=\"Webpack\"></a>Webpack</h1><p>是一种前端资源构建工具，一个静态模块打包器（module bundler）。在webpack看来，前端所有资源文件都会作为模块处理，它将根据模块的依赖关系进行静态分析，打包成对应的静态资源（bundle）。</p>\n<h2 id=\"五个核心概念\"><a href=\"#五个核心概念\" class=\"headerlink\" title=\"五个核心概念\"></a>五个核心概念</h2><h3 id=\"Entry\"><a href=\"#Entry\" class=\"headerlink\" title=\"Entry\"></a>Entry</h3><p>入口，指示webpack以哪个文件为入口起点开始打包，分析构建内部依赖图。</p>\n<h3 id=\"Output\"><a href=\"#Output\" class=\"headerlink\" title=\"Output\"></a>Output</h3><p>输出，指示webpack打包后的资源bundles输出到哪里去，以及如何命名</p>\n<h3 id=\"Loader\"><a href=\"#Loader\" class=\"headerlink\" title=\"Loader\"></a>Loader</h3><p>让webpack能够去处理那些非js文件</p>\n<h3 id=\"Plugins\"><a href=\"#Plugins\" class=\"headerlink\" title=\"Plugins\"></a>Plugins</h3><p>用于执行范围更广的任务，如打包优化，压缩等</p>\n<h3 id=\"Mode\"><a href=\"#Mode\" class=\"headerlink\" title=\"Mode\"></a>Mode</h3><p>指示webpack使用相应模式的配置</p>\n<ul>\n<li>development    本地开发模式</li>\n</ul>\n<p>会将<code>process.env.NODE_ENV</code>的值设为development;启用NamedChunksPlugin和NamedModulesPlugin</p>\n<p>开发环境：<code>webpack ./src/index.js -o ./build/built.js --mode=development</code>;webpack会以./src/index.js为入口文件开始打包，输出到./build/built.js</p>\n<ul>\n<li>production    上线生产模式</li>\n</ul>\n<p>会将<code>process.env.NODE_ENV</code>的值设为production;启用FlagDependencyUsagePlugin,FlagIncludedChunksPlugin,ModuleConcatenationPlugin,NoEmitOnErrorsPlugin,OccurrenceOrderPlugin,SideEffectsFlagPlugin,UglifyJsPlugin；</p>\n<p>生产环境：<code>webpack ./src/index.js -o ./build/built.js --mode=production</code>;webpack会以./src/index.js为入口文件开始打包，输出到./build/built.js</p>\n<ol>\n<li>webpack能处理js/json文件，不能处理css、img等其他文件</li>\n<li>生产环境和开发环境会将es6模块化编译成浏览器能识别的模块化</li>\n<li>生产环境比开发环境多一个压缩js代码的过程。</li>\n</ol>\n<h2 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h2><ul>\n<li>webpack.config.js</li>\n</ul>\n<p>webpack配置文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br><span class=\"line\">85</span><br><span class=\"line\">86</span><br><span class=\"line\">87</span><br><span class=\"line\">88</span><br><span class=\"line\">89</span><br><span class=\"line\">90</span><br><span class=\"line\">91</span><br><span class=\"line\">92</span><br><span class=\"line\">93</span><br><span class=\"line\">94</span><br><span class=\"line\">95</span><br><span class=\"line\">96</span><br><span class=\"line\">97</span><br><span class=\"line\">98</span><br><span class=\"line\">99</span><br><span class=\"line\">100</span><br><span class=\"line\">101</span><br><span class=\"line\">102</span><br><span class=\"line\">103</span><br><span class=\"line\">104</span><br><span class=\"line\">105</span><br><span class=\"line\">106</span><br><span class=\"line\">107</span><br><span class=\"line\">108</span><br><span class=\"line\">109</span><br><span class=\"line\">110</span><br><span class=\"line\">111</span><br><span class=\"line\">112</span><br><span class=\"line\">113</span><br><span class=\"line\">114</span><br><span class=\"line\">115</span><br><span class=\"line\">116</span><br><span class=\"line\">117</span><br><span class=\"line\">118</span><br><span class=\"line\">119</span><br><span class=\"line\">120</span><br><span class=\"line\">121</span><br><span class=\"line\">122</span><br><span class=\"line\">123</span><br><span class=\"line\">124</span><br><span class=\"line\">125</span><br><span class=\"line\">126</span><br><span class=\"line\">127</span><br><span class=\"line\">128</span><br><span class=\"line\">129</span><br><span class=\"line\">130</span><br><span class=\"line\">131</span><br><span class=\"line\">132</span><br><span class=\"line\">133</span><br><span class=\"line\">134</span><br><span class=\"line\">135</span><br><span class=\"line\">136</span><br><span class=\"line\">137</span><br><span class=\"line\">138</span><br><span class=\"line\">139</span><br><span class=\"line\">140</span><br><span class=\"line\">141</span><br><span class=\"line\">142</span><br><span class=\"line\">143</span><br><span class=\"line\">144</span><br><span class=\"line\">145</span><br><span class=\"line\">146</span><br><span class=\"line\">147</span><br><span class=\"line\">148</span><br><span class=\"line\">149</span><br><span class=\"line\">150</span><br><span class=\"line\">151</span><br><span class=\"line\">152</span><br><span class=\"line\">153</span><br><span class=\"line\">154</span><br><span class=\"line\">155</span><br><span class=\"line\">156</span><br><span class=\"line\">157</span><br><span class=\"line\">158</span><br><span class=\"line\">159</span><br><span class=\"line\">160</span><br><span class=\"line\">161</span><br><span class=\"line\">162</span><br><span class=\"line\">163</span><br><span class=\"line\">164</span><br><span class=\"line\">165</span><br><span class=\"line\">166</span><br><span class=\"line\">167</span><br><span class=\"line\">168</span><br><span class=\"line\">169</span><br><span class=\"line\">170</span><br><span class=\"line\">171</span><br><span class=\"line\">172</span><br><span class=\"line\">173</span><br><span class=\"line\">174</span><br><span class=\"line\">175</span><br><span class=\"line\">176</span><br><span class=\"line\">177</span><br><span class=\"line\">178</span><br><span class=\"line\">179</span><br><span class=\"line\">180</span><br><span class=\"line\">181</span><br><span class=\"line\">182</span><br><span class=\"line\">183</span><br><span class=\"line\">184</span><br><span class=\"line\">185</span><br><span class=\"line\">186</span><br><span class=\"line\">187</span><br><span class=\"line\">188</span><br><span class=\"line\">189</span><br><span class=\"line\">190</span><br><span class=\"line\">191</span><br><span class=\"line\">192</span><br><span class=\"line\">193</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用于拼接路径</span><br><span class=\"line\">const &#123;resolve&#125;=require(&#x27;path&#x27;);</span><br><span class=\"line\">//插件:需要下载</span><br><span class=\"line\">const HtmlWebpackPlugin=require(&#x27;html-webpack-plugin&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//webpack配置</span><br><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">//入口起点</span><br><span class=\"line\">entry:&#x27;./src/index.js&#x27;,</span><br><span class=\"line\"></span><br><span class=\"line\">//输出</span><br><span class=\"line\">output:&#123;</span><br><span class=\"line\">//输出文件名</span><br><span class=\"line\">filename:&#x27;built.js&#x27;</span><br><span class=\"line\">//输出路径</span><br><span class=\"line\">path: resolve(__dirname,&#x27;build&#x27;)</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//loader配置</span><br><span class=\"line\">module:&#123;</span><br><span class=\"line\">rules:[\t//loader配置</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//匹配哪些文件</span><br><span class=\"line\">test:/\\.css$/,</span><br><span class=\"line\">//使用哪些loader进行处理</span><br><span class=\"line\">use:[</span><br><span class=\"line\">//use数组中loader执行顺序：从右到左，从下到上，依次执行。</span><br><span class=\"line\">//创建style标签，将js中的样式资源插入进行，添加到head中生效</span><br><span class=\"line\">&#x27;style-loader&#x27;,</span><br><span class=\"line\">//将css文件变成commonjs模块加载到jsa中,里面内容是样式字符串</span><br><span class=\"line\">&#x27;css-loader&#x27;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//匹配哪些文件</span><br><span class=\"line\">test:/\\.less$/,</span><br><span class=\"line\">//使用哪些loader进行处理</span><br><span class=\"line\">use:[</span><br><span class=\"line\">&#x27;style-loader&#x27;,</span><br><span class=\"line\">&#x27;css-loader&#x27;,</span><br><span class=\"line\">//将less文件编译成css文件,需要下载less-loader和less</span><br><span class=\"line\">&#x27;less-loader&#x27;</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//处理图片</span><br><span class=\"line\">test:/\\.(jpg|png|gif)$/,</span><br><span class=\"line\">//问题：处理不了html中的img图片</span><br><span class=\"line\">//使用一个loader</span><br><span class=\"line\">loader:&#x27;url-loader&#x27;,</span><br><span class=\"line\">options:&#123;</span><br><span class=\"line\">limit:8*1024,\t\t//图片小于8kb,会被处理成base64，减少请求数量，减轻服务器压力，但图片体积会更大</span><br><span class=\"line\">esModule:false,\t\t//关闭url-loader的es6模块化，使用commonjs解析，避免解析时出现[object Module]</span><br><span class=\"line\">name:&#x27;[hash:10].[ext]&#x27;,\t\t//给图片重新命名，提取图片hash的前10位，扩展名为ext</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//处理html中的img图片（负责引入img,从而能被url-loader处理）</span><br><span class=\"line\">test:/\\.html$/,</span><br><span class=\"line\">loader:&#x27;html-loader&#x27;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//打包其他资源</span><br><span class=\"line\">exclude:/\\.(css|js|html|less)$/,\t//排除css、js、html</span><br><span class=\"line\">loader:&#x27;file-loader&#x27;,</span><br><span class=\"line\">opetions:&#123;</span><br><span class=\"line\">name:&#x27;[hash:10].[ext]&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//语法检查,只检查自己写的源代码，第三方的库是不用检查的，检查规则需要在package.json中的eslintConsig中设置</span><br><span class=\"line\">//需下载eslint-config-airbnb-base   eslint-plugin-import</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.js$/,</span><br><span class=\"line\">exclue:/node_modules/,</span><br><span class=\"line\">loader:&#x27;eslint-loader&#x27;,</span><br><span class=\"line\">options&#123;</span><br><span class=\"line\">fix:true\t//自动修复eslint的错误</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//js兼容处理：babel-loader   @babel/core    @babel/preset-env</span><br><span class=\"line\">//基本js兼容性处理--&gt;@babel/preset-env；只能转换基本语法，如promise不能转换</span><br><span class=\"line\">//全部js兼容性处理--&gt;@babel/polyfill；会将所有兼容性代码全部引入，体积太大</span><br><span class=\"line\">//按需加载--&gt;core-js</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.js$/,</span><br><span class=\"line\">exclude:/node_modules/,</span><br><span class=\"line\">/*</span><br><span class=\"line\">当一个文件需要多个loader处理时，需要指定loader执行的先后顺序</span><br><span class=\"line\">*/</span><br><span class=\"line\">enforce:&#x27;pre&#x27;,\t//优先执行</span><br><span class=\"line\">loader:&#x27;babel-loader&#x27;,</span><br><span class=\"line\">options:&#123;</span><br><span class=\"line\">//预设：指示babel做怎样的兼容处理</span><br><span class=\"line\">presets:[</span><br><span class=\"line\">&#x27;@babel/preset-env&#x27;,</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//按需加载</span><br><span class=\"line\">useBuiltIns:&#x27;usage&#x27;,</span><br><span class=\"line\">///指定core-js版本</span><br><span class=\"line\">corejs:&#123;</span><br><span class=\"line\">version:3</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">//指定兼容浏览器的版本</span><br><span class=\"line\">targets:&#123;</span><br><span class=\"line\">chrome:&#x27;60&#x27;,</span><br><span class=\"line\">firefox:&#x27;60&#x27;,</span><br><span class=\"line\">edge:&#x27;60&#x27;,</span><br><span class=\"line\">ie:&#x27;9&#x27;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">]</span><br><span class=\"line\"></span><br><span class=\"line\">/*//第二种写法</span><br><span class=\"line\">rules:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.css$/,</span><br><span class=\"line\">use:[</span><br><span class=\"line\">//取代style-loader,提取js中的css成单独文件</span><br><span class=\"line\">MiniCssExtractPlugin.loader,</span><br><span class=\"line\">&#x27;css-loader&#x27;,</span><br><span class=\"line\">/*</span><br><span class=\"line\">//css兼容性处理：帮postcss找到package.json中browserslist里面的配置，通过配置加载指定的css兼容性样式</span><br><span class=\"line\">//需下载postcss-loader  postcss-preset-env</span><br><span class=\"line\">loader:&#x27;postcss-loader&#x27;,</span><br><span class=\"line\">options:&#123;</span><br><span class=\"line\">ident:&#x27;postcss&#x27;,</span><br><span class=\"line\">plugin:()=&gt;[require(&#x27;postcss-present-env&#x27;)()]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">*/</span><br><span class=\"line\">]</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">]</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">//plugin配置</span><br><span class=\"line\">plugins:[</span><br><span class=\"line\"></span><br><span class=\"line\">//html-webpack-plugin</span><br><span class=\"line\">//默认创建一个空的html，自动引入打包输出的所有文件</span><br><span class=\"line\">//需要有结构的html文件</span><br><span class=\"line\">new HtmlWebpackPlugin(&#123;</span><br><span class=\"line\">//复制‘./src/index.html’文件，并自动引入打包输出的所有文件资源</span><br><span class=\"line\">template:&#x27;./src/index.html&#x27;,</span><br><span class=\"line\">minify:&#123;\t//压缩html代码</span><br><span class=\"line\">collapseWhitespace:true,\t//移除空格</span><br><span class=\"line\">removeComments:true\t\t//移除注释</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">//css兼容</span><br><span class=\"line\">new MiniCssExtratPlugin(&#123;</span><br><span class=\"line\">filename:&#x27;css/built.css&#x27;</span><br><span class=\"line\">&#125;),</span><br><span class=\"line\">//压缩css</span><br><span class=\"line\">new OptimizeCssAssetsWebpackPlugin()</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">],</span><br><span class=\"line\"></span><br><span class=\"line\">//模式</span><br><span class=\"line\">mode:&#x27;development&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">//开启服务器devSever,用于自动编译，自动打开浏览器，刷新浏览器，但只在内存中编译打包，不就有实际输出</span><br><span class=\"line\">//启动指令为：npx webpack-dev-server</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">contentBase:resolve(__dirname,&#x27;build&#x27;),</span><br><span class=\"line\">//启用gzip压缩</span><br><span class=\"line\">compress:true,</span><br><span class=\"line\">//端口号</span><br><span class=\"line\">port:3333,</span><br><span class=\"line\">//自动打开浏览器</span><br><span class=\"line\">open:true,</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>package.json</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">&quot;browserslist&quot;:&#123;\t\t//兼容的浏览器版本</span><br><span class=\"line\">//默认匹配生产环境，可通过修改process.env.NODE_ENV=developent来改变</span><br><span class=\"line\">\t&quot;developent&quot;:[</span><br><span class=\"line\">\t\t&quot;last 1 chrome version&quot;,</span><br><span class=\"line\">\t\t&quot;last 1 firefox version&quot;,</span><br><span class=\"line\">\t],</span><br><span class=\"line\">\t&quot;production&quot;:[</span><br><span class=\"line\">\t\t&quot;&gt;0.2%&quot;,</span><br><span class=\"line\">\t\t&quot;not dead&quot;,</span><br><span class=\"line\">\t\t&quot;not op_mini all&quot;\t</span><br><span class=\"line\">\t\t]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;eslintConfig&quot;:&#123;</span><br><span class=\"line\">&quot;extends&quot;:&quot;airbnb-base&quot;</span><br><span class=\"line\">&#125;,</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>index.js</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引用样式</span><br><span class=\"line\">import &#x27;./index.css&#x27;</span><br><span class=\"line\">//兼容js</span><br><span class=\"line\">import &#x27;@babel/polyfill&#x27;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"性能优化\"><a href=\"#性能优化\" class=\"headerlink\" title=\"性能优化\"></a>性能优化</h2><h3 id=\"开发环境优化\"><a href=\"#开发环境优化\" class=\"headerlink\" title=\"开发环境优化\"></a>开发环境优化</h3><ul>\n<li>打包构建速度</li>\n</ul>\n<p>HMR:模块热替换;当模块发生变化时，只会重新打包这个模块，而不是打包全部模块。</p>\n<p> package.json</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">...</span><br><span class=\"line\">devServer:&#123;</span><br><span class=\"line\">...</span><br><span class=\"line\">//开启HMR功能</span><br><span class=\"line\">hot:true</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>样式文件:可以使用hmr功能：style-loader内部实现了</p>\n</li>\n<li><p>js文件：默认不能使用hmr功能,解决办法：修改js代码，添加支持hmr功能的代码，但只能处理非入口js文件的其他文件。<br>index.html</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(module.hot)&#123;</span><br><span class=\"line\">module.hot.accept(&#x27;./test.js&#x27;,function()&#123;&#125;);\t//监听test.js的变化，若变化则执行回调函数</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>html文件：默认不能使用hmr功能,解决办法：修改entry，将html文件引入</p>\n</li>\n</ul>\n<p>webpack.config.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports=&#123;</span><br><span class=\"line\">entry:[&#x27;./src/js/index.js&#x27;,&#x27;./src/index.html&#x27;],</span><br><span class=\"line\">output:&#123;...&#125;,</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>代码调试</li>\n</ul>\n<h3 id=\"生成环境优化\"><a href=\"#生成环境优化\" class=\"headerlink\" title=\"生成环境优化\"></a>生成环境优化</h3><ul>\n<li>打包构建速度</li>\n<li>代码运行的性能</li>\n</ul>\n<p>source-map:一种提供源代码到构建后代码映射的技术，用于检测源代码的错误<br>种类：</p>\n<blockquote>\n<p>内联和外部的区别：外部生成了文件而内联没有，内联的构建速度更快；</p>\n</blockquote>\n<ul>\n<li>source-map:外部<br>错误代码准确信息和源代码的错误位置</li>\n<li>inline-source-map:内联<br>只生成一个内联source-map<br>错误代码的准确信息和源代码的错误位置</li>\n<li>hidden-source-map:外部<br>错误代码的错误原因，但没有错误位置<br>不能追踪源代码错误，只能提示到构建后代码的错误位置</li>\n<li>eval-source-map:内联<br>每一个文件都生成对应的source-map，都在eval</li>\n<li>nosources-source-map:外部<br>错误代码的准确信息,但没有任何源代码信息</li>\n<li>cheap-souce-map:外部<br>错误代码准确信息和源代码的错误位置,只能精确到行</li>\n<li>cheap-module-souce-map:外部<br>错误代码准确信息和源代码的错误位置</li>\n</ul>\n<p>开发环境：速度快(eval&gt;inline&gt;cheap&gt;..)，调试友好(souce-map,cheap-module-souce-map,cheap-spuce-map)<br>所以应选择eval-source-map/eval-cheap-module-souce-amp</p>\n<p>生产环境：内联会让代码体积变大，所以不用内联，源代码要不要隐藏（nosource-source-map全部隐藏，hidden-source-map只隐藏源代码，会提示构建后代码错误信息）<br>所以选择source-map/cheap-module-souce-map</p>\n<h2 id=\"oneOf\"><a href=\"#oneOf\" class=\"headerlink\" title=\"oneOf\"></a>oneOf</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//以下loader只会匹配一个</span><br><span class=\"line\">//注意：不能有两个配置处理同一个类型文件</span><br><span class=\"line\">oneOf:[</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">test:/\\.css$/,</span><br><span class=\"line\">use:[...commonCssLoadder]</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;&#125;</span><br><span class=\"line\">]</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"安装archlinux系统","url":"http://www.baidu.com/2020/11/22/archlinux_installation/","content":"<h1 id=\"archlinux-安装过程\"><a href=\"#archlinux-安装过程\" class=\"headerlink\" title=\"archlinux 安装过程\"></a>archlinux 安装过程</h1><h2 id=\"连接wifi\"><a href=\"#连接wifi\" class=\"headerlink\" title=\"连接wifi\"></a>连接wifi</h2><p><code>ip link //查看wifi设备</code></p>\n<p><code>ip link set 设备 up //启用设备</code></p>\n<p><code>iwlist 设备 scan | grep ESSID //扫描查看wifi名称</code></p>\n<p>或者使用</p>\n<p><code>iw dev scan ....</code></p>\n<p><code>wifi-menu</code></p>\n<h3 id=\"连接wpa加密wifi\"><a href=\"#连接wpa加密wifi\" class=\"headerlink\" title=\"连接wpa加密wifi\"></a>连接wpa加密wifi</h3><p><code>wpa_passphrase wifi名称 密码 &gt; internet.conf</code></p>\n<p><code>wpa_supplicant -i 网卡 -c internet.conf &amp;</code></p>\n<p><code>dhcpcd 网卡 &amp;</code></p>\n<h2 id=\"检查是否联通\"><a href=\"#检查是否联通\" class=\"headerlink\" title=\"检查是否联通\"></a>检查是否联通</h2><p>(ctrl+c停止)</p>\n<p><code>ping www.baidu.com</code></p>\n<h2 id=\"更新系统时钟\"><a href=\"#更新系统时钟\" class=\"headerlink\" title=\"更新系统时钟\"></a>更新系统时钟</h2><p><code>timedatectl set-ntp true</code></p>\n<h2 id=\"查看当前的可用磁盘\"><a href=\"#查看当前的可用磁盘\" class=\"headerlink\" title=\"查看当前的可用磁盘\"></a>查看当前的可用磁盘</h2><p><code>fdisk -l</code></p>\n<h2 id=\"创建新分区\"><a href=\"#创建新分区\" class=\"headerlink\" title=\"创建新分区\"></a>创建新分区</h2><p><code>fdisk /dev/sda    //注意磁盘名称</code></p>\n<p>–&gt;n –&gt;回车 –&gt;回车 –&gt;回车 –&gt;+500m  （boot分区）</p>\n<p>–&gt;n –&gt;回车 –&gt;回车 –&gt;回车 –&gt;+6G      （根分区）</p>\n<p>–&gt;n –&gt;回车 –&gt;回车 –&gt;回车 –&gt;回车  （将剩余空间全部分配给该分区）</p>\n<p>–&gt;w    （写入）</p>\n<h2 id=\"根目录格式化为ext4\"><a href=\"#根目录格式化为ext4\" class=\"headerlink\" title=\"根目录格式化为ext4\"></a>根目录格式化为ext4</h2><p>请注意自己的对应的目录是那块区域</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkfs.fat -F32 /dev/sda1     /// boot分区</span><br><span class=\"line\">mkswap /dev/sda2   //swap 分区</span><br><span class=\"line\">mkfs.ext4 /dev/sda3</span><br></pre></td></tr></table></figure>\n<h2 id=\"打开swap分区\"><a href=\"#打开swap分区\" class=\"headerlink\" title=\"打开swap分区#\"></a>打开swap分区#</h2><p>请注意自己的 swap分区是哪块</p>\n<p><code>swapon /dev/sda2</code></p>\n<h2 id=\"更改pacman配置文件\"><a href=\"#更改pacman配置文件\" class=\"headerlink\" title=\"更改pacman配置文件\"></a>更改pacman配置文件</h2><p><code>vim /etc/pacman.conf</code></p>\n<p>去掉Color的注释,用于安装时提示信息</p>\n<h2 id=\"挂载分区\"><a href=\"#挂载分区\" class=\"headerlink\" title=\"挂载分区#\"></a>挂载分区#</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mount  /dev/sda3 /mnt     //主分区内</span><br><span class=\"line\">ls /mnt  /////查看是否挂载成功，若出现lost+found 则代表挂载成功</span><br><span class=\"line\">mkdir /mnt/boot</span><br><span class=\"line\">mount /dev/sda1 /mnt/boot      /// boot分区</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置源\"><a href=\"#配置源\" class=\"headerlink\" title=\"配置源#\"></a>配置源#</h2><p>将国内源放到第一位 </p>\n<p><code>vim /etc/pacman.d/mirrorlist</code></p>\n<h2 id=\"刷新源\"><a href=\"#刷新源\" class=\"headerlink\" title=\"刷新源#\"></a>刷新源#</h2><p><code> pacman -Syy</code></p>\n<h2 id=\"安装基本包\"><a href=\"#安装基本包\" class=\"headerlink\" title=\"安装基本包\"></a>安装基本包</h2><p><code>pacstrap /mnt linux linux-firmware base base-devel</code></p>\n<h2 id=\"生成fstab文件\"><a href=\"#生成fstab文件\" class=\"headerlink\" title=\"生成fstab文件\"></a>生成fstab文件</h2><p><code>genfstab -U /mnt &gt;&gt; /mnt/etc/fstab</code></p>\n<h2 id=\"切换环境\"><a href=\"#切换环境\" class=\"headerlink\" title=\"切换环境\"></a>切换环境</h2><p><code>arch-chroot /mnt</code></p>\n<h2 id=\"配置时区\"><a href=\"#配置时区\" class=\"headerlink\" title=\"配置时区\"></a>配置时区</h2><p><code>ln -sf /usr/share/zoneinfo/Asia/Shanghai /etc/localtime</code></p>\n<h2 id=\"硬件时间\"><a href=\"#硬件时间\" class=\"headerlink\" title=\"硬件时间\"></a>硬件时间</h2><p><code>hwclock --systohc</code></p>\n<h2 id=\"安装vim\"><a href=\"#安装vim\" class=\"headerlink\" title=\"安装vim\"></a>安装vim</h2><p><code>pacman -S vim</code></p>\n<h2 id=\"退出\"><a href=\"#退出\" class=\"headerlink\" title=\"退出\"></a>退出</h2><p><code>exit</code></p>\n<h2 id=\"设置语言\"><a href=\"#设置语言\" class=\"headerlink\" title=\"设置语言\"></a>设置语言</h2><p>//将/etc/locale.gen中en_US.UTF-8的注释去掉,避免中文乱码,推荐先使用英文//</p>\n<p><code>vim /mnt/etc/locale.gen</code></p>\n<h3 id=\"切换环境-1\"><a href=\"#切换环境-1\" class=\"headerlink\" title=\"切换环境\"></a>切换环境</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">arch-chroot /mnt</span><br><span class=\"line\">locale-gen</span><br><span class=\"line\">exit</span><br></pre></td></tr></table></figure>\n<h2 id=\"配置-etc-locale-conf文件\"><a href=\"#配置-etc-locale-conf文件\" class=\"headerlink\" title=\"配置 /etc/locale.conf文件\"></a>配置 /etc/locale.conf文件</h2><p><code>vim /mnt/etc/locale.conf</code></p>\n<p>写入</p>\n<p><code>LANG=en_US.UTF-8</code></p>\n<h3 id=\"切换环境-2\"><a href=\"#切换环境-2\" class=\"headerlink\" title=\"切换环境\"></a>切换环境</h3><p><code>arch-chroot /mnt</code></p>\n<h3 id=\"重置root密码\"><a href=\"#重置root密码\" class=\"headerlink\" title=\"重置root密码\"></a>重置root密码</h3><p><code>passwd</code></p>\n<h2 id=\"安装网络相关的包\"><a href=\"#安装网络相关的包\" class=\"headerlink\" title=\"安装网络相关的包#\"></a>安装网络相关的包#</h2><p><code> pacman -S iw wpa_supplicant dialog net-tools networkmanager dhcpcd netctl</code></p>\n<h2 id=\"安装编码\"><a href=\"#安装编码\" class=\"headerlink\" title=\"安装编码\"></a>安装编码</h2><p><code>pacman -S intel-ucode（amd-ucode） os-prober(寻找其他系统的工具） efibootmgr（efi启动）</code></p>\n<h2 id=\"安装引导\"><a href=\"#安装引导\" class=\"headerlink\" title=\"安装引导\"></a>安装引导</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pacman -S grub</span><br><span class=\"line\">mkdir /boot/grub</span><br><span class=\"line\">grub-mkconfig -o /boot/grub/grub.cfg</span><br><span class=\"line\">grub-install --target=i386-pc /dev/sda (整个磁盘） //// efi:grub-install --target=x86_64-efi --efi-directory=/boot</span><br></pre></td></tr></table></figure>\n<h3 id=\"退出当前环境\"><a href=\"#退出当前环境\" class=\"headerlink\" title=\"退出当前环境#\"></a>退出当前环境#</h3><p><code> exit</code></p>\n<h2 id=\"关闭网络\"><a href=\"#关闭网络\" class=\"headerlink\" title=\"关闭网络\"></a>关闭网络</h2><p><code>killall wpa_supplicant dhcpcd</code></p>\n<h2 id=\"重启\"><a href=\"#重启\" class=\"headerlink\" title=\"重启\"></a>重启</h2><p><code>reboot</code></p>\n<h2 id=\"拔u盘\"><a href=\"#拔u盘\" class=\"headerlink\" title=\"拔u盘\"></a>拔u盘</h2><h2 id=\"安装软件\"><a href=\"#安装软件\" class=\"headerlink\" title=\"安装软件\"></a>安装软件</h2><ul>\n<li>图形界面：<code>xorg</code> <code>xorg-server</code> <code>xorg-xinit</code></li>\n<li>男人：<code>man</code> </li>\n</ul>\n<ul>\n<li>文件管理器：<code>ranger</code></li>\n<li>电脑参数：<code>neofetch</code><h3 id=\"设置\"><a href=\"#设置\" class=\"headerlink\" title=\"设置\"></a>设置</h3>xrandr<br>xrandr –output screen –mode 1280x800<br>feh –randomize –bg-fill /地址<br>picom</li>\n</ul>\n","categories":["linux"],"tags":[]},{"title":"JS实例","url":"http://www.baidu.com/2020/11/22/js_exmple/","content":"<h1 id=\"实例\"><a href=\"#实例\" class=\"headerlink\" title=\"实例\"></a>实例</h1><h2 id=\"判断是否是pc设备\"><a href=\"#判断是否是pc设备\" class=\"headerlink\" title=\"判断是否是pc设备\"></a>判断是否是pc设备</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function IsPC() &#123;</span><br><span class=\"line\">    var userAgentInfo = navigator.userAgent;</span><br><span class=\"line\">    console.log(userAgentInfo);</span><br><span class=\"line\">    var Agents = [&quot;Android&quot;, &quot;iPhone&quot;,&quot;SymbianOS&quot;, &quot;Windows Phone&quot;, &quot;iPod&quot;];</span><br><span class=\"line\">    var flag = true;</span><br><span class=\"line\">    for (var v = 0; v &lt; Agents.length; v++) &#123;</span><br><span class=\"line\">        if (userAgentInfo.indexOf(Agents[v]) &gt; 0) &#123;</span><br><span class=\"line\">            flag = false;</span><br><span class=\"line\">            break;</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    if(window.screen.width&gt;=768)&#123;</span><br><span class=\"line\">         flag = true;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    return flag;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"轮播图\"><a href=\"#轮播图\" class=\"headerlink\" title=\"轮播图\"></a>轮播图</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload()=function()&#123;</span><br><span class=\"line\">var oUl1=document.getElementById(&quot;ul1&quot;);</span><br><span class=\"line\">var oDiv1=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">//将图片添加到末尾</span><br><span class=\"line\">oUl1.innerHTML+=oUl1.innerHTML;</span><br><span class=\"line\">//重新设置一下ul的宽</span><br><span class=\"line\">oUl1.style.width=220*8+&quot;px&quot;;</span><br><span class=\"line\">setInterval(function()&#123;</span><br><span class=\"line\">//让ul向左运动一个图片位置</span><br><span class=\"line\">startMove(oUl1,&#123;left:oUl1.offsetLeft-220&#125;,function()&#123;</span><br><span class=\"line\">if(oUl1.offsetLeft&lt;=-oUl1.offsetWidth/2)&#123;</span><br><span class=\"line\">oUl1.style.left=&quot;opx&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">&#125;,2000);</span><br></pre></td></tr></table></figure>\n\n","categories":[],"tags":[]},{"title":"C++","url":"http://www.baidu.com/2020/11/21/c++/","content":"<h2 id=\"Helloword\"><a href=\"#Helloword\" class=\"headerlink\" title=\"Helloword\"></a>Helloword</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;iostream&gt;</span><br><span class=\"line\">using namespace std;\t//名字空间</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">cout&lt;&lt;&quot;helo word&quot;&lt;&lt;endl;</span><br><span class=\"line\">cout&lt;&lt;&quot;helo word\\n&quot;;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"输入输出\"><a href=\"#输入输出\" class=\"headerlink\" title=\"输入输出\"></a>输入输出</h3><p>cin、cout是istream类的对象</p>\n<h3 id=\"重载\"><a href=\"#重载\" class=\"headerlink\" title=\"重载\"></a>重载</h3><h3 id=\"复杂的数据类型\"><a href=\"#复杂的数据类型\" class=\"headerlink\" title=\"复杂的数据类型\"></a>复杂的数据类型</h3><h3 id=\"类\"><a href=\"#类\" class=\"headerlink\" title=\"类\"></a>类</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Test</span><br><span class=\"line\">&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<p>定义构造器<br>构造器的名字必须与它所在的类的名字一样<br>构造器没有返回值  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tCar(void);\t//名称与类名一致</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Car::Car(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">调用：</span><br><span class=\"line\"></span><br><span class=\"line\">class Car&#123;</span><br><span class=\"line\">public:</span><br><span class=\"line\">\tCar(void);\t//名称与类名一致</span><br><span class=\"line\">\tvoid runing();</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">Car::Car(void)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">void runing()&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">Car mycar;</span><br><span class=\"line\">mycar.runing();</span><br><span class=\"line\">return 0;</span><br></pre></td></tr></table></figure>\n\n<p>数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Car mycar[10];</span><br><span class=\"line\">调用：</span><br><span class=\"line\">mycar[x].runing;\t//x为给定数组元素的下标</span><br></pre></td></tr></table></figure>\n\n\n<p>副本构造器</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">MyClass（const MyClass &amp;rhs);</span><br></pre></td></tr></table></figure>\n\n<p>析构器：与构造器一样，只是前边多了一个波浪符<code>~</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Car</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Car(void);</span><br><span class=\"line\">~Car();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Car::Car()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Car::~Car()&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>this指针:让构造器知道哪个是参数哪个是属性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">如果代码中不存在二义性，则不必使用this指针</span><br><span class=\"line\">this-&gt;fish=fish;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"继承：\"><a href=\"#继承：\" class=\"headerlink\" title=\"继承：\"></a>继承：</h3><p>基类即父类<br>子类即从基类派生出来的类</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class SubCar(子类):public Car(基类) &#123;...&#125;;</span><br><span class=\"line\">子类也可以调用基类的成员</span><br></pre></td></tr></table></figure>\n<ul>\n<li>继承里的含参数构造器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Animal(std::string Name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">class Pig:public Animal</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">Pig(std::string Name);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//构造器</span><br><span class=\"line\">Animal::Animal(std::string Name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">name=Name;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pig::Pig(std::string Name) : Animal(Name)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"访问控制\"><a href=\"#访问控制\" class=\"headerlink\" title=\"访问控制\"></a>访问控制</h3><p>保护类里的方法和属性的手段</p>\n<blockquote>\n<p>public：任何代码<br>protected：这个类本身和它的子类<br>private：只有这个类本身</p>\n</blockquote>\n<h3 id=\"覆盖方法\"><a href=\"#覆盖方法\" class=\"headerlink\" title=\"覆盖方法\"></a>覆盖方法</h3><p>在类里重新声明这个方法</p>\n<h3 id=\"重载-1\"><a href=\"#重载-1\" class=\"headerlink\" title=\"重载\"></a>重载</h3><p>可以定义多个同名的函数，只要它们输入的参数不同</p>\n<ul>\n<li>运算符的重载</li>\n</ul>\n<p>重载不能改变运算符的操作个数，优先级，结核性</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">函数类型 operator 运算符（形参）</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">运算符的重载操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如：</span><br><span class=\"line\">int operator +(int a,int b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return (a-b);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>以下五个运算符不允许重载：<br><code>.</code>;<code>*</code>;<code>::</code>;<code>sizeof</code>;<code>?:</code>;</p>\n</blockquote>\n<h3 id=\"友元关系\"><a href=\"#友元关系\" class=\"headerlink\" title=\"友元关系\"></a>友元关系</h3><p>友元关系是类中的一种特殊关系，允许友元类访问对方pubulic、protected、private中的方法和属性</p>\n<p>只要在类的声明里的地方加上<code>friend class **类名字***</code></p>\n<h3 id=\"静态属性和静态方法\"><a href=\"#静态属性和静态方法\" class=\"headerlink\" title=\"静态属性和静态方法\"></a>静态属性和静态方法</h3><p>只要在它的声明前加上<code>static</code>即可</p>\n<h3 id=\"虚方法\"><a href=\"#虚方法\" class=\"headerlink\" title=\"虚方法\"></a>虚方法</h3><p>只需要在其原型前加上<code>virtual</code>即可</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">每一个new操作都要对应一个delete操作</span><br><span class=\"line\">int *p=new int;</span><br><span class=\"line\">*p=10;</span><br><span class=\"line\">std::cout&lt;&lt;*p;</span><br><span class=\"line\">delete p;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"抽象方法\"><a href=\"#抽象方法\" class=\"headerlink\" title=\"抽象方法\"></a>抽象方法</h3><p>在原型的末尾加上<code>=0</code></p>\n<h3 id=\"多继承\"><a href=\"#多继承\" class=\"headerlink\" title=\"多继承\"></a>多继承</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class TeachingStudent:public Student,public Teacher</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxxx</span><br><span class=\"line\">&#125;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"虚继承\"><a href=\"#虚继承\" class=\"headerlink\" title=\"虚继承\"></a>虚继承</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class Teacher:virtual public Person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"动态内存\"><a href=\"#动态内存\" class=\"headerlink\" title=\"动态内存\"></a>动态内存</h3><p>new语句申请内存，delete语句释放内存,再将指针指向NULL</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *i=new int;</span><br><span class=\"line\">delete i;</span><br><span class=\"line\">i=NULL;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>动态数组</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *=new int[10];</span><br><span class=\"line\">x[1]=1;</span><br><span class=\"line\">....</span><br><span class=\"line\">delete [] x;\t//删除动态数组</span><br></pre></td></tr></table></figure>\n\n\n\n<h3 id=\"强制类型转换\"><a href=\"#强制类型转换\" class=\"headerlink\" title=\"强制类型转换\"></a>强制类型转换</h3><p>静态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"></span><br><span class=\"line\">Company *company=new Company(&quot;APPLE&quot;,&quot;iPhone&quot;);</span><br><span class=\"line\">TechCompany *tecCompany=(TecCompany*)company</span><br><span class=\"line\">delete company;</span><br><span class=\"line\">或</span><br><span class=\"line\"></span><br><span class=\"line\">不能两个都删除</span><br><span class=\"line\">company=NULL;</span><br><span class=\"line\">tecCompany=NULL;</span><br></pre></td></tr></table></figure>\n\n<p>动态：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const_cast&lt;MyClass*&gt;(value)\t//用来改变value的常量性</span><br><span class=\"line\">dynamic_cast&lt;MyClass*&gt;(value)\t//用来把一中类型的对象指针安全地强制转换为另一种类型的对象指针，如果value的类型不是一个MyClass类或其子类的指针，则返回NULL</span><br><span class=\"line\">reinterpret_cast&lt;T&gt;(value)\t//在不进行任何实质性的转换的情况下，把一种类型的指针解释为另一种类型的指针或者把一种整数解释为另一种整数</span><br><span class=\"line\">static_cast&lt;T&gt;(value)\t\t//用来进行强制类型转换而不做任何运行时的检查</span><br><span class=\"line\"></span><br><span class=\"line\">例如：</span><br><span class=\"line\">Company *company=new Company(&quot;APPLE&quot;,iPhone&quot;);</span><br><span class=\"line\">TechCompany *techcompany=dynamic_cast&lt;TechCompany *&gt;(company);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"命名空间\"><a href=\"#命名空间\" class=\"headerlink\" title=\"命名空间\"></a>命名空间</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">namespace myNamespace</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">使用命名空间</span><br><span class=\"line\">* using namespace myNamespace</span><br><span class=\"line\"></span><br><span class=\"line\">* myNamespace::xxxx</span><br><span class=\"line\"></span><br><span class=\"line\">* using std::cout;</span><br><span class=\"line\">  cout&lt;&lt;&quot;,,,,&quot;;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"链接\"><a href=\"#链接\" class=\"headerlink\" title=\"链接\"></a>链接</h3><p>当使用编译器建立程序时：<br>1.执行预处理器指令<br>2.把.cpp文件编译成.o文件<br>3.把.o文件链接成一个可执行文件  </p>\n<h3 id=\"泛型编程\"><a href=\"#泛型编程\" class=\"headerlink\" title=\"泛型编程\"></a>泛型编程</h3><p>函数模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template &lt;class T&gt;\t//字母T表示接下来的函数里代表的一种不确定的数据类型</span><br><span class=\"line\">void swap(T &amp;a,T &amp;b)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">T i=0;</span><br><span class=\"line\">....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>类模板</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">template&lt;class T&gt;</span><br><span class=\"line\">class MyClass</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">MyClass();</span><br><span class=\"line\">void swap(T &amp;a,T &amp;b);</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//构造器的实现</span><br><span class=\"line\">Myclass&lt;T&gt;::MyClass()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">.....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"内联函数\"><a href=\"#内联函数\" class=\"headerlink\" title=\"内联函数\"></a>内联函数</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">inline int add (int x,int y,int z)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return x+Y+z;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n","categories":["study"],"tags":[]},{"title":"AJax","url":"http://www.baidu.com/2020/11/12/ajax/","content":"<h1 id=\"Ajax\"><a href=\"#Ajax\" class=\"headerlink\" title=\"Ajax\"></a>Ajax</h1><p><code>XMLHttpRequest</code>IE8以下不兼容；IE8以下声明ajax方法为<code>ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</code></p>\n<ol>\n<li><p>创建ajax对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var xhr=null</span><br><span class=\"line\">if(window.XMLHttpRequest)&#123;</span><br><span class=\"line\"> xhr=new XMLHttpRequest();</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">xhr=new ActiveXObject(&quot;Microsoft.XMLHTTP&quot;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n<li><p>调用open</p>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*</span><br><span class=\"line\">第一个参数： 请求方式 </span><br><span class=\"line\">第二个：url</span><br><span class=\"line\">第三个：是否异步，true异步，false同步</span><br><span class=\"line\">*/</span><br><span class=\"line\">xhr.open(&quot;get&quot;,&quot;./1.txt&quot;,true);</span><br><span class=\"line\">//或</span><br><span class=\"line\">xhr.open(&quot;get&quot;,&quot;./get.php?name=yyyy&amp;age=22&amp;password=342&quot;,true);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>调用send</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//get方法</span><br><span class=\"line\">xhr.send();</span><br><span class=\"line\">//post方法，将数据放在send()里提交</span><br><span class=\"line\">xhr.setRequestHeader(&#x27;content-type&#x27;,&#x27;application/x-www-form-urlencoded&#x27;);\t//声明发送的数据类型</span><br><span class=\"line\">xhr.send(&quot;name=yyy&amp;age=33&amp;password=124564&quot;);\t//无需编码</span><br><span class=\"line\">//post没有缓存问题</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>等待数据响应</li>\n</ol>\n<p>onreadystatechange事件</p>\n<table>\n<thead>\n<tr>\n<th>readyState属性</th>\n<th>请求状态</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>0</td>\n<td>（初始化）还没调用open（）方法</td>\n</tr>\n<tr>\n<td>1</td>\n<td>（载入）已调用send()方法。正在发送请求</td>\n</tr>\n<tr>\n<td>2</td>\n<td>(载入完成）send()方法完成，已收到全部响应内容</td>\n</tr>\n<tr>\n<td>3</td>\n<td>(解析）正在解析响应内容</td>\n</tr>\n<tr>\n<td>4</td>\n<td>(完成）响应内容解析完成，可在客户端调用</td>\n</tr>\n</tbody></table>\n<table>\n<thead>\n<tr>\n<th>status属性</th>\n<th>服务器（请求资源）的状态</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>200</td>\n<td></td>\n</tr>\n<tr>\n<td>400</td>\n<td></td>\n</tr>\n</tbody></table>\n<p><code>responseText</code>:返回以文本形式存放的内容;<br><code>responseXML</code>:返回XML形式的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xhr.onreadystatechange=function()&#123;</span><br><span class=\"line\">if(xhr.readyState==4)&#123;</span><br><span class=\"line\">if(xhr.status==200)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(xhr.responseText);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">alert(&quot;error:&quot;+xhr.status);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"传输格式\"><a href=\"#传输格式\" class=\"headerlink\" title=\"传输格式\"></a>传输格式</h3><ul>\n<li><p>xml数据<br>优点：种类丰富，传输量非常大<br>缺点：解析麻烦，不适合轻量数据</p>\n</li>\n<li><p>json数据</p>\n</li>\n</ul>\n<p>优点：轻量级数据，解析轻松<br>缺点：种类少，传输数据量少</p>\n<p><code>JSON.parse();</code>  <code>JSON.stringify();</code></p>\n<h3 id=\"ajax-只能下载同源的数据，跨源的数据禁止下载\"><a href=\"#ajax-只能下载同源的数据，跨源的数据禁止下载\" class=\"headerlink\" title=\"ajax 只能下载同源的数据，跨源的数据禁止下载\"></a>ajax 只能下载同源的数据，跨源的数据禁止下载</h3><ul>\n<li><p>同源策略</p>\n<ol>\n<li>同协议</li>\n<li>同域名/IP</li>\n<li>同端口号</li>\n</ol>\n</li>\n</ul>\n<p>同源策略禁止跨源请求</p>\n<ul>\n<li>跨源方法：<ol>\n<li>修改ajax同源协议（不建议）</li>\n<li>委托php文件进行跨源</li>\n<li>JSONP</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"JSONP跨域的使用流程\"><a href=\"#JSONP跨域的使用流程\" class=\"headerlink\" title=\"JSONP跨域的使用流程\"></a>JSONP跨域的使用流程</h3><ol>\n<li>先去声明一个函数，这个函数有一个形参，这个形参会拿到我们想要下载的数据，</li>\n<li>在需要下载数据的时候，动态创建script标签，将标签src属性设置成下载数据的链接</li>\n<li>当script插入到页面的时候，就会调用号已经封装好的函数，将数据传过来</li>\n</ol>\n<p>index.html</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function download(data)&#123;</span><br><span class=\"line\">console.log(data);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script src=&quot;test.js&quot;&gt;\t//浏览器一运行就会显示&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//动态生成script标签</span><br><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var Obtn=document.getElementById(&#x27;btn1&#x27;);</span><br><span class=\"line\">Obtn.onclick=function()&#123;</span><br><span class=\"line\">\tvar oScript=document.createElement(&quot;script&quot;);\t//创建script标签</span><br><span class=\"line\">\toScript.src=&#x27;test.js&#x27;;</span><br><span class=\"line\">\tdocument.body.appendChild(oScript);\t\t//插入到页面</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p> test.js</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">download(&quot;hello!!!!!!!!!&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">function download(data)&#123;</span><br><span class=\"line\">console.log(data);</span><br><span class=\"line\"> var oInfo=documenet.getElementById(&quot;oinfo&quot;);</span><br><span class=\"line\"> var oTi=..;</span><br><span class=\"line\">\toInfo.innerHTML=`$&#123;data.city&#125;`</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\tvar str=&#x27;&#x27;;</span><br><span class=\"line\">\tfor (var i=0;i&lt;arr.length;i++)&#123;</span><br><span class=\"line\">\tstr+=`</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;td&gt;$&#123;arr[i].data&#125;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t\t`</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\toTi.innerHTML=str;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">//动态生成script标签</span><br><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var Obtn=document.getElementById(&#x27;btn1&#x27;);</span><br><span class=\"line\">Obtn.onclick=function()&#123;</span><br><span class=\"line\">\tvar oScript=document.createElement(&quot;script&quot;);\t//创建script标签</span><br><span class=\"line\">\toScript.src=&#x27;https:.....&amp;callback=download&#x27;;</span><br><span class=\"line\">\tdocument.body.appendChild(oScript);\t\t//插入到页面</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"表单提交\"><a href=\"#表单提交\" class=\"headerlink\" title=\"表单提交\"></a>表单提交</h3><p>form表单点击提交数据后需跳转页面，ajax为异步进行的数据传输</p>\n<ul>\n<li>action:点击submit后跳转的url</li>\n<li>method:表单提交方式get/post<ul>\n<li>get(默认)<br>直接将数据拼接在url后面进行提交;用<code>？</code>进行拼接,多个数据之间用<code>&amp;</code>进行连接<ul>\n<li>优点：简单</li>\n<li>缺点：不安全，最大2kb，无法实现上传大文件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;get.php&quot; method=&quot;get&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;name&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;age&quot; placeholder=&quot;age&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;password&quot; placeholder=&quot;&quot; /&gt;</span><br><span class=\"line\">&lt;input type&quot;submit&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>post<br>通过浏览器内部进行提交<ul>\n<li>优点：安全，上传大小无上限</li>\n<li>缺点：比get复杂</li>\n</ul>\n</li>\n</ul>\n<p><code>enctype</code>提交数据的格式，默认<code>application/x-www-form-urlencoded</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form action=&quot;post.php&quot; method=&quot;post&quot;  enctype=&quot;application/x-www-from-urlencoded&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;username&quot; placeholder=&quot;name&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;age&quot; placeholder=&quot;age&quot; /&gt;</span><br><span class=\"line\">&lt;input type=&quot;text&quot; name=&quot;password&quot; placeholder=&quot;&quot; /&gt;</span><br><span class=\"line\">&lt;input type&quot;submit&quot; value=&quot;post按钮&quot;/&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n<p>php</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">header(&#x27;content-type:text/html;charset=&quot;UTF-8&quot;&#x27;);</span><br><span class=\"line\">//$_GET 全局关联数组 ；存放着get提交的所有数据</span><br><span class=\"line\">//$_POST全局数组，储存着post发送来的数据</span><br><span class=\"line\">$username=$_GET[&#x27;username&#x27;];</span><br><span class=\"line\">$age=$_GET[&#x27;age&#x27;];</span><br><span class=\"line\">$password=$_GET[&#x27;password&#x27;];</span><br><span class=\"line\"></span><br><span class=\"line\">echo (&quot;&#123;$username&#125;,$&#123;age&#125;,&#123;$password&#125;);</span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数据库操作\"><a href=\"#数据库操作\" class=\"headerlink\" title=\"数据库操作\"></a>数据库操作</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;?php</span><br><span class=\"line\">header(&quot;Content-type:text/html;charset=utf-8&quot;);</span><br><span class=\"line\">//连接数据库</span><br><span class=\"line\">/*</span><br><span class=\"line\">第一个参数：连接数据库的ip/域名</span><br><span class=\"line\">第二个参数：用户名</span><br><span class=\"line\">第三个参数：密码</span><br><span class=\"line\">*/</span><br><span class=\"line\">$link=mysql_connect(&quot;localhost&quot;,&quot;root&quot;,&quot;123456&quot;);</span><br><span class=\"line\">if($link)&#123;</span><br><span class=\"line\">echo&quot;连接失败&quot;;</span><br><span class=\"line\">exit;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//设置字符集</span><br><span class=\"line\">mysql_set_charset(&quot;utf8&quot;);</span><br><span class=\"line\">//选择数据库</span><br><span class=\"line\">mysql_select_db(&quot;jjjj&quot;);</span><br><span class=\"line\">//准备sql语句</span><br><span class=\"line\">$sql=&quot;SELECT * FROM students&quot;;</span><br><span class=\"line\">//发送sql语句</span><br><span class=\"line\">$res=mysql_query($sql);</span><br><span class=\"line\">//处理结果,全部获取</span><br><span class=\"line\">$arr=array();</span><br><span class=\"line\">while($row=mysql_fetch_assoc($res))&#123;</span><br><span class=\"line\">array_push($arr,$row);</span><br><span class=\"line\">var_dump($row);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">echo json_encode($arr);</span><br><span class=\"line\">//关闭数据库</span><br><span class=\"line\">mysql_close($link);</span><br><span class=\"line\"></span><br><span class=\"line\">?&gt;</span><br></pre></td></tr></table></figure>\n","categories":[],"tags":[]},{"title":"NodeJs","url":"http://www.baidu.com/2020/11/12/nodejs/","content":"<h1 id=\"NodeJs\"><a href=\"#NodeJs\" class=\"headerlink\" title=\"NodeJs\"></a>NodeJs</h1><h2 id=\"Node-js模块化开发\"><a href=\"#Node-js模块化开发\" class=\"headerlink\" title=\"Node.js模块化开发\"></a>Node.js模块化开发</h2><p>Node.js规定一个Javascript文件就是一个模块，模块内部定义的变量和函数默认情况下外部无法得到。<br>模块内部可以使用exports对象进行成员导出，使用require方法导入其他模块。</p>\n<h3 id=\"模块成员导出\"><a href=\"#模块成员导出\" class=\"headerlink\" title=\"模块成员导出\"></a>模块成员导出</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//a.js</span><br><span class=\"line\">//在模块中定义变量</span><br><span class=\"line\">let version=1.0;</span><br><span class=\"line\">//模块中定义方法</span><br><span class=\"line\">const sayHi=name=&gt;`hello！$&#123;name&#125;`\t//es6新语法</span><br><span class=\"line\">//向模块外部导出数据</span><br><span class=\"line\">exports.version=version;</span><br><span class=\"line\">exports.sayHi=sayHi;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"模块成员的导入\"><a href=\"#模块成员的导入\" class=\"headerlink\" title=\"模块成员的导入\"></a>模块成员的导入</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//b.js</span><br><span class=\"line\">//在b.js模块中导入模块a</span><br><span class=\"line\">let a=require(&#x27;./b.js&#x27;);</span><br><span class=\"line\">//输出b模块中的version变量</span><br><span class=\"line\">console.log(a.version);</span><br><span class=\"line\">//调用b模块中的sayHi方法</span><br><span class=\"line\">console.log(a.sayHi(&#x27;XiaoMing&#x27;));</span><br></pre></td></tr></table></figure>\n<p>模块成员导出的另一种方法</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">module.exports.version=version;</span><br><span class=\"line\">module.exports.sayHi=sayHi;</span><br></pre></td></tr></table></figure>\n<p>exports是module.exports的别名，导出对象最终以module.exports为准；</p>\n<h2 id=\"package-json文件的作用\"><a href=\"#package-json文件的作用\" class=\"headerlink\" title=\"package.json文件的作用\"></a>package.json文件的作用</h2><p>项目描述文件，记录了当前项目信息。如：项目版本、作者、依赖的模块等等；使用<code>npm init -y</code>生成。其作用为（一）锁定包的版本，确保再次下载时不会因为包版本不同而产生问题。（二）加快下载速度，其记录着依赖的下载地址。</p>\n<ul>\n<li>开发依赖</li>\n</ul>\n<p>在项目开发阶段所需要的依赖，线上运营阶段不需要依赖的第三方包,称为开发依赖；可使用<code>npm install 包名 --save-dev</code>将包添加到package.json文件的devDependencies字段中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;</span><br><span class=\"line\">\t&quot;devDependencies&quot;:&#123;</span><br><span class=\"line\">\t\t&quot;gulp&quot;:&quot;^3.9.1&quot;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Node-js中模块的加载机制\"><a href=\"#Node-js中模块的加载机制\" class=\"headerlink\" title=\"Node.js中模块的加载机制\"></a>Node.js中模块的加载机制</h2><p>模块查找规则</p>\n<ul>\n<li>当模块有路径没后缀时</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&#x27;./find.js);</span><br><span class=\"line\">require(&#x27;./find&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ol>\n<li>require方法根据路径查找模块</li>\n<li>如果模块后缀省略，则先找同名JS文件再找同名JS文件夹</li>\n<li>如果找到同名文件夹，则继续寻找其中的index.js文件</li>\n<li>如果没有index.js文件，就会去当前文件夹中的package.js文件中查找main选项中的入口文件</li>\n<li>如果入口文件不存在或没有指定入口文件，则报错：模块未找到</li>\n</ol>\n<ul>\n<li>当模块即没路径也没后缀时</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;find&quot;);</span><br></pre></td></tr></table></figure>\n<ol>\n<li>Node.js会假设它是系统模块，会去node_modules文件中寻找</li>\n<li>先查看是否有同名js文件</li>\n<li>在看有没有同名文件夹</li>\n<li>若有，则继续寻找其中的index.js文件</li>\n<li>如没有，则查看该文件夹中的package.json中的main选项确定模块的入口文件</li>\n<li>若都没有，则报错</li>\n</ol>\n<h2 id=\"系统模块-Node运行环境提供的API\"><a href=\"#系统模块-Node运行环境提供的API\" class=\"headerlink\" title=\"系统模块:Node运行环境提供的API\"></a>系统模块:Node运行环境提供的API</h2><h3 id=\"fs文件操作\"><a href=\"#fs文件操作\" class=\"headerlink\" title=\"fs文件操作\"></a>fs文件操作</h3><p><code>const fs=require(&#39;fs&#39;);</code></p>\n<p>读取文件内容:<code>fs.readFile(&#39;文件路径/文件名&#39;[,&#39;文件编码&#39;],callback);</code>(括号内为可选项)</p>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//读取上一级css目录下的base.css</span><br><span class=\"line\">fs.readFile(&#x27;../css/base.css&#x27;,&#x27;utf-8&#x27;,(err,doc)=&gt;&#123;</span><br><span class=\"line\">//如果读取错误参数err的值为错误对象，否则err的值为null</span><br><span class=\"line\">//doc参数为文件内容</span><br><span class=\"line\">if(err==null)&#123;</span><br><span class=\"line\">//控制台中输出文件内容</span><br><span class=\"line\">console.log(doc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<p>写入文件内容：`fs.writeFile(‘文件路径/文件名称’,’数据’,callback);</p>\n<p>实例：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const conetent=&#x27;&lt;h3&gt;!!!!!!!!!!&lt;/h3&gt;&#x27;;</span><br><span class=\"line\">fs.writeFile(&#x27;../index.html&#x27;,content,err=&gt;&#123;</span><br><span class=\"line\">if(err!=null)&#123;</span><br><span class=\"line\">console.log(err);</span><br><span class=\"line\">return;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(&#x27;文件写入成功&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"路径拼接\"><a href=\"#路径拼接\" class=\"headerlink\" title=\"路径拼接\"></a>路径拼接</h3><p><code>path.join(&#39;路径&#39;,&#39;路径&#39;,..);</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入path模块</span><br><span class=\"line\">const path=require(&#x27;path&#x27;);</span><br><span class=\"line\">//路径拼接</span><br><span class=\"line\">let finialPath=path.join(&#x27;itcast&#x27;,&#x27;a,&#x27;css&#x27;,&#x27;test.css&#x27;);</span><br><span class=\"line\">//输出</span><br><span class=\"line\">console.log(finialPath);</span><br><span class=\"line\">//用__dirname获取当前文件的绝对路径</span><br><span class=\"line\">const fs=require(&#x27;fs&#x27;);</span><br><span class=\"line\">fs.readFile(path.join(__dirname,&#x27;test.css&#x27;),&#x27;utf-8&#x27;,(err,doc)=&gt;&#123;</span><br><span class=\"line\">console.log(err);</span><br><span class=\"line\">console.log(doc);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"第三方模块\"><a href=\"#第三方模块\" class=\"headerlink\" title=\"第三方模块\"></a>第三方模块</h2><p>npm(node package manager):node的第三方模块管理工具</p>\n<ul>\n<li>下载：<code>npm install 模块名</code></li>\n<li>卸载：<code>npm uninstall package 模块名</code></li>\n</ul>\n<p>全局安装和本地安装：一般命令行工具全局安装，库文件本地安装</p>\n<h3 id=\"第三方模块mine\"><a href=\"#第三方模块mine\" class=\"headerlink\" title=\"第三方模块mine\"></a>第三方模块mine</h3><p>其中mine.getType(路径);可根据路径返回请求的文件类型;可用于res.writeHead(200,{‘content-type’:’text/css;charset=utf8’})</p>\n<h3 id=\"第三方模块art-template模板引擎\"><a href=\"#第三方模块art-template模板引擎\" class=\"headerlink\" title=\"第三方模块art-template模板引擎\"></a>第三方模块art-template模板引擎</h3><ol>\n<li><p>下载：<code>npm install art-template</code></p>\n</li>\n<li><p>引入：<code>const template = require(&#39;art-template&#39;);</code></p>\n</li>\n<li><p>告诉模板引擎要拼接的数据和模板地址:<code>const html=template(&#39;模板数据&#39;,数据);</code></p>\n</li>\n</ol>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//导入模块</span><br><span class=\"line\">const template = require(&#x27;art-template&#x27;);</span><br><span class=\"line\">//拼接</span><br><span class=\"line\">const html=template(&#x27;./index.art&#x27;,&#123;</span><br><span class=\"line\">data:&#123;</span><br><span class=\"line\">name: &#x27;xioaming&#x27;,</span><br><span class=\"line\">age: 29</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//index.art</span><br><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">\t&lt;span&gt;&#123;&#123;data.name&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">\t&lt;span&gt;&#123;&#123;data.age&#125;&#125;&lt;/span&gt;</span><br><span class=\"line\">&lt;/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>模板语法</p>\n<ul>\n<li><p>数据输出<br>标准语法：<code>&#123;&#123;数据&#125;&#125;</code><br>原始语法：<code>&lt;%=数据%&gt;</code></p>\n</li>\n<li><p>原文输出：数据中带有HTML标签，默认情况下模板引擎不会解析标签,会转义后输出,若要解析则<br>标准语法：<code>&#123;&#123;@数据&#125;&#125;</code><br>原始语法：<code>&lt;%-数据%&gt;</code></p>\n</li>\n<li><p>条件判断<br>标准语法：<code>&#123;&#123;if 条件&#125;&#125;....&#123;&#123;else if 条件&#125;&#125;....&#123;&#123;/if&#125;&#125;</code><br>原始语法：<code>&lt;%if (条件) &#123;%>....<%&#125; else if(条件) &#123;%>....<%&#125;  %&gt;</code></p>\n</li>\n<li><p>循环<br>标准语法：<code>&#123;&#123;each 数据&#125;&#125; &#123;&#123;$index&#125;&#125; &#123;&#123;$value&#125;&#125;  &#123;&#123;/each&#125;&#125;</code><br>原始语法：<code>&lt;% for() &#123;%> ....<%&#125; %&gt;</code></p>\n</li>\n</ul>\n</li>\n<li><p>子模板</p>\n</li>\n</ul>\n<p>将网站的公共区域（头部、页脚）抽离到单独文件中<br>标准语法：<code>&#123;include &#39;模板路径/footer.art&#39;&#125;</code><br>原始语法：<code>&lt;%include(&#39;模板路径&#39;)%&gt;</code></p>\n<ul>\n<li>模板继承</li>\n</ul>\n<p>将网站HTML骨架抽离到单独文件中，其他页面模板可以继承</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">!&lt;DOCTYPE HTML&gt;</span><br><span class=\"line\">&lt;html lang=&quot;en&quot;&gt;</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">\t&lt;meta charset=&quot;utf-8&quot;&gt;</span><br><span class=\"line\">\t&lt;title&gt;骨架模板&lt;/title&gt;</span><br><span class=\"line\">\t&#123;&#123;block &#x27;head&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">\t&#123;&#123;block &#x27;content&#x27;&#125;&#125; &#123;&#123;/block&#125;&#125;\t&lt;!--预留位置--&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br></pre></td></tr></table></figure>\n<p>模板继承</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123;&#123;extend &#x27;./test.art&#x27;&#125;&#125;</span><br><span class=\"line\">&#123;&#123;block &#x27;head&#x27;&#125;&#125; &lt;link rel=&quot;stylesheet&quot; href=&quot;test.css&quot;&gt; &#123;&#123;/block&#125;&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li><p>模板配置</p>\n<ol>\n<li>向模板中导入变量<code>template.default.imports.变量名=变量值(第三方模板的方法);</code>  在模板test.art中使用<code>&#123;&#123;dateFormat(time,'yyyy-mm-dd')&#125;&#125;</code></li>\n<li>设置模板根目录<code>template.defaults.root=模板目录</code></li>\n<li>设置模板默认后缀<code>template.defaults.extname=&#39;.art&#39;</code></li>\n</ol>\n</li>\n</ul>\n<h3 id=\"第三方模块router\"><a href=\"#第三方模块router\" class=\"headerlink\" title=\"第三方模块router\"></a>第三方模块router</h3><p>功能：实现路由<br>使用步骤：获取路由对象；调用路由对象提供的方法创建路由；启用路由；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const getRouter=require(&#x27;router&#x27;);</span><br><span class=\"line\">const router=getRounter();</span><br><span class=\"line\">router.get(&#x27;/add&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tres.end(&#x27;hello world!&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">router(req,res);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"第三方模块serve-static\"><a href=\"#第三方模块serve-static\" class=\"headerlink\" title=\"第三方模块serve-static\"></a>第三方模块serve-static</h3><p>功能：静态资源访问服务</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const serverStatic=require(&#x27;serve-static&#x27;);</span><br><span class=\"line\">const serve=serverStatic(&#x27;./pulic&#x27;);</span><br><span class=\"line\">serve.on(&#x27;request&#x27;,()=&gt;&#123;</span><br><span class=\"line\">serve(req,res);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">server.listen(3000);</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"第三方模块Express-框架\"><a href=\"#第三方模块Express-框架\" class=\"headerlink\" title=\"第三方模块Express 框架\"></a>第三方模块Express 框架</h3><p>基于node平台的web应用开发框架，可使用<code>npm install express</code>下载</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引用框架</span><br><span class=\"line\">const express=require(&#x27;express&#x27;);</span><br><span class=\"line\">//创建网站服务器</span><br><span class=\"line\">const app=express();</span><br><span class=\"line\"></span><br><span class=\"line\">//当客户端以get方式访问/时</span><br><span class=\"line\">app.get(&#x27;/&#x27;,(req.res)=&gt;&#123;</span><br><span class=\"line\">//获取get参数</span><br><span class=\"line\">console.log(req.query);</span><br><span class=\"line\">//响应:sen方法会自动设置http状态码，响应头部,类型</span><br><span class=\"line\">res.send(&#x27;hello!!!!&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//当客户端以post方式访问/add时</span><br><span class=\"line\">app.post(&#x27;/add&#x27;,(req.res)=&gt;&#123;</span><br><span class=\"line\">//获取post参数：需要第三方模块body-parser</span><br><span class=\"line\">console.log(req.body);</span><br><span class=\"line\">res.send(&#x27;hello!!!!&#x27;);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&#x27;server is runningn ...&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>第三方模块body-parser</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const bodyParser=require(&#x27;body-parser&#x27;);</span><br><span class=\"line\">//配置body-parser模块</span><br><span class=\"line\">app.use(bodyParser.urlencoded(&#123; extender: false &#125;));</span><br><span class=\"line\">//接收请求</span><br><span class=\"line\">app.post(&#x27;/add&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(req.body);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>构建模块化路由</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const express=require(&#x27;express&#x27;);</span><br><span class=\"line\">//创建路由对象</span><br><span class=\"line\">const home=express.Router();</span><br><span class=\"line\">//将路由和请求路径进行匹配</span><br><span class=\"line\">app.use(&#x27;/home&#x27;,home);</span><br><span class=\"line\">//在home路由下继续创建路由</span><br><span class=\"line\">home.get(&#x27;/index&#x27;,()=&gt;&#123;</span><br><span class=\"line\">// 响应/home/index</span><br><span class=\"line\">res.send(&#x27;welcome&#x27;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>参数路由</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//服务端</span><br><span class=\"line\">app.get(&#x27;/find/:id&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tconsole.log(req.params);\t//&#123;id:124&#125;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//客户端</span><br><span class=\"line\">localhost:3000/find/124</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>中间件:将客户端发来的请求进行拦截处理</li>\n</ul>\n<p>如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&#x27;请求地址&#x27;,&#x27;处理函数&#x27;);</span><br><span class=\"line\">app.post(&#x27;请求地址&#x27;,&#x27;处理函数&#x27;);</span><br></pre></td></tr></table></figure>\n<p>针对一个请求可设置多个中间件：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&#x27;/&#x27;,(req,res,next)=&gt;&#123;\t//next方法：该中间件处理后会将请求的控制权交给下一个中间件</span><br><span class=\"line\">req.name=&#x27;xiaoming&#x27;;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">console.log(req.name);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>app.use中间件用法</li>\n</ul>\n<p>会匹配所有的请求方法,直接传入请求处理函数代表接收所有请求</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use((req,res)=&gt;&#123;</span><br><span class=\"line\">console.log(req.url);</span><br><span class=\"line\">next();</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>用于错误处理</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&#x27;/index&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">\tthrow new Error(&#x27;程序发生未知错误&#x27;);\t//易出现错误的地方</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">app.use((err,req,res,next)=&gt;&#123;</span><br><span class=\"line\">\tres.status(500).send(err.message);\t//只能用于处理同步代码错误</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//异步代码错误需要手动触发错误</span><br><span class=\"line\">app.get(&#x27;/index&#x27;,(req,res,next)=&gt;&#123;</span><br><span class=\"line\">\tfs.readFile(&#x27;./test.c&#x27;,&#x27;utf-8&#x27;,(err,data)=&gt;&#123;</span><br><span class=\"line\">\tif(err)&#123;</span><br><span class=\"line\">\tnext(err);\t//易出现错误的地方</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;&#125;);</span><br><span class=\"line\">app.use((err,req,res,next)=&gt;&#123;</span><br><span class=\"line\">\tres.status(500).send(err.message);\t//只能用于处理同步代码错误</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>静态资源的处理</li>\n</ul>\n<p>通过express内置的express.static托管静态文件</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.use(express.static(&#x27;./pulic&#x27;));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>express模板引擎</li>\n</ul>\n<p>在原art-template模板引擎的基础上进行封装:<code>npm install art-template express-art-template</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//当渲染后缀为art的模板时，使用express-art-template</span><br><span class=\"line\">app.engine(&#x27;art&#x27;,require(&#x27;express-art-template&#x27;));</span><br><span class=\"line\">//设置模板存放目录</span><br><span class=\"line\">app.set(&#x27;views&#x27;,path.jon(__dirname,&#x27;views&#x27;));</span><br><span class=\"line\">//渲染模板时不写后缀，默认拼接art后缀</span><br><span class=\"line\">app.set(&#x27;view engine&#x27;,&#x27;art&#x27;);</span><br><span class=\"line\">//渲染模板</span><br><span class=\"line\">app.get(&#x27;/&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">res.render(&#x27;index&#x27;,&#123; mes:&#x27;模板数据&#x27;&#125;);</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>将变量设置到app.locals对象下，则所有的模板都可以获取到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.locals.users=[&#123;\t//users是自定义的</span><br><span class=\"line\">\tname: &#x27;xiaoming&#x27;,</span><br><span class=\"line\">\tage: 22</span><br><span class=\"line\">&#125;,&#123;</span><br><span class=\"line\">\tname: &#x27;xiaomei&#x27;,</span><br><span class=\"line\">\tage:20</span><br><span class=\"line\">&#125;]</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"第三方模块Gulp\"><a href=\"#第三方模块Gulp\" class=\"headerlink\" title=\"第三方模块Gulp\"></a>第三方模块Gulp</h3><p>功能：项目上线，HTML、CSS、JS文件压缩合并，语法转换（es6、less）</p>\n<p>使用：</p>\n<ul>\n<li>使用<code>npm install gulp</code>下载gulp库文件</li>\n<li>在项目根目录下建立gulpfile.js文件</li>\n<li>重构项目的文件夹结构src目录放置源代码文件，dist目录放置构建后文件</li>\n<li>在gulpfile.js文件中编写任务</li>\n<li>在命令行工具中执行gulp任务</li>\n</ul>\n<p>gulp提供的方法：</p>\n<ul>\n<li>gulp.src():获取任务要处理的文件</li>\n<li>gulp.dest():输出文件</li>\n<li>gulp.task():建立gulp任务</li>\n<li>gulp.watch():监控文件的变化</li>\n</ul>\n<p>gulp插件：</p>\n<ul>\n<li>gulp-htmlminn: html文件压缩</li>\n<li>gulp-csso:  css文件压缩</li>\n<li>gulp-babel: javascript语法转化</li>\n<li>gulp-less: less 语法转化</li>\n<li>gulp-uglify: 压缩混淆JavaScript</li>\n<li>gulp-file-include:公共文件包含</li>\n<li>browsersync:浏览器实时同步</li>\n</ul>\n<h2 id=\"HTTP协议\"><a href=\"#HTTP协议\" class=\"headerlink\" title=\"HTTP协议\"></a>HTTP协议</h2><p>超文本传输协议。规定了客户端（浏览器）与服务器（网站服务器）之间请求和应答的标准</p>\n<ul>\n<li>静态资源：服务器不需要处理，可以直接响应给客户端的资源，如：css，JavaScript，image文件</li>\n<li>动态资源：相同的请求地址，不同的响应资源</li>\n</ul>\n<h3 id=\"报文\"><a href=\"#报文\" class=\"headerlink\" title=\"报文\"></a>报文</h3><p>在HTTP请求和响应的过程中传递的数据块叫做报文</p>\n<ul>\n<li><p>请求报文</p>\n<ol>\n<li>请求方式：GET、POST</li>\n<li>请求地址</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">req.headers\t//请求报文</span><br><span class=\"line\">req.url\t\t//请求地址</span><br><span class=\"line\">req.method\t//请求方法</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>请求参数</li>\n</ol>\n<ul>\n<li><p>响应报文</p>\n<ol>\n<li>HTTP状态码： 200(请求成功)、400(客户端请求语法有误)、404(请求的资源未找到)、500(服务器错误)、</li>\n<li>内容类型：<ul>\n<li>text/html</li>\n<li>text/css</li>\n<li>application/javascript </li>\n<li>image/jpeg</li>\n<li>application/json</li>\n</ul>\n</li>\n</ol>\n</li>\n</ul>\n<h3 id=\"路由\"><a href=\"#路由\" class=\"headerlink\" title=\"路由\"></a>路由</h3><p>指客户端请求地址,如：<code>http://localhost:8080/index</code>与服务端程序代码的对应关系，即请求什么响应什么；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">//获取客户端的请求路径</span><br><span class=\"line\">let &#123;pathname&#125;=url.parse(req.url);</span><br><span class=\"line\">//或写成</span><br><span class=\"line\">//let pathname=url.parse(req.url).pathname;</span><br><span class=\"line\">if(pathname==&#x27;/&#x27;||pathname==&#x27;/index&#x27;)&#123;</span><br><span class=\"line\">res.end(&#x27;欢迎来到首页&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">res.end(&#x27;页面不存在&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"创建web服务器\"><a href=\"#创建web服务器\" class=\"headerlink\" title=\"创建web服务器\"></a>创建web服务器</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引用系统模块</span><br><span class=\"line\">const http =require(&#x27;http&#x27;);</span><br><span class=\"line\">//创建web服务器</span><br><span class=\"line\">const app = http.createServer();</span><br><span class=\"line\">//当客户端发送请求的时候</span><br><span class=\"line\">app.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">//响应</span><br><span class=\"line\"></span><br><span class=\"line\">res.end(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//返回状态码和返回资源类型,若无，低级浏览器可能出问题</span><br><span class=\"line\"></span><br><span class=\"line\">res.writeHead(400,&#123;&#x27;content-type&#x27;:&#x27;text/html;charset=utf8&#x27;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//监听端口</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&quot;Server is running....&quot;);</span><br></pre></td></tr></table></figure>\n\n\n<p>完善：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//引用系统模块</span><br><span class=\"line\">const http =require(&#x27;http&#x27;);</span><br><span class=\"line\">const url=require(&#x27;url&#x27;);\t//处理url地址模块</span><br><span class=\"line\">const querystring=require(&#x27;querystring&#x27;);\t//处理参数模块</span><br><span class=\"line\"></span><br><span class=\"line\">//创建web服务器</span><br><span class=\"line\">const app = http.createServer();</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//当客户端发送请求的时候</span><br><span class=\"line\">app.on(&#x27;request&#x27;,(req,res)=&gt;&#123;</span><br><span class=\"line\">//post参数是通过事件的方式接受的</span><br><span class=\"line\">//data当请求参数传递的时候发出data事件</span><br><span class=\"line\">//end当参数传递完成的时候时发出end事件</span><br><span class=\"line\">//获取POST参数需要使用data事件和end事件；</span><br><span class=\"line\">let postParams=&#x27;&#x27;;</span><br><span class=\"line\">req.on(&#x27;data&#x27;,(params)=&gt;&#123;</span><br><span class=\"line\">postParams+=params;\t//接收的数据不是一次性发完的</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">req.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class=\"line\">console.log(postParams);</span><br><span class=\"line\">console.log(querystring.parse(postParams));\t//将参数转换为对象格式</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//响应</span><br><span class=\"line\">res.end(&#x27;hello&#x27;);</span><br><span class=\"line\"></span><br><span class=\"line\">//返回状态码和相关信息</span><br><span class=\"line\"></span><br><span class=\"line\">res.writeHead(400,&#123;&#x27;content-type&#x27;:&#x27;text/html;charset=utf8&#x27;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//调用url模块方法parse();第一个参数为要处理的地址，第二个参数为是否处理为对象格式，true为是；</span><br><span class=\"line\">console.log(url.parse(res.url,true));</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">//监听端口</span><br><span class=\"line\">app.listen(3000);</span><br><span class=\"line\">console.log(&quot;Server is running....&quot;);</span><br></pre></td></tr></table></figure>\n\n\n<h2 id=\"Node-js异步编程\"><a href=\"#Node-js异步编程\" class=\"headerlink\" title=\"Node.js异步编程\"></a>Node.js异步编程</h2><h4 id=\"同步api-当前api执行完成后，才能继续执行下一个api-同步代码执行完后才开始执行异步代码，再执行回调函数\"><a href=\"#同步api-当前api执行完成后，才能继续执行下一个api-同步代码执行完后才开始执行异步代码，再执行回调函数\" class=\"headerlink\" title=\"同步api:当前api执行完成后，才能继续执行下一个api;同步代码执行完后才开始执行异步代码，再执行回调函数\"></a>同步api:当前api执行完成后，才能继续执行下一个api;同步代码执行完后才开始执行异步代码，再执行回调函数</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//同步api可以从返回值中拿到api执行结果，而异步api不行</span><br><span class=\"line\"></span><br><span class=\"line\">funciotn sum(x,y)&#123;</span><br><span class=\"line\">return x+y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">const re=sum(2,1);</span><br><span class=\"line\"></span><br><span class=\"line\">//异步</span><br><span class=\"line\">function getMsg()&#123;</span><br><span class=\"line\">setTimeout(function()&#123;</span><br><span class=\"line\">return &#123;msg:&#x27;hello&#x27;&#125;,1000);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">const res=getMsg();\t//undefined</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h4 id=\"异步api-当前api的执行，不会阻塞后续代码的执行-异步api通过回调函数获取返回值；\"><a href=\"#异步api-当前api的执行，不会阻塞后续代码的执行-异步api通过回调函数获取返回值；\" class=\"headerlink\" title=\"异步api:当前api的执行，不会阻塞后续代码的执行;异步api通过回调函数获取返回值；\"></a>异步api:当前api的执行，不会阻塞后续代码的执行;异步api通过回调函数获取返回值；</h4><ul>\n<li>回调函数：自己定义函数让别人去调用</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function getData(callback)&#123;</span><br><span class=\"line\">callback(&#x27;XiaoMing&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">getData(function(n)&#123; console.log(&#x27;hello&#x27;+n);&#125;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>promise解决回调地狱问题</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ler promise=new Promise((resolve,reject)=&gt;&#123;</span><br><span class=\"line\">setTimeout(()=&gt;&#123;</span><br><span class=\"line\">if(true)&#123;</span><br><span class=\"line\">resolve(&#123;name:&#x27;xiaoming&#x27;&#125;);</span><br><span class=\"line\">&#125;else&#123;</span><br><span class=\"line\">reject(&#x27;error&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;,2000);</span><br><span class=\"line\">&#125;):</span><br><span class=\"line\">promise.then(result=&gt;console.log(result);//&#123;name:&#x27;xioaming&#x27;&#125;).catch(error=&gt;console.log(error);//error);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>异步函数：终极方案，让异步代码写成同步代码形式，让代码不再有回调函数嵌套</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//在普通函数定义前加上async关键字</span><br><span class=\"line\">//异步函数默认返回的时promise对象</span><br><span class=\"line\">//在异步函数使用throw关键字进行错误抛出，之后的代码将不会执行</span><br><span class=\"line\">const fn=async()=&gt;&#123;&#125;;</span><br><span class=\"line\">async function fn()&#123;</span><br><span class=\"line\">throw &#x27;error&#x27;;</span><br><span class=\"line\"></span><br><span class=\"line\">return ok;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(fn());</span><br><span class=\"line\">fn().then(function(data)&#123;</span><br><span class=\"line\">console.log(data);</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\"></span><br><span class=\"line\">//awaite关键字只能出现在异步函数中</span><br><span class=\"line\">//awaite promise对象； 暂停异步函数的执行，等待promise对象返回结果后在向下执行</span><br><span class=\"line\">async function run()&#123;</span><br><span class=\"line\">await p1();</span><br><span class=\"line\">await p2();</span><br><span class=\"line\">await p3();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<p>返回promise对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//使用util模块的promisify方法</span><br><span class=\"line\">const fs=require(&#x27;fs&#x27;);</span><br><span class=\"line\">const promisify=require(&#x27;util&#x27;).promisify;</span><br><span class=\"line\">const readFile=pronisify(fs.readFile);</span><br><span class=\"line\">async function run()&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">let r1=awaite readFile(&#x27;./1.txt&#x27;,&#x27;utf8&#x27;);</span><br><span class=\"line\">let r2=awaite readFile(&#x27;./2.txt&#x27;,&#x27;utf8&#x27;);</span><br><span class=\"line\">console.log(r1,r2);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">run();</span><br></pre></td></tr></table></figure>\n\n<p>捕获错误:</p>\n<p><code>try catch</code>可以捕获异步函数以及其他同步代码在执行过程中发生的错误，但不能捕获其他类型api发生的错误。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">app.get(&#x27;/&#x27;,async(req,res,next)=&gt;&#123;</span><br><span class=\"line\">try&#123;</span><br><span class=\"line\">await User.fid(&#123;name:&#x27;xiaoming&#x27;&#125;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">catch(er)&#123;</span><br><span class=\"line\">next(er);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;);</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h2 id=\"全局对象global\"><a href=\"#全局对象global\" class=\"headerlink\" title=\"全局对象global\"></a>全局对象global</h2><p>在浏览器中全局对象时window,在node中全局对象是global</p>\n<p>Node中的全局对象有以下方法，可省略global：<code>console.log()</code>,<code>setTimeout()</code>,clearEimeout()<code>,</code>setInternal()<code>,</code>clearInterval`</p>\n<h2 id=\"数据库\"><a href=\"#数据库\" class=\"headerlink\" title=\"数据库\"></a>数据库</h2><p>存储数据的仓库：mysql、MongoDB、Oracle</p>\n<p>相关概念：</p>\n<table>\n<thead>\n<tr>\n<th>术语</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>database</td>\n<td>数据仓库,可建立多个数据库</td>\n</tr>\n<tr>\n<td>collection</td>\n<td>集合，一组数据的集合</td>\n</tr>\n<tr>\n<td>document</td>\n<td>文档，一条具体的数据</td>\n</tr>\n<tr>\n<td>field</td>\n<td>字段,文档中的属性名称</td>\n</tr>\n</tbody></table>\n<h3 id=\"第三方包Mongoose\"><a href=\"#第三方包Mongoose\" class=\"headerlink\" title=\"第三方包Mongoose\"></a>第三方包Mongoose</h3><p>使用node.js操作MongoDB数据库,下载<code>npm install mongoose</code></p>\n<ul>\n<li>数据库的连接</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const mongoose=require(&#x27;mongoose&#x27;);</span><br><span class=\"line\">mongoose.connect(&#x27;mongodb://localhost/test&#x27;)</span><br><span class=\"line\">.then(()=&gt;console.log(&#x27;数据库连接成功&#x27;))</span><br><span class=\"line\">.catch(err=&gt;console.log(&#x27;fail!&#x27;,err));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>创建数据库</li>\n</ul>\n<p>在MongoDB中不需要显示创建数据库，如果使用的数据库不存在，MongoDB会自动创建。</p>\n<h4 id=\"MongoDB增删查改操作\"><a href=\"#MongoDB增删查改操作\" class=\"headerlink\" title=\"MongoDB增删查改操作\"></a>MongoDB增删查改操作</h4><ul>\n<li>创建集合</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//对集合设定规则</span><br><span class=\"line\">const courseSchema= new mongoose.Schema(&#123;</span><br><span class=\"line\">name: String,</span><br><span class=\"line\">author: String,</span><br><span class=\"line\">isPublished: Boolean</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//创建集合并合并规则</span><br><span class=\"line\">const Course=mongoose.model(&#x27;Course&#x27;,courseSchema);//返回构造函数</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>创建文档</li>\n</ul>\n<p>即向集合中插入元素</p>\n<p>第一种方法:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//创建集合实例</span><br><span class=\"line\">const course=new Course(&#123;</span><br><span class=\"line\">name: &#x27;tset&#x27;,</span><br><span class=\"line\">author: &#x27;xiaoming&#x27;</span><br><span class=\"line\">isPubulished: true</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">//保存数据</span><br><span class=\"line\">course.save();</span><br></pre></td></tr></table></figure>\n\n<p>第二种方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Course.create(&#123;</span><br><span class=\"line\">name: &#x27;tset&#x27;,</span><br><span class=\"line\">author: &#x27;xiaoming&#x27;</span><br><span class=\"line\">isPubulished: true</span><br><span class=\"line\">&#125;,</span><br><span class=\"line\">(err,doc)=&gt;&#123;</span><br><span class=\"line\">//错误对象</span><br><span class=\"line\">console.log(err);</span><br><span class=\"line\">//当前文档</span><br><span class=\"line\">console.log(doc);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">);</span><br><span class=\"line\"></span><br><span class=\"line\">//create返回的也是promise对象</span><br><span class=\"line\">Course.create(&#123;</span><br><span class=\"line\">name: &#x27;tset&#x27;,</span><br><span class=\"line\">author: &#x27;xiaoming&#x27;</span><br><span class=\"line\">isPubulished: true</span><br><span class=\"line\">&#125;).then(doc=&gt;console.log(doc)).catch(err=&gt;console.log(err));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mongoose验证</li>\n</ul>\n<p>在创建集合规则时，可以设置当前字段的验证规则，验证失败则输入插入失败</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const postSchema=new mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle:&#123;</span><br><span class=\"line\">\t\ttype: String,\t\t//字段类型</span><br><span class=\"line\">\t\trequired: true\t\t//true时代表该字段必填,不能为空</span><br><span class=\"line\">\t\tdefault: &#x27;默认title&#x27;\t//默认值</span><br><span class=\"line\">\t\tvalidate:&#123;\t\t//自定义验证器</span><br><span class=\"line\">\t\tvalidator: v=&gt;&#123;</span><br><span class=\"line\">\t\t\t//返回布尔值，true代表验证成功</span><br><span class=\"line\">\t\t\t//v要验证的值</span><br><span class=\"line\">\t\t\treturn v.length&gt;4</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t\tmasseage: &#x27;error!!!!!&#x27;;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tauthod:&#123;</span><br><span class=\"line\">\t\ttype: String,\t\t//字段类型</span><br><span class=\"line\">\t\ttrim:true\t//自动去除字符串两边的空格</span><br><span class=\"line\">\t\trequired: [true,&#x27;错误信息&#x27;],\t//自定义错误信息</span><br><span class=\"line\">\t\tminlength: 2,\t\t//字符串最小长度</span><br><span class=\"line\">\t\tmaxlength: [10,&#x27;长度错误&#x27;],\t\t//字符串最大长度</span><br><span class=\"line\">\t\t</span><br><span class=\"line\">\t\t&#125;,</span><br><span class=\"line\">\tage:&#123;</span><br><span class=\"line\">\t\ttype: Number,</span><br><span class=\"line\">\t\tmin: 2,\t\t//数值的最小值</span><br><span class=\"line\">\t\tmax: 100\t//数值的最大值\t</span><br><span class=\"line\">\t&#125;,</span><br><span class=\"line\">\tcategory:&#123;</span><br><span class=\"line\">\t\ttype:String,</span><br><span class=\"line\">\t\tenum:[&#x27;html&#x27;,&#x27;css&#x27;,&#x27;js&#x27;]\t\t//枚举,输入的值必须在其中,否则报错</span><br><span class=\"line\">\t\t/*</span><br><span class=\"line\">\t\tenum:&#123;</span><br><span class=\"line\">\t\t\tvalues: [&#x27;html&#x27;,&#x27;css&#x27;,&#x27;js&#x27;],\t\t</span><br><span class=\"line\">\t\t\tmessage: &#x27;error message&#x27;</span><br><span class=\"line\">\t\t&#125;</span><br><span class=\"line\">\t\t*/</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">const Post=mongoose.model(&#x27;Post&#x27;,postSchema);</span><br><span class=\"line\">post.create(&#123;&#125;).then(re=&gt;console.log(re)).catch(err=&gt;console.log(err));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>集合关联</p>\n<ol>\n<li>使用id对集合进行关联</li>\n<li>使用populate方法进行关联集合查询<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//用户集合</span><br><span class=\"line\">const User=mongoose.model(&#x27;User&#x27;,new mongoose.Schema(&#123;name:&#123;type: String&#125;&#125;));</span><br><span class=\"line\">//文章集合</span><br><span class=\"line\">const Post=mongoose.model(&#x27;Post&#x27;,new mongoose.Schema(&#123;</span><br><span class=\"line\">\ttitle:&#123;type: String&#125;,</span><br><span class=\"line\">//使用id将文章集合和作者集合进行关联</span><br><span class=\"line\">\tauthor:&#123;type: mongoose.Schema.Types.ObjectId, ref: &#x27;User&#x27;&#125;</span><br><span class=\"line\">&#125;)):</span><br><span class=\"line\"></span><br><span class=\"line\">//联合查询</span><br><span class=\"line\">Post.find().populate(&#x27;author&#x27;).then((err,result)=&gt;console.log(result));</span><br></pre></td></tr></table></figure></li>\n</ol>\n</li>\n<li><p>导入数据</p>\n</li>\n</ul>\n<p>shell 命令：<code>mongoimport -d 数据库名称 -c 集合名称 -file 要导入的数据文件（josn格式）</code></p>\n<ul>\n<li>查询文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//根据条件查询文档，若为空则查询所有文档</span><br><span class=\"line\">Course.find().then(result=&gt;console.log(result));\t//返回的是文档的集合数组</span><br><span class=\"line\"></span><br><span class=\"line\">//实例</span><br><span class=\"line\">Course.find(&#123;name:&#x27;xiaoming&#x27;&#125;).then(result=&gt;console.log(result));</span><br><span class=\"line\">User.find(&#123;age:&#123;$gt:20,$lt:50&#125;&#125;).then(result=&gt;console.log(result));\t//查询大于20小于50</span><br><span class=\"line\">User.find(&#123;hobbies:&#123;$in:[&#x27;运动&#x27;]&#125;&#125;).then(result=&gt;console.log(result));\t//查询包含运动的</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//只查询一条数据</span><br><span class=\"line\">Course.findOne(&#123;name:&#x27;xiaoming&#x27;&#125;).then(result=&gt;console.log(result));\t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//选择要查询的字段</span><br><span class=\"line\">User.find().select(&#x27;name age -_id&#x27;).then(result=&gt;console.log(result)).catch(err=&gt;console.log(err));\t//只返回查询的字段，不查询的字段前加-</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//将查询出来的数据进行升序排序(从小到大）</span><br><span class=\"line\">User.find().sort(&#x27;age&#x27;).then(result=&gt;console.log(result));\t</span><br><span class=\"line\"></span><br><span class=\"line\">//将查询出来的数据进行降序排序(从大到小）</span><br><span class=\"line\">User.find().sort(&#x27;-age&#x27;).then(result=&gt;console.log(result));\t</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//skip跳过多条数据，limit限制查询数量</span><br><span class=\"line\">User.find().skip(2).limit(2).then(result=&gt;console.log(result));\t\t//分页查询时常用</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除第一个文档</span><br><span class=\"line\">Course.findOndeAndDelete(&#123;&#125;).then(result=&gt;console.log(result));\t\t//返回删除的文档</span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除多个文档</span><br><span class=\"line\">User.deleteMany(&#123;&#125;).then(result=&gt;console.log(result));</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>更新文档</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新单个</span><br><span class=\"line\">User.updateOne(&#123;查询条件&#125;,&#123;要修改的值&#125;).then(re=&gt;console.log(re));</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//更新多个</span><br><span class=\"line\">User.updateMany(&#123;查询条件&#125;,&#123;要修改的值&#125;).then(re=&gt;console.log(re));</span><br></pre></td></tr></table></figure>\n\n\n<h5 id=\"综合案例\"><a href=\"#综合案例\" class=\"headerlink\" title=\"综合案例\"></a>综合案例</h5><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//301代表重定向</span><br><span class=\"line\">//location 跳转地址</span><br><span class=\"line\">req.on(&#x27;end&#x27;,()=&gt;&#123;</span><br><span class=\"line\">res.writeHead(301,&#123;</span><br><span class=\"line\">Location: &#x27;/list&#x27;</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\">res.end();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n\n\n\n\n<p><code>npm i nodemon -g </code><br><code>nodemon test.js</code></p>\n","categories":[],"tags":[]},{"title":"windows实用工具","url":"http://www.baidu.com/2020/11/11/windows_tools/","content":"<h1 id=\"window10实用软件\"><a href=\"#window10实用软件\" class=\"headerlink\" title=\"window10实用软件\"></a>window10实用软件</h1><hr>\n<h3 id=\"internet-download-manager\"><a href=\"#internet-download-manager\" class=\"headerlink\" title=\"internet download manager\"></a>internet download manager</h3><hr>\n<h3 id=\"PowerToys\"><a href=\"#PowerToys\" class=\"headerlink\" title=\"PowerToys\"></a>PowerToys</h3><p>是一款实用工具的集合，它并不是新事物，Windows 95就曾有过这款工具，只是Windows在原来的启发之下开发了这款针对Window 10系统更加高效的版本。<br>目前PowerToys包括如下7项功能，每一项都非常实用，它们分别是：</p>\n<ul>\n<li>FancyZones</li>\n<li>File Explorer Add-ons</li>\n<li>Image Resizer</li>\n<li>Keyboard Manager</li>\n<li>PowerRename</li>\n<li>PowerToys Run</li>\n<li>Shortcut Guide</li>\n</ul>\n<hr>\n<h3 id=\"snipaster截图工具\"><a href=\"#snipaster截图工具\" class=\"headerlink\" title=\"snipaster截图工具\"></a>snipaster截图工具</h3>","categories":["tool"],"tags":[]},{"title":"数据结构","url":"http://www.baidu.com/2020/11/11/shujujiegou/","content":"<h1 id=\"数据结构\"><a href=\"#数据结构\" class=\"headerlink\" title=\"数据结构\"></a>数据结构</h1><h3 id=\"算法时间复杂度\"><a href=\"#算法时间复杂度\" class=\"headerlink\" title=\"算法时间复杂度\"></a>算法时间复杂度</h3><p>T(n)=O(f(n))</p>\n<ol>\n<li>用常数1取代运行时间中的所有加法常数，如多条pintf语句只运行1次即O(1)</li>\n<li>在修改后的运行次数函数中，只保留最高项</li>\n<li>如果最高项不是1，则去除最高项的常数如3n^2即O(n^2)</li>\n</ol>\n<p>所耗时间<code>O(1)&lt;O(logn)&lt;O(n)&lt;O(nlogn)&lt;O(n^2)&lt;O(2^n)&lt;O(n!)&lt;O(n^n)</code></p>\n<h3 id=\"线性表\"><a href=\"#线性表\" class=\"headerlink\" title=\"线性表\"></a>线性表</h3><p>由零个或多个数据元素组成的有限序列</p>\n<p>[a1][a2]…[ai-1][ai][ai+1]….[an]<br>[ai-1]为[ai]的直接前驱元素<br>[ai+1]为[ai]的直接后继元素<br>每个元素有且只有一个前驱和后继元素，不存在一对多</p>\n<p>抽象数据类型的形式定义</p>\n<p>ADT=(D,S,P)</p>\n<p>描述方法（伪码）：</p>\n<p>ADT 抽象数据类型名{</p>\n<p>数据对象：&lt;数据对象的定义&gt;</p>\n<p>数据关系：&lt;数据关系的定义&gt;</p>\n<p>基本操作：&lt;基本操作的定义&gt;</p>\n<p>}ADT 抽象数据类型名</p>\n<p>抽象数据类型的实现</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define TRUE 1</span><br><span class=\"line\">#define FALSE 0</span><br><span class=\"line\">#define OK 1</span><br><span class=\"line\">#define ERROR 0</span><br><span class=\"line\">#define INFEASIBLE -1</span><br><span class=\"line\">#define OVERFLOW -2</span><br><span class=\"line\">//Status是函数的类型，其值是函数结果的状态代码</span><br><span class=\"line\">typedef int Status;</span><br><span class=\"line\">Status 函数名&#123;</span><br><span class=\"line\">//算法说明</span><br><span class=\"line\">语句序列;</span><br><span class=\"line\">&#125;//函数名</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ADT List&#123;</span><br><span class=\"line\">\t数据对象：D=&#123;ai|ai∈ElemSet,i=1,2,...,n,n≥0&#125;</span><br><span class=\"line\">\t数据关系：R1=&#123;&lt;ai-1,ai&gt;|ai-1,ai∈D,i=2,3,4,...,n&#125;</span><br><span class=\"line\">\t基本操作：</span><br><span class=\"line\">\tInitList(&amp;L)</span><br><span class=\"line\">\t\t操作结果：构造一个空的线性表L。</span><br><span class=\"line\">\tDestroyList(&amp;L)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：销毁线性表L。</span><br><span class=\"line\">\tClearList(&amp;L)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：将L重置为空表。</span><br><span class=\"line\">\tListEmpty (L)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：若L为空表，则返回TRUE，否则返回FALSE。</span><br><span class=\"line\">\tListLength(L)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：返回L中数据元素的个数。</span><br><span class=\"line\">\tGetElem(L,i,&amp;e)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在，l≤i≤ListLength(L)。</span><br><span class=\"line\">\t\t操作结果：用e返回L中第i个数据元素的值。</span><br><span class=\"line\">\tLocateElem(L,e,compare())</span><br><span class=\"line\">\t\t初始条件：线性表L已存在，compare()是数据元素的判定函数。</span><br><span class=\"line\">\t\t操作结果：用e返回L中第1个与e满足关系compare()的数据元素的位序。若这样的数据元素不存在，则返回值为0。</span><br><span class=\"line\">\tPriorElem(L,cur_e,&amp;pre_e)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：若cur_e是L的数据元素，且不是第一个，则用pre_e返回它的前驱，否则操作失败，pre_e无定义。</span><br><span class=\"line\">\tNextElem(L,cur_e,&amp;next_e)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：若cur_e是L的数据元素，且不是最后一个，则用next_e返回它的前驱，否则操作失败，next_e无定义。</span><br><span class=\"line\">\tListInsert(&amp;L,i,e)</span><br><span class=\"line\">\t\t初始条件：线性表L已存在，l≤i≤ListLength(L)+1。</span><br><span class=\"line\">\t\t操作结果：在L中第i个位置之前插入新的数据元素e，L的长度加1.</span><br><span class=\"line\">\tListDelete(&amp;L,i,&amp;e)</span><br><span class=\"line\">\t\t初始条件；线性表L已存在且非空，l≤i≤ListLength(L)。</span><br><span class=\"line\">\t\t操作结果：删除L中第i个数据元素，并用e返回其值，L长度减1.</span><br><span class=\"line\">\tListTraverse(L,visit())</span><br><span class=\"line\">\t\t初始条件：线性表L已存在。</span><br><span class=\"line\">\t\t操作结果：依次对L的每个数据元素调用函数visit()。一旦visit()失败，则操作失败。</span><br><span class=\"line\">&#125;ADT List</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"顺序存取\"><a href=\"#顺序存取\" class=\"headerlink\" title=\"顺序存取\"></a>顺序存取</h3><p>数组</p>\n<h3 id=\"链式存取\"><a href=\"#链式存取\" class=\"headerlink\" title=\"链式存取\"></a>链式存取</h3><ul>\n<li>单链表整表创建的算法思路：</li>\n</ul>\n<ol>\n<li>声明一个结点p和计数器变量n；</li>\n<li>初始化一空链表L；</li>\n<li>让L的头结点的指针指向NULL；</li>\n<li>循环实现后继结点的赋值和插入；</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">\t</span><br><span class=\"line\">typedef int DataType;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct LNode&#123;</span><br><span class=\"line\">\tDataType data;\t\t//数据域</span><br><span class=\"line\">\tstruct LNode *next;\t//指针域，指向下一个节点</span><br><span class=\"line\">&#125;LNode,*LinkList;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建///</span><br><span class=\"line\">//声明函数</span><br><span class=\"line\">LinkList CreateList(int n);\t//创建链表</span><br><span class=\"line\">void print(LinkList h);\t\t//打印链表</span><br><span class=\"line\"></span><br><span class=\"line\">//创建链表</span><br><span class=\"line\">LinkList CreateList(int n)&#123;</span><br><span class=\"line\">\t//定义指针L指向该链表即头指针，结点q为第一个结点，结点p为下一个结点</span><br><span class=\"line\">\tLinkList L,p,q;</span><br><span class=\"line\">\t//为头指针申请空间</span><br><span class=\"line\">\tL=(LNode*)malloc(sizeof(LNode));</span><br><span class=\"line\">\tif(!L)&#123;return 0;&#125;</span><br><span class=\"line\">\t//头指针指向NULL即空链表</span><br><span class=\"line\">\tL-&gt;next =NULL;</span><br><span class=\"line\">\t//第一个结点指向头指针</span><br><span class=\"line\">\tq=L;</span><br><span class=\"line\">\t//循环创建链表结点</span><br><span class=\"line\">\tfor(int i=0;i&lt;n;i++)&#123;</span><br><span class=\"line\">\t\t//为下一个结点申请空间</span><br><span class=\"line\">\t\tp=(LinkList)malloc(sizeof(LNode));</span><br><span class=\"line\">\t\tprintf(&quot;输入第%d个元素的值：&quot;,i);</span><br><span class=\"line\">\t\t//存入数据</span><br><span class=\"line\">\t\tscanf(&quot;%d&quot;,&amp;(p-&gt;data));</span><br><span class=\"line\">\t\t//下一个结点的指针指向NULL，即尾部</span><br><span class=\"line\">\t\tp-&gt;next=NULL;</span><br><span class=\"line\">\t\t//第一个结点的指针指向下一个结点,即上一个结点与该结点相连</span><br><span class=\"line\">\t\tq-&gt;next=p;</span><br><span class=\"line\">\t\t//移动第一个结点到下一个结点</span><br><span class=\"line\">\t\tq=p;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">\t//返回链表头部</span><br><span class=\"line\">\treturn L;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//打印链表</span><br><span class=\"line\">void print (LinkList h)&#123;</span><br><span class=\"line\">\t//创建一个指针指向链表的第一个元素结点；</span><br><span class=\"line\">\tLinkList p=h-&gt;next;</span><br><span class=\"line\">\t//当不是尾部时</span><br><span class=\"line\">\twhile(p!=NULL)&#123;</span><br><span class=\"line\">\t//打印数据</span><br><span class=\"line\">\tprintf(&quot;%d &quot;,p-&gt;data);</span><br><span class=\"line\">\t//移动到下一个元素</span><br><span class=\"line\">\tp=p-&gt;next;</span><br><span class=\"line\">\t&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main ()&#123;</span><br><span class=\"line\">\t//创建一个头指针并指向NULL；即空链表·</span><br><span class=\"line\">\tLinkList head=NULL;</span><br><span class=\"line\">\t//输入结点个数n</span><br><span class=\"line\">\tint n;</span><br><span class=\"line\">\tprintf(&quot;请输入链表长度：&quot;);</span><br><span class=\"line\">\tscanf(&quot;%d&quot;,&amp;n);</span><br><span class=\"line\">\t//创建链表</span><br><span class=\"line\">\thead=CreateList(n);</span><br><span class=\"line\">\t//打印链表</span><br><span class=\"line\">\tprintf(&quot;刚刚建立的各个链表元素的值为:\\n&quot;);</span><br><span class=\"line\">\tprint(head);</span><br><span class=\"line\">\tprintf(&quot;\\n\\n&quot;);</span><br><span class=\"line\">\t//按下任意键结束</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\tgetchar();</span><br><span class=\"line\">\treturn 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单链表整表的删除算法思路：</li>\n</ul>\n<ol>\n<li>声明结点p和q；</li>\n<li>将第一个接地赋值给p，下一个结点赋值给q；</li>\n<li>循环执行释放p和将q赋值给p的操作；free(p)会同时把数据域和指针域同时删除<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//h为头指针</span><br><span class=\"line\">void delect(LinkList h)&#123;</span><br><span class=\"line\">LinkList p,q;</span><br><span class=\"line\">p=h-&gt;next;\t//p指向第一个节点</span><br><span class=\"line\">while(p!=NULL)&#123;</span><br><span class=\"line\">q=p-&gt;next;\t//q指向第二个节点</span><br><span class=\"line\">free(p);\t//删除第一个节点</span><br><span class=\"line\">p=q;\t\t//p等于第二个节点</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">h-&gt;next==NULL;\t//头节点指向空</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>获取第i个数据的算法思路：</li>\n</ul>\n<ol>\n<li>声明一个结点p指向链表第一个结点，初始化j从1开始；</li>\n<li>当j&lt;i时,就遍历链表，让p的指针向后移动，不断指向下一个结点，j+1；</li>\n<li>若到链表末尾p为空，则说明第i个元素不存在；</li>\n<li>若查找成功则返回结点p的数据；</li>\n</ol>\n<ul>\n<li>单链表第i个数据插入结点的算法思路：</li>\n</ul>\n<ol>\n<li>将数据元素e赋值给s-&gt;data即s-&gt;data=e;</li>\n<li>s-next=p-&gt;next;</li>\n<li>p-next=s;</li>\n</ol>\n<ul>\n<li>单链表的删除</li>\n</ul>\n<ol>\n<li>p-&gt;next=p-&gt;next-&gt;next;</li>\n</ol>\n<p>头指针不为空，头指针是链表的必要元素，头指针是链表指向第一个节点的指针。头结点在第一个元素的节点前，其数据一般无意义，但也可用来存放链表的长度。空链表头指针直接指向null</p>\n<h3 id=\"循环链表\"><a href=\"#循环链表\" class=\"headerlink\" title=\"循环链表\"></a>循环链表</h3><p>尾指针指向头指针</p>\n<h3 id=\"双向链表\"><a href=\"#双向链表\" class=\"headerlink\" title=\"双向链表\"></a>双向链表</h3><p>结构：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct DualNode&#123;</span><br><span class=\"line\">int data;</span><br><span class=\"line\">struct DualNode *prior; \t//前驱节点</span><br><span class=\"line\">struct DualNode *next;\t\t//后继节点</span><br><span class=\"line\">&#125;DualNode,*DuLinkList;</span><br></pre></td></tr></table></figure>\n<p>插入操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//s为插入节点，p为后一个节点；</span><br><span class=\"line\">s-&gt;next=p;</span><br><span class=\"line\">s-&gt;prior=p-&gt;prior;</span><br><span class=\"line\">p-&gt;prior-next=s;</span><br><span class=\"line\">p-&gt;prior=s;</span><br></pre></td></tr></table></figure>\n<p>删除操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//删除p节点</span><br><span class=\"line\">p-&gt;prior-&gt;next=p-&gt;next;</span><br><span class=\"line\">p-&gt;next-&gt;prior=p-&gt;prior;</span><br><span class=\"line\">free(p);</span><br></pre></td></tr></table></figure>\n<h3 id=\"静态链表\"><a href=\"#静态链表\" class=\"headerlink\" title=\"静态链表\"></a>静态链表</h3><p>用数组描述的链表称为静态链表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define maxsize 1000</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">int  data;//数据</span><br><span class=\"line\">int cut;//游标</span><br><span class=\"line\">&#125;component,staticlinklist[maxsize];\t//结构体数组</span><br><span class=\"line\">//静态链表的初始化，相当于初始化数组:</span><br><span class=\"line\">Status InitList(staticlinklist space)&#123;</span><br><span class=\"line\">int i;</span><br><span class=\"line\">for(i=0;i&lt;maxsize-1;i++)</span><br><span class=\"line\">&#123;space[i].cur=i+1;&#125;</span><br><span class=\"line\">space[maxsize-1].cur=0;</span><br><span class=\"line\">return Ok;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//第一个与最后一个元素不存放数据,最后一个元素的游标为0。数组的第一个元素即下标为0的那个元素的cur游标就存放备用链表的第一个结点的下标；最后一个元素即maxsize-1的游标cur则存放第一个有数据的元素的下标，相当于单链表中的头结点作用。 </span><br><span class=\"line\">//静态链表中的插入和删除，只需修改游标</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"栈\"><a href=\"#栈\" class=\"headerlink\" title=\"栈\"></a>栈</h3><p>是一个先进后出的线性表，要求只在表尾进行删除和插入操作；对与栈来说，表尾称为栈的栈顶top,表头称为栈底bottom.<br>结构:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">int *bottom;\t//指向栈底的指针；</span><br><span class=\"line\">int *top;</span><br><span class=\"line\">int stacksize;\t//指当前可使用的最大总量。</span><br><span class=\"line\">&#125;sqStack;</span><br></pre></td></tr></table></figure>\n<p>创建一个栈：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define STACK_INIT_SIZE 100</span><br><span class=\"line\">initStack(sqStack *s)&#123;</span><br><span class=\"line\">s-&gt;bottom=(int*)malloc(STACK_INIT_SIZE*sizeof(int));</span><br><span class=\"line\">if(!s-&gt;base)&#123;exit(0);&#125;</span><br><span class=\"line\">s-&gt;top=s-&gt;base;\t\t//开始栈顶就是栈底</span><br><span class=\"line\">s-&gt;stacksize=STACK_INIT_SIZE;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//初始化</span><br><span class=\"line\">void initstack(sqStack *s)&#123;</span><br><span class=\"line\">s-&gt;bottom=(int*)malloc(STACK_INIT_SIZE*sizeof(int));</span><br><span class=\"line\">if(!s-bottom)&#123;exit(0);&#125;</span><br><span class=\"line\">s-&gt;top=s-&gt;bottom;</span><br><span class=\"line\">s-&gt;stacksize=STACK_INIT_SIZE;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>入栈操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define STACKINCREMENT 10</span><br><span class=\"line\">push(sqStack *s,int e);</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">//栈满追加空间</span><br><span class=\"line\">if (s-&gt;top - s-&gt;bottom==s-&gt;stacksize) &#123;</span><br><span class=\"line\">s-&gt;bottom=(int*)realloc(s-&gt;bottom,(s-&gt;stacksize+STACKINCREMENT)*sizeof(int));</span><br><span class=\"line\">if(!s-&gt;bottom)&#123;exit(0);&#125;</span><br><span class=\"line\">s-&gt;top=s-&gt;bottom+s-&gt;stacksize;\t\t\t//设置栈顶</span><br><span class=\"line\">s-&gt;stacksize=s-&gt;stacksize+STACKINCREMENT;\t//重新设置栈的最大容量</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">*(s-&gt;top)=e;</span><br><span class=\"line\">s-&gt;top++;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>出栈操作：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">pop(sqStack *s, int *e)&#123;</span><br><span class=\"line\">if(s-&gt;top==s-&gt;base)&#123;rerutn;&#125;\t//栈空退出；</span><br><span class=\"line\">*e=*--(s-&gt;top);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>清空栈：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">clearsqstack(sqStack *s)&#123;</span><br><span class=\"line\">s-&gt;top=s-&gt;bottom;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>销毁一个栈：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">destroystack(sqStack *s)&#123;</span><br><span class=\"line\">int i,len;</span><br><span class=\"line\">len=s-&gt;stacksize;</span><br><span class=\"line\">for(i=0;i&lt;len;i++)&#123;</span><br><span class=\"line\">free(s-&gt;bottom);</span><br><span class=\"line\">s-&gt;bottom++;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">s-&gt;bottom=s-&gt;top=NULL;</span><br><span class=\"line\">s-&gt;stacksize=0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>计算栈容量：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int stacklen(sqStack *s)&#123;</span><br><span class=\"line\">return(s.top-s.bottom);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>栈的存储结构：<br>顺序存储<br>链式存储：栈顶为单链表的头部</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct stackNode&#123;</span><br><span class=\"line\">ElemType data;\t\t//存放栈的数据</span><br><span class=\"line\">struct stackNode *next;</span><br><span class=\"line\">&#125;stackNode,*LinkStackPtr;</span><br><span class=\"line\">typedef strucct LinkStack&#123;</span><br><span class=\"line\">LinkStackPtr top;\t//top指针</span><br><span class=\"line\">int count;\t\t//计数器</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//栈链的进栈</span><br><span class=\"line\">//s为新节点，top为栈顶指针；</span><br><span class=\"line\">Status push(LinkStack *s,ElemType e)&#123;</span><br><span class=\"line\">LinkStackPtr p=(LinkStackPtr)malloc(sizeof(LinkStackPtr));</span><br><span class=\"line\">p-&gt;data=e;</span><br><span class=\"line\">p-&gt;next=s-&gt;top;</span><br><span class=\"line\">s-&gt;cont++;</span><br><span class=\"line\">return OK;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//链表的出栈操作</span><br><span class=\"line\">Status pop(LinkStack *s,ElemType *e)&#123;</span><br><span class=\"line\">LintStack p;</span><br><span class=\"line\">if(StackEmpty(*s))&#123;return ERROR;&#125;\t//判断是否为空栈</span><br><span class=\"line\">*e=s-&gt;top-&gt;data;</span><br><span class=\"line\">p=s-&gt;top;</span><br><span class=\"line\">s-&gt;top=s-&gt;top-&gt;next;</span><br><span class=\"line\">free(p);</span><br><span class=\"line\">s-&gt;count--;</span><br><span class=\"line\">return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"队列\"><a href=\"#队列\" class=\"headerlink\" title=\"队列\"></a>队列</h3><p>队列只允许在一端进行插入操作，在另一端进行删除操作的线性表（先进先出）</p>\n<p>队列的链式存储结构</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct QNode&#123;</span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\">struct QNode *next;</span><br><span class=\"line\">&#125;QNode,*QueuePrt;</span><br><span class=\"line\">type struct&#123;</span><br><span class=\"line\">QueuePrt front,rear;\t//队头、尾指针；</span><br><span class=\"line\">&#125;LinkQueue;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>创建队列：在内存中创建一个头结点，将队列的头、尾指针都指向这个生成的头结点，此时为空队列；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">initQueue(LinkQueue *q)</span><br><span class=\"line\">&#123;q-&gt;front=q-&gt;rear=(QueuePtr)malloc(sizeof(QNode));</span><br><span class=\"line\">if(!q-&gt;front)&#123;exit(0);&#125;</span><br><span class=\"line\">q-&gt;front-&gt;next=NULL;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>入队操作</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">InsertQueue(LinkQueue *q,ElemType e)&#123;</span><br><span class=\"line\">QueuePtr p;</span><br><span class=\"line\">p=(QueuePtr)malloc(sizeof(QNode));</span><br><span class=\"line\">if(p==NULL)&#123;eixt(0);&#125;</span><br><span class=\"line\">p-&gt;data=e;</span><br><span class=\"line\">p-&gt;next=NULL;</span><br><span class=\"line\">q-&gt;rear-&gt;next=p;</span><br><span class=\"line\">q-&gt;rear=p;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>出队列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DeleteQueue(LinkQueue *q,ElemType *e)&#123;</span><br><span class=\"line\">Queueptr p;</span><br><span class=\"line\">if(q-&gt;front==q-&gt;rear)&#123;return;&#125;\t//判断队列是否为空；</span><br><span class=\"line\">p=q-&gt;front-&gt;next;</span><br><span class=\"line\">*e=p-&gt;data;</span><br><span class=\"line\">q-&gt;front-&gt;next=p-&gt;next;</span><br><span class=\"line\">if(q-&gt;rear==p)&#123;q-&gt;rear=q-&gt;front;&#125;</span><br><span class=\"line\">free(p);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>销毁一个队列</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">DestroyQueue(LinkQueue *q)&#123;</span><br><span class=\"line\">while(q-&gt;front)&#123;</span><br><span class=\"line\">q-&gt;rear=q-&gt;front-next;</span><br><span class=\"line\">free(q-&gt;front);</span><br><span class=\"line\">q-&gt;front=q-&gt;rear;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"串\"><a href=\"#串\" class=\"headerlink\" title=\"串\"></a>串</h3><p>有零个或多个字符组成的有限序列<code>S=&#39;a1a2a3a4a5....&#39;</code></p>\n<ul>\n<li>串的长度：串中字符的个数</li>\n<li>子串：串中任意个连续的字符串组成的子序列；</li>\n<li>串中的位置：该字节在串中的序号，子串在主串中的位置以子串的第一个字符在主串中的位置来表示</li>\n<li>空格串：有一个或多个空格组成的串</li>\n<li>空串</li>\n</ul>\n<p>采用顺序存储称为顺序串，</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MAXLEN 255</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">char ch[MAXLEN+1];\t//存储串的一维数组</span><br><span class=\"line\">int length;\t//串的当前长度</span><br><span class=\"line\">&#125;SString;</span><br></pre></td></tr></table></figure>\n\n\n<p>采用链式存储称为链串；</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define CHUNKSIZE 80 \t//块大小</span><br><span class=\"line\">typedef struct Chunk&#123;</span><br><span class=\"line\">char ch[CHUNKSIZE];</span><br><span class=\"line\">struct Chunk *next;</span><br><span class=\"line\">&#125;Chunk;</span><br><span class=\"line\"></span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">Chunk *head *tail;\t//串的头尾指针</span><br><span class=\"line\">int curlen;\t\t//串的当前长度</span><br><span class=\"line\">&#125;LString;\t//字符串的块链结构</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"串的模式匹配算法\"><a href=\"#串的模式匹配算法\" class=\"headerlink\" title=\"串的模式匹配算法\"></a>串的模式匹配算法</h4><p>确定主串中子串（模式串）第一次出现的位置</p>\n<ul>\n<li>BF算法(暴力破解法）</li>\n</ul>\n<p>先匹配第一个元素，再匹配第二个元素…..</p>\n<ul>\n<li>KMP算法</li>\n</ul>\n<p>主串的指针i不用回溯，子串的指针j不一定回到开头；</p>\n<p>next[j]:j的下一个位置</p>\n<p>当j=1时，next[j]=0;<br>其他情况，next[j]=1;<br>next[j]=max{1&lt;k&lt;j且从头开始的k-1个元素等于j前面的k-1个元素”P1…P(k-1)”=”P(j-k+1)….P(j-1)”}</p>\n<h3 id=\"递归\"><a href=\"#递归\" class=\"headerlink\" title=\"递归\"></a>递归</h3><p>方法或函数调用自身的方式称为递归调用，调用称为递，返回称为归。</p>\n<ul>\n<li>递归的优缺点？</li>\n</ul>\n<p>1.优点：代码的表达力很强，写起来简洁。<br>2.缺点：空间复杂度高、有堆栈溢出风险、存在重复计算、过多的函数调用会耗时较多等问题。</p>\n<ul>\n<li>一个问题只要同时满足以下3个条件，就可以用递归来解决：</li>\n</ul>\n<p>1.问题的解可以分解为几个子问题的解。何为子问题？就是数据规模更小的问题。<br>2.问题与子问题，除了数据规模不同，求解思路完全一样<br>3.存在递归终止条件</p>\n<ul>\n<li>解决方案</li>\n</ul>\n<p>1.警惕堆栈溢出：可以声明一个全局变量来控制递归的深度，从而避免堆栈溢出。<br>2.警惕重复计算：通过某种数据结构来保存已经求解过的值，从而避免重复计算。</p>\n<h2 id=\"树\"><a href=\"#树\" class=\"headerlink\" title=\"树\"></a>树</h2><p>在一颗非空树中，有且只有一个根节点，结点拥有的子树树称为度；度为0 的结点称为叶子或终端结点；不为0 的结点称为分支结点或非终端结点；树的度是树内结点度的最大值；同一个双亲的孩子互称为兄弟；从根到该结点所经过分支上的结点称为祖先，从该结点到下面所有结点称为子孙；树中结点的最大层次称为树的深度；</p>\n<p>从左到右是有次序的称为该树的有序树，否则称为无序树；<br>森林是m棵互不相交的树的集合；</p>\n<h3 id=\"二叉树\"><a href=\"#二叉树\" class=\"headerlink\" title=\"二叉树\"></a>二叉树</h3><p>每个结点至多只有两棵子树，子树有左右之分，次序不能颠倒</p>\n<p>在二叉树的第i层上至多有2^(i-1)个结点</p>\n<p>深度为k的二叉树至多有2^k-1个结点</p>\n<p>终端结点数为n0，度为2的结点数为n，则n0=n+1;</p>\n<ul>\n<li>满二叉树</li>\n</ul>\n<p>深度为k且结点数为2^k-1的二叉树</p>\n<ul>\n<li>完全二叉树</li>\n</ul>\n<p>每个结点都与满二叉树中的编号一一对应。</p>\n<p>具有n个结点的完全二叉树的深度为[log(2)n]+1;</p>\n<p>若2i&gt;n，则结点i无左孩子，否则其左孩子是结点2i；</p>\n<p>若2i+1&gt;n，则结点i无右孩子，否则其右孩子为结点2i+1;</p>\n<p>若i&gt;1，则其双亲为结点[i/2]</p>\n<ul>\n<li><p>二叉树的存储结构</p>\n<ul>\n<li>顺序存储</li>\n</ul>\n<p>  将完全二叉树上编号为i的结点元素存储在一维数组中</p>\n<ul>\n<li>链式存储</li>\n</ul>\n<p>  链表中的结点至少包含三个域：数据域、左右结点指针域；还可以增加一个指向其双亲的指针域；</p>\n</li>\n<li><p>遍历二叉树</p>\n<ul>\n<li>先序遍历</li>\n</ul>\n<p>  根-左-右</p>\n<ul>\n<li>中序遍历</li>\n</ul>\n<p>  左-根-右</p>\n<ul>\n<li>后续遍历</li>\n</ul>\n<p>  左-右-根</p>\n</li>\n<li><p>二叉链表</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">typedef char ElemType;</span><br><span class=\"line\">typedef struct BiTNode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">ElemType data;</span><br><span class=\"line\">struct BiTNode *lchild, *rchild;</span><br><span class=\"line\">&#125;BidTNode,*BiTree;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建一颗二叉树，按照前序遍历的方式输入数据</span><br><span class=\"line\">CreateBidTree(BiTree *T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">char c;</span><br><span class=\"line\">scanf(&quot;%c&quot;,&amp;c);</span><br><span class=\"line\">if(&#x27; &#x27;==c)\t//空格表示结点无子树</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">*T=NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">*T=(BiTNode *)malloc(sizeof(BiTNode));</span><br><span class=\"line\">(*T)-&gt;data=c;</span><br><span class=\"line\">CreateBiTree(&amp;(*T)-&gt;lchild);</span><br><span class=\"line\">CreateBiTree(&amp;(*T)-&gt;rchild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">visit()&#123;</span><br><span class=\"line\">//访问结点时的操作</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//遍历二叉树</span><br><span class=\"line\">PreOrderTraverse(BidTree T,int level)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if(T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">visit(T-&gt;data,level);</span><br><span class=\"line\">PreOrderTraverse(T-&gt;lchild,level+1);</span><br><span class=\"line\">PreOrderTraverse(T-&gt;rchild,level+1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">int level=1;</span><br><span class=\"line\">BiTree T=NULl;</span><br><span class=\"line\">CreateBiTree(&amp;T);</span><br><span class=\"line\">PreOrderTraverse(T,level);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>线索二叉树</li>\n</ul>\n<p>将定义好的二叉树结构进行扩容：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>lchild</td>\n<td>ltag</td>\n<td>data</td>\n<td>rtag</td>\n<td>rchild</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>ltag=0时,lchild指向该结点的左孩子，为1时指向该结点的前驱。rtag=0，rchild指向该结点的右孩子，为1时指向该结点的后继。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br><span class=\"line\">51</span><br><span class=\"line\">52</span><br><span class=\"line\">53</span><br><span class=\"line\">54</span><br><span class=\"line\">55</span><br><span class=\"line\">56</span><br><span class=\"line\">57</span><br><span class=\"line\">58</span><br><span class=\"line\">59</span><br><span class=\"line\">60</span><br><span class=\"line\">61</span><br><span class=\"line\">62</span><br><span class=\"line\">63</span><br><span class=\"line\">64</span><br><span class=\"line\">65</span><br><span class=\"line\">66</span><br><span class=\"line\">67</span><br><span class=\"line\">68</span><br><span class=\"line\">69</span><br><span class=\"line\">70</span><br><span class=\"line\">71</span><br><span class=\"line\">72</span><br><span class=\"line\">73</span><br><span class=\"line\">74</span><br><span class=\"line\">75</span><br><span class=\"line\">76</span><br><span class=\"line\">77</span><br><span class=\"line\">78</span><br><span class=\"line\">79</span><br><span class=\"line\">80</span><br><span class=\"line\">81</span><br><span class=\"line\">82</span><br><span class=\"line\">83</span><br><span class=\"line\">84</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#include&lt;stdio.h&gt;</span><br><span class=\"line\">#include&lt;stdlib.h&gt;</span><br><span class=\"line\">typedef char ElemType;</span><br><span class=\"line\">//线索存储标志位</span><br><span class=\"line\">//Link(0):表示指向左右孩子的指针</span><br><span class=\"line\">//Thread(1):表示指向前驱后继的线索</span><br><span class=\"line\">typedef enum&#123;Link,Thread&#125; PointerTag;</span><br><span class=\"line\">typedef struct BiThrNode</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">char data;</span><br><span class=\"line\">struct BiThrNode *lchild, *rchild;</span><br><span class=\"line\">PointerNag ltag;</span><br><span class=\"line\">PointerNag rTag;</span><br><span class=\"line\">&#125;BiThrNode,*BiThrTree;</span><br><span class=\"line\"></span><br><span class=\"line\">//全局变量，始终指向刚刚访问过的结点</span><br><span class=\"line\">BiThrTree pre;</span><br><span class=\"line\"></span><br><span class=\"line\">//创建一棵二叉树，按照前序遍历的方式输入数据</span><br><span class=\"line\">CreateBiThrTree(BiThrTree *T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">char c;</span><br><span class=\"line\">scanf(&quot;%c&quot;,&amp;c);</span><br><span class=\"line\">if(&#x27; &#x27;==c)&#123;</span><br><span class=\"line\">*T=NULL;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">*T=(BiThrNode *)malloc(sizeof(BiThrNode));</span><br><span class=\"line\">(*T)-&gt;data=c;</span><br><span class=\"line\">(*T)-&gt;ltag=Link;</span><br><span class=\"line\">(*T)-&gt;rtag=Link;</span><br><span class=\"line\"></span><br><span class=\"line\">CreateBiThrTree(&amp;(*T)-&gt;lchild);</span><br><span class=\"line\">CreateBiThrTree(&amp;(*T)-&gt;rchild);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//中序遍历线索</span><br><span class=\"line\">InThreading(BiThrTree T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">if(T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">InThreading(T-&gt;lchild);\t//递归左孩子线索化</span><br><span class=\"line\">if(!T-&gt;lchild)\t//如果该节点没有左孩子，则设置ltag为thread，并把lchild指向刚刚访问过的结点</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">T-&gt;ltag=Thread;</span><br><span class=\"line\">T-&gt;lchild=pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">if(!pre-&gt;rchild)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">pre-&gt;rtag=Thread;</span><br><span class=\"line\">Pre-&gt;rchild=T;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">Pre=T;</span><br><span class=\"line\">InThreading(T-&gt;rchild);\t\t//递归右孩子线索化</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">InOrderThreading(BiThrTree *p,BiThrTree T)</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">*p=(BiThrTree)malloc(sizeof(BiThrNode));</span><br><span class=\"line\">(*p)-&gt;ltag=Link;</span><br><span class=\"line\">(*P)-&gt;rtag=Thread;</span><br><span class=\"line\">(*p)-&gt;rchild=*p;</span><br><span class=\"line\">if(!T)&#123;</span><br><span class=\"line\">(*P)-&gt;lchild=*p;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">(*P)-&gt;lchild=T;</span><br><span class=\"line\">Pre=*p;</span><br><span class=\"line\">InThreading(T);</span><br><span class=\"line\">Pre-&gt;rchild=*p;</span><br><span class=\"line\">Pre-&gt;rtag=Thread;</span><br><span class=\"line\">(*P)-&gt;rchild=Pre;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">int main()&#123;</span><br><span class=\"line\">BiThrTree P,T=NULL;</span><br><span class=\"line\">CreateBiThrTree(&amp;T);</span><br><span class=\"line\">InOrderThreading(&amp;P,T);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>普通树转换为二叉树</p>\n<ol>\n<li>所有兄弟结点之间加一条连线</li>\n<li>对树中的每一个结点，只保留它与第一孩子结点的连线，删除它与其它孩子结点间的连线</li>\n</ol>\n</li>\n<li><p>森林转换为二叉树</p>\n<ol>\n<li>把每棵树转化为二叉树</li>\n<li>第一颗二叉树不动，从第二棵二叉树开始，依次把后一棵二叉树的根结点作为前一棵二叉树的根结点的右孩子，用线连起来</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>树、森林的前序遍历和二叉树的前序遍历结果相同，后序遍历与二叉树的中序遍历结果相同。</p>\n</blockquote>\n<h2 id=\"图\"><a href=\"#图\" class=\"headerlink\" title=\"图\"></a>图</h2><p>图（Graph）是由顶点的有穷非空集合和顶点之间边的集合组成，通常表示为：G（V，E）其中，G表示一个图，V是图G中顶点的集合，E是图G中边的集合。</p>\n<ul>\n<li><p>图按照边的有无方向分为无向图和有向图。无向图由顶点和边组成，有向图由顶点和弧构成。弧有弧尾和弧头之分，带箭头一端为弧头。</p>\n</li>\n<li><p>图按照边或弧的多少分稀疏图和稠密图。如果图中的任意两个顶点之间都存在边叫做完全图，有向的叫有向完全图。若无重复的边或顶点到自身的边则叫简单图。</p>\n</li>\n<li><p>图中顶点之间有邻接点、依附的概念。无向图顶点的边数叫做度。有向图顶点分为入度和出度。</p>\n</li>\n<li><p>图上的边或弧带有权则称为网。</p>\n</li>\n<li><p>图中顶点间存在路径，两顶点存在路径则说明是连通的，如果路径最终回到起始点则称为环，当中不重复的叫简单路径。若任意两顶点都是连通的，则图就是连通图，有向则称为强连通图。图中有子图，若子图极大连通则就是连通分量，有向的则称为强连通分量。</p>\n</li>\n<li><p>无向图中连通且n个顶点n-1条边称为生成树。有向图中一顶点入度为0其余顶点入度为1的叫有向树。一个有向图由若干棵有向树构成生成森林。</p>\n</li>\n</ul>\n<h3 id=\"图的存储结构\"><a href=\"#图的存储结构\" class=\"headerlink\" title=\"图的存储结构\"></a>图的存储结构</h3><ul>\n<li>邻接矩阵</li>\n</ul>\n<p>用两个数组来表示图，一个一维数组里储存着顶点的信息，一个二维数组储存着图中的边或弧的信息。</p>\n<blockquote>\n<p>无向图的邻接矩阵是对称的</p>\n</blockquote>\n<blockquote>\n<p>有向图的邻接矩阵可能是不对称的，顶点的度=顶点的出度+顶点的入度；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define MVNum 100\t//最大顶点数</span><br><span class=\"line\">typedef char VerTexType;\t//设顶点的数据类型为字符型</span><br><span class=\"line\">typedef int ArcType;\t\t//假设边的权值类型为整型</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">VerTexType Vexs[MVNum];\t\t//顶点数组</span><br><span class=\"line\">ArcType arcs[MVNum][MVNum]\t//邻接矩阵</span><br><span class=\"line\">&#125;AMGraph;\t</span><br><span class=\"line\"></span><br><span class=\"line\">//在顶点数组中查找顶点</span><br><span class=\"line\">int LocateVex(AMGraph G,VertexType u)&#123;</span><br><span class=\"line\">//查找顶点u，返回下标</span><br><span class=\"line\">int i;</span><br><span class=\"line\">for (i=0;i&lt;G.vexnum;++i)&#123;</span><br><span class=\"line\">if(U==G.vexs[i])&#123;</span><br><span class=\"line\">return i;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">reruen -1;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">status CreateUDN(AMGraph &amp;G)&#123;</span><br><span class=\"line\">//创建无向网G</span><br><span class=\"line\">cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;\t//输入总顶点数，总边数</span><br><span class=\"line\">for(i=0;i&lt;G.vexnum;++i)</span><br><span class=\"line\">cin&gt;&gt;G.vexs[i];\t\t//依次输入点的信息</span><br><span class=\"line\">for(i=0;i&lt;G.vexnum;++i)\t//初始化邻接矩阵</span><br><span class=\"line\">for (j=0;j&lt;G.vexnum;++j)</span><br><span class=\"line\">G.arcs[i][j]=MaxInt;\t//边的权值均为最大值</span><br><span class=\"line\">fof(k=0;k&lt;G.arcnum;++k)&#123;\t//构造邻接矩阵</span><br><span class=\"line\">cin&gt;&gt;v1&gt;&gt;v2&gt;&gt;w;\t\t\t//输入一条边所依附的顶点及边的权值</span><br><span class=\"line\">i=LocateVex(G,v1);</span><br><span class=\"line\">j=LocateVex(G,v2);\t//确定v1和v2在G中的位置</span><br><span class=\"line\">G.arcs[i][j]=w;\t\t//边&lt;v1,v2&gt;的权值置为w</span><br><span class=\"line\">G.arcs[j][i]=G.arcs[i][j];\t//&lt;v1,v2&gt;的对称边&lt;v2,v1&gt;的权值为w</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>邻接表</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>缺点</th>\n<th>改进方法</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>有向图</td>\n<td>求各结点的度困难</td>\n<td>十字链表</td>\n</tr>\n<tr>\n<td>无向图</td>\n<td>每条边都要存储两遍</td>\n<td>邻接多重表</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">typedef struct VNode&#123;</span><br><span class=\"line\">VerTexType data;\t//顶点信息</span><br><span class=\"line\">ArcNode *firstarc;\t//指向第一条依附该顶点的边的指针</span><br><span class=\"line\">&#125;VNode，AdjList[MVNum];\t//AdjList表示邻接表类型</span><br><span class=\"line\"></span><br><span class=\"line\">status CreateUDG(ALGragh &amp;G)&#123;\t//创建无向图G</span><br><span class=\"line\">cin&gt;&gt;G.vexnum&gt;&gt;G.arcnum;\t//输入图G的顶点，边个数</span><br><span class=\"line\">for(int i=0;i&lt;G.vexnum;++i)&#123;</span><br><span class=\"line\">cin&gt;&gt;Gvertices[i].data;\t\t//输入顶点值</span><br><span class=\"line\">G.vertices[i].firsarc=NULL;\t//初始化表头结点的指针域</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(k=0;k&lt;G.arcnum;++k)&#123;\t//输入各边</span><br><span class=\"line\">cin&gt;&gt;v1&gt;&gt;v3;</span><br><span class=\"line\">i=LocateVex(G,v1);</span><br><span class=\"line\">j=LocateVex(G,v2);</span><br><span class=\"line\">p1=new ArcNode;\t\t//生成一个新的边结点*p1</span><br><span class=\"line\">p1-&gt;adjvex=j;\t\t//邻接点序号为j</span><br><span class=\"line\">p1-&gt;nextarc=G.vertices[i].firstarc;</span><br><span class=\"line\">G.vertices[i].firstarc=p1;;\t\t//将新结点*p1插入顶点vi的边表头部</span><br><span class=\"line\">p2=new ArcNode;\t\t//生成另一个对称的新的边结点*p2</span><br><span class=\"line\">p2-&gt;adjvex=i;\t\t//邻接点序号为i</span><br><span class=\"line\">p2-&gt;nextarc=G.vertices[j].firstarc;</span><br><span class=\"line\">G.vertices[j].firstarc=p2;\t//将新结点*p2插入顶点vj的边表头部</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return OK;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"遍历方法\"><a href=\"#遍历方法\" class=\"headerlink\" title=\"遍历方法\"></a>遍历方法</h2><ul>\n<li>深度优先遍历</li>\n</ul>\n<p>也称深度优先搜索（DFS）</p>\n<p>右手原则：在没有碰到重复顶点的情况下，分叉路口始终是向右手边走，每路过一个顶点就做一个记号。</p>\n<ul>\n<li>广度优先遍历<br>又称广度优先搜索（BFS）</li>\n</ul>\n<p>普利姆算法<br>克鲁斯卡尔算法</p>\n","categories":["study"],"tags":[]},{"title":"CSS","url":"http://www.baidu.com/2020/11/11/css/","content":"<hr>\n<h1 id=\"css\"><a href=\"#css\" class=\"headerlink\" title=\"css\"></a>css</h1><p>响应式布局：在不同设备之间缩放网页</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@media screen and (max-width:768px)&#123;</span><br><span class=\"line\">当屏幕小于该尺寸时采用如下布局</span><br><span class=\"line\">...</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>网页适配移动端</p>\n<ul>\n<li><p>百分比<br><code>.item&#123;width:55%;&#125;</code></p>\n</li>\n<li><p>利用rem单位</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.html&#123;font-size:100px;&#125;</span><br><span class=\"line\">.item&#123;width: 0.4rem;&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>dpr=物理像素/设备独立像素<br><code>&lt;meta name=&quot;viewport&quot; content= &quot;width=device-width,initial-scale=1/dpr&gt;</code></li>\n</ul>\n<h3 id=\"选择器\"><a href=\"#选择器\" class=\"headerlink\" title=\"选择器\"></a>选择器</h3><h4 id=\"1-基础选择器：\"><a href=\"#1-基础选择器：\" class=\"headerlink\" title=\"1.基础选择器：\"></a>1.基础选择器：</h4><ul>\n<li>标签选择器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">p&#123;</span><br><span class=\"line\">   color:red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">   color:red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>类选择器：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.类名&#123;</span><br><span class=\"line\">   .....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>id选择器：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#id名&#123;</span><br><span class=\"line\">   /*只能使用一次*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;\\div id=&quot;xx&quot;&gt; &lt;\\/div&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>通配符选择器：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*&#123;</span><br><span class=\"line\">   margin:0;</span><br><span class=\"line\">   padding:0;</span><br><span class=\"line\">   /*不需要调用，自动给所有的元素使用*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h4 id=\"2-组合选择器：\"><a href=\"#2-组合选择器：\" class=\"headerlink\" title=\"2.组合选择器：\"></a>2.组合选择器：</h4><ul>\n<li>后代选择器: </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素1 元素2 &#123;</span><br><span class=\"line\">样式 ;</span><br><span class=\"line\">选择元素1里面的所有元素2(后代元素);</span><br><span class=\"line\">元素1，2用空格隔开</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">如：</span><br><span class=\"line\">ul li &#123;xxxx&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>子选择器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素1&gt;元素2 &#123;</span><br><span class=\"line\">选择元素1里的所有直接后代元素2;</span><br><span class=\"line\">元素2必须是亲儿子</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">如：</span><br><span class=\"line\">div&gt;p&#123;xxxx选择div里最近一级p标签元素&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>并集选择器：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">元素1，元素2&#123;xxxxx同时选择元素1和2&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"3-伪类选择器\"><a href=\"#3-伪类选择器\" class=\"headerlink\" title=\"3.伪类选择器\"></a>3.伪类选择器</h3><ul>\n<li>链接伪类选择器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a:link&#123;&#125;</span><br><span class=\"line\">a:visited&#123;&#125;</span><br><span class=\"line\">a:hover&#123;鼠标经过&#125;</span><br><span class=\"line\">a:active&#123;&#125;</span><br><span class=\"line\">input:focus&#123;点击时获取焦点&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>结构性伪类</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">----------------------------</span><br><span class=\"line\">xxx:nth-of-type(even)&#123;选择序号（同类型）为偶数的xxx元素&#125;</span><br><span class=\"line\">xxx:nth-of-type(odd)&#123;选择序号（同类型）为奇数的xxx元素&#125;</span><br><span class=\"line\">xxx:nth-child(n)&#123;选择序号为n的xxx元素&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>before/after</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx:before&#123;</span><br><span class=\"line\">content:&#x27;&#x27;;</span><br><span class=\"line\">display:xxx;</span><br><span class=\"line\">color:xxx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">xxx:after&#123;</span><br><span class=\"line\">content:&#x27;&#x27;;</span><br><span class=\"line\">display:xxx;</span><br><span class=\"line\">color:xxx;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"属性选择器\"><a href=\"#属性选择器\" class=\"headerlink\" title=\"属性选择器\"></a>属性选择器</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">xxx[attr(属性名称)=val(属性值)]&#123;xxx&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>伪元素选择器</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(伪元素)xxx::after&#123;xxx&#125;</span><br></pre></td></tr></table></figure>\n\n<hr>\n<h4 id=\"Css的三种样式表\"><a href=\"#Css的三种样式表\" class=\"headerlink\" title=\"Css的三种样式表\"></a>Css的三种样式表</h4><ol>\n<li>行内样式表</li>\n<li>内部样式表</li>\n<li>外部样式表<code>&lt;link rel=&quot;stylesheet&quot; href=&quot;css文件路径&quot;&gt;</code></li>\n</ol>\n<p><em>一般情况下，优先级如下：</em></p>\n<p><code>（内联(行内)样式）Inline style &gt; （内部样式）Internal style sheet &gt;（外部样式）External style sheet &gt; 浏览器默认样式</code></p>\n<p><code>!important&gt;行内(内联)样式 &gt; id 选择器 &gt; 类选择器 = 伪类选择器 = 属性选择器 &gt; 标签选择器 = 伪元素选择器&gt;继承&gt;通用选择器</code></p>\n<p>权重越大，优先级越高：<code>通用选择器0、标签（元素）选择器1、类选择器10、ID选择器：100、行内样式1000</code></p>\n<p>如</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#box p .tt&#123;xxx&#125;\t\t//权重为100+1+10</span><br><span class=\"line\"></span><br><span class=\"line\">#box .tt&#123;xxx&#125;\t\t//权重100+10</span><br></pre></td></tr></table></figure>\n\n\n<p>注意：如果外部样式放在内部样式的后面，则外部样式将覆盖内部样式。</p>\n<hr>\n<h4 id=\"元素显示模式\"><a href=\"#元素显示模式\" class=\"headerlink\" title=\"元素显示模式\"></a>元素显示模式</h4><ol>\n<li><p>块元素：<code>&lt;h1&gt; &lt;p&gt; &lt;div&gt; &lt;ul&gt;....</code>独占一行；宽高边距可控；文字列元素内不能使用块级元素如<code>&lt;p&gt;</code>与<code>&lt;h1&gt;</code>内不能放<code>&lt;div&gt;</code>;图片<code>&lt;img&gt;</code>可放在<code>&lt;p&gt;</code>内调整位置</p>\n</li>\n<li><p>行内(内联)元素：<code>&lt;a&gt;,&lt;span&gt;,&lt;b&gt;,&lt;em&gt;...</code>一行多个；宽高无法直接设置；只能容纳文本或其他行内元素；</p>\n</li>\n</ol>\n<blockquote>\n<p>特别的<code>&lt;a&gt;</code>内可以放块级元素，给<code>&lt;a&gt;</code>转换一下块级模式最安全</p>\n</blockquote>\n<ol start=\"3\">\n<li>行内块元素：<code>&lt;img /&gt;,&lt;input /&gt;,&lt;td&gt;</code>高宽可设置；一行多个</li>\n</ol>\n<h4 id=\"显示模式转换：\"><a href=\"#显示模式转换：\" class=\"headerlink\" title=\"显示模式转换：\"></a>显示模式转换：</h4><ol>\n<li>转换为块元素：<code>dispaly:block</code></li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">a&#123;</span><br><span class=\"line\">   width:22xp;</span><br><span class=\"line\">   ....</span><br><span class=\"line\">   display:block;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>转换为行内元素 <code>dispaly:inline</code></li>\n<li>行内块元素：<code>display:inline-block</code></li>\n</ol>\n<hr>\n<h3 id=\"浮动\"><a href=\"#浮动\" class=\"headerlink\" title=\"浮动\"></a>浮动</h3><p>多个块级元素纵向排列用标准流，横向排列用浮动<br>特性：</p>\n<ol>\n<li>脱离标准流的控制，不再保留原先的位置</li>\n<li>所有浮动一行对齐.上对齐,宽高位置只跟上一个浮动元素有关,父级宽度不够时会换行</li>\n<li>具有行内块特性</li>\n</ol>\n<blockquote>\n<p>浮动元素不会压住文字和图片、表单元素（输入框、单选按钮、下拉选择框、复选框等）；可做出文字环绕图片效果；</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">选择器 &#123; </span><br><span class=\"line\">   float:none|left|right；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:假如某个div元素A是浮动的，如果A元素上一个元素也是浮动的，那么A元素会跟随在上一个元素的后边(如果一行放不下这两个元素，那么A元素会被挤到下一行)；如果A元素上一个元素是标准流中的元素，那么A的相对垂直位置不会改变，也就是说A的顶部总是和上一个元素的底部对齐。</p>\n</blockquote>\n<h3 id=\"常用标准流约束浮动位置\"><a href=\"#常用标准流约束浮动位置\" class=\"headerlink\" title=\"常用标准流约束浮动位置\"></a>常用标准流约束浮动位置</h3><ul>\n<li>清除浮动： 父级盒子不设置高度时，子盒子浮动，脱标不占位置，则父级盒子高度为0；</li>\n</ul>\n<blockquote>\n<p>子元素高度大于父元素且子元素设置了浮动，那子元素将溢出</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父元素清除浮动影响</span><br><span class=\"line\">选择器&#123;</span><br><span class=\"line\">   clear:none|left(该元素左边不允许出现浮动元素)|right|both；</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>注意:对于CSS的清除浮动(clear)，一定要牢记：这个规则只能影响使用清除的元素本身，不能影响其他元素。</p>\n</blockquote>\n<ol>\n<li>额外标签法：在浮动元素的末尾添加一个空标签如<code>&lt;div style=&quot;clear:both&quot;&gt;&lt;/div&gt;</code></li>\n<li>父级添加<code>overflow:hidden|auto|scroll;</code> 设置为auto时会出现滚动条，可选择隐藏<code>overflow-x:hidden;</code>或<code>overflow-y:auto</code></li>\n</ol>\n<ul>\n<li>修改滚动条样式</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br><span class=\"line\">47</span><br><span class=\"line\">48</span><br><span class=\"line\">49</span><br><span class=\"line\">50</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">【1】IE</span><br><span class=\"line\"> </span><br><span class=\"line\">　　IE浏览器支持通过CSS样式来改变滚动条的部件的自定义颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-face-color滚动条凸出部分的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-shadow-color立体滚动条阴影的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-highlight-color滚动条空白部分的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-3dlight-color滚动条亮边的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-darkshadow-color滚动条强阴影的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-track-color滚动条的背景颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-arrow-color上下按钮上三角箭头的颜色</span><br><span class=\"line\"> </span><br><span class=\"line\">　　scrollbar-base-color滚动条的基本颜色</span><br><span class=\"line\"></span><br><span class=\"line\">【2】webkit</span><br><span class=\"line\">::-webkit-scrollbar 滚动条整体部分</span><br><span class=\"line\">::-webkit-scrollbar-thumb  滚动条里面的小方块，能向上向下移动（或往左往右移动，取决于是垂直滚动条还是水平滚动条）</span><br><span class=\"line\">::-webkit-scrollbar-track  滚动条的轨道（里面装有Thumb）</span><br><span class=\"line\">::-webkit-scrollbar-button 滚动条的轨道的两端按钮，允许通过点击微调小方块的位置。</span><br><span class=\"line\">::-webkit-scrollbar-track-piece 内层轨道，滚动条中间部分（除去）</span><br><span class=\"line\">::-webkit-scrollbar-corner 边角，即两个滚动条的交汇处</span><br><span class=\"line\">::-webkit-resizer 两个滚动条的交汇处上用于通过拖动调整元素大小的小控件</span><br><span class=\"line\"></span><br><span class=\"line\">/////////////////////////////////////////////////////////////////////</span><br><span class=\"line\">/* 定义滚动条样式 */</span><br><span class=\"line\">::-webkit-scrollbar &#123;</span><br><span class=\"line\">  width: 6px;</span><br><span class=\"line\">  height: 6px;</span><br><span class=\"line\">  background-color: rgba(240, 240, 240, 1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/*定义滚动条轨道 内阴影+圆角*/</span><br><span class=\"line\">::-webkit-scrollbar-track &#123;</span><br><span class=\"line\">  box-shadow: inset 0 0 0px rgba(240, 240, 240, .5);</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  background-color: rgba(240, 240, 240, .5);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> </span><br><span class=\"line\">/*定义滑块 内阴影+圆角*/</span><br><span class=\"line\">::-webkit-scrollbar-thumb &#123;</span><br><span class=\"line\">  border-radius: 10px;</span><br><span class=\"line\">  box-shadow: inset 0 0 0px rgba(240, 240, 240, .5);</span><br><span class=\"line\">  background-color: rgba(240, 240, 240, .5);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>父级添加伪元素法<code>:after</code></li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clear:after&#123;</span><br><span class=\"line\">   conten:&quot;&quot;;</span><br><span class=\"line\">   display:block;</span><br><span class=\"line\">   height:0;</span><br><span class=\"line\">   clear:both;</span><br><span class=\"line\">   visibility:hidden;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clear&#123;</span><br><span class=\"line\">   /*IE6,7专有*/</span><br><span class=\"line\">   *zoom:1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>父级双伪元素清除浮动</li>\n</ol>\n  <figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.clear:before,.clear:after&#123;</span><br><span class=\"line\">   content:&quot;&quot;;</span><br><span class=\"line\">   display:table;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clear:after&#123;</span><br><span class=\"line\">   clear:both;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.clear&#123;</span><br><span class=\"line\">   *zoom:1;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"定位\"><a href=\"#定位\" class=\"headerlink\" title=\"定位\"></a>定位</h3><p>将盒子固定到某一个位置<code>定位=定位模式+边偏移</code></p>\n<ol>\n<li>定位模式：<code>position:static|relative|absolute|fixed</code><ul>\n<li>静态定位static：不脱标，不能偏移；</li>\n<li>相对定位relative：相对与自己原来的位置来移动；不脱标，继续保留原来的位置</li>\n<li>绝对定位absolute：若没有祖先元素或祖先元素没有定位，则以浏览器为准；若祖先元素有定位，则以最近一级有定位的祖先元素为参考点；</li>\n<li>固定定位fixed：以浏览器可视窗口为参考点，更父级元素没有任何关系；不随滚动条滚动，不在占有原先位置；</li>\n<li>粘性定位sticky：以浏览器可视窗口为参考点；占有原先的位置；必须添加top,left,right,bottom其中一个才生效；</li>\n</ul>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">固定在版心右侧位置</span><br><span class=\"line\">left:50%;浏览器的一半位置</span><br><span class=\"line\">amrgin-left:版心宽度的一半距离。</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>边偏移：<code>top:33px;bottom:...;left:.....;right:...</code></li>\n<li>叠放次序：<code>选择器&#123;z-index:1;&#125;</code>数值可正可负；数值越大盒子越靠上；只有定位的盒子才能有z-index属性；另外，有定位的在没有定位的上面，都有定位则后面写的在上面，</li>\n</ol>\n<blockquote>\n<p>子级是绝对定位的话，父级要用相对定位，子盒子不需要占有位置，父级需要占有位置；<br>行内元素添加绝对或固定定位，可直接设置宽高；块级元素添加后不设置宽高则默认是内容大小；<br>浮动元素可以压住标准流盒子；但不会压住标准流盒子里的文字和图片；</p>\n</blockquote>\n<h3 id=\"布局\"><a href=\"#布局\" class=\"headerlink\" title=\"布局\"></a>布局</h3><ul>\n<li>flex<br>属性：<ul>\n<li>flex-wrap:nowrap/wrap/wrap-reverse;</li>\n<li>align-items:stretch/center/flex-start/flex-end/baseline;</li>\n<li>flex-grow: 数字;</li>\n<li>flex-shrink:数字;</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box&#123;</span><br><span class=\"line\">display:flex;</span><br><span class=\"line\">flex-direction:row/coloumn;</span><br><span class=\"line\">justify-content:flex-start(开始对齐)/flex-end（尾部对齐）/center/space-between（两端对齐）/space-around(自动分配间隔）</span><br><span class=\"line\">align-items:stretch/center/flex-start/flex-end/baseline;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"元素的显示与隐藏\"><a href=\"#元素的显示与隐藏\" class=\"headerlink\" title=\"元素的显示与隐藏\"></a>元素的显示与隐藏</h3><ul>\n<li><p>display:none（隐藏）|block(除转换为块级元素外，还可显示元素);</p>\n<blockquote>\n<p>display隐藏后不再占有原来的位置；</p>\n</blockquote>\n</li>\n<li><p>visibility:visible(可视)|hidden；</p>\n<blockquote>\n<p>visibility:隐藏元素后，继续占有原来的位置；</p>\n</blockquote>\n</li>\n</ul>\n<hr>\n<h4 id=\"字体属性\"><a href=\"#字体属性\" class=\"headerlink\" title=\"字体属性\"></a>字体属性</h4><ul>\n<li><p>font-family:默认使用第一个字体,<code>font-family:&quot;Microsoft yahie&quot; ,&quot;hiragino Sans GB&quot;,Arial;</code></p>\n</li>\n<li><p>font-size: 单位px</p>\n</li>\n<li><p>font-weight: <code>nomal或400</code>不加粗;<code>bold或700</code>加粗；<code>100-900</code></p>\n</li>\n<li><p>font-style:<code>normal</code>默认；<code>italic</code>斜体；</p>\n</li>\n<li><p>color：支持十六进制、rgb（255,5,5）、预设颜色值red</p>\n</li>\n<li><p>text-align:文本内容对齐left,right,center;</p>\n</li>\n<li><p>line-height:行高，单位px;</p>\n</li>\n<li><p>text-decoration:文本装饰；<code>none</code>没有装饰线；<code>underline</code> 下划线；<code>line-through</code>删除线；</p>\n</li>\n<li><p>text-indent:缩进；单位em代表1个文字大小；px像素</p>\n</li>\n<li><p>字体复合属性：<code>font: font-style font-weight font-size/line-height font-family;</code>顺序不能换，必须保留<code>font-size</code> 和<code>font-family</code>属性</p>\n</li>\n</ul>\n<hr>\n<p>css背景</p>\n<ul>\n<li>背景颜色：<code>background-color</code></li>\n<li>背景图片：<code>background-image:url()</code></li>\n<li>背景图片重复平铺：<code>background-repeat:no-repeat|repeat-x|repeat-y</code></li>\n<li>背景图片位置：<code>background-position:(方位名词：top|center|left|right|top left等)(坐标：x,y或只有x坐标与垂直居中)两个可混合使用</code></li>\n<li>背景固定：<code>background-attachment:scroll|fixed(固定)</code></li>\n<li>背景复合写法：<code>background:(没有顺序)一般颜色 图片 平铺 固定 位置。。</code></li>\n<li>背景半透明 ：<code>backround:rgba(0,0,0,0.5)最后一个参数代表透明度</code></li>\n</ul>\n<hr>\n<p>子标签会继承付标签的部分样式如字体、颜色等<br>行高可以不跟单位：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">body&#123;</span><br><span class=\"line\">font:12px/1.5; /*子元素字体大小的1.5倍*/</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">div&#123;</span><br><span class=\"line\">   font-size:14px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"盒子\"><a href=\"#盒子\" class=\"headerlink\" title=\"盒子\"></a>盒子</h3><ul>\n<li>边框:<code>border</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">加边框后盒子会变大</span><br><span class=\"line\">border-width:单位px</span><br><span class=\"line\">border-stye:solid(实线)|dashed（虚线）|dotted（点线）</span><br><span class=\"line\">border-color:</span><br><span class=\"line\">复合写法：border：xxx xxx xxx没有循序</span><br><span class=\"line\">每条边可单独设置:</span><br><span class=\"line\">border-top:</span><br><span class=\"line\">border-bottom:</span><br><span class=\"line\">合并相邻边框</span><br><span class=\"line\">border-collapse:collapse;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>内容:content</li>\n<li>内边界:<code>padding</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">也会改变盒子大小,若盒子没有width/height属性则不会</span><br><span class=\"line\">可分开设置上下左右边距</span><br><span class=\"line\">padding-left:</span><br><span class=\"line\">复合写法：padding：（2个：上下，左右；3个：上，左右，下；4个：顺时针）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>外边距:<code>margin</code></li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">*可分开设置</span><br><span class=\"line\">margin-left:</span><br><span class=\"line\">nargin-bottom:</span><br><span class=\"line\">*复合写法与padding一致</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"盒子居中\"><a href=\"#盒子居中\" class=\"headerlink\" title=\"盒子居中\"></a>盒子居中</h3><ul>\n<li><p>让块级盒子水平居中：</p>\n<ol>\n<li>通过手动计算 margin 左右边距<br>父盒子的定宽的，子盒子指定 margin-left 即可</li>\n<li>盒子有宽度，左右设为auto；<br><code>margin：0，auto；</code>// 让子盒子左右自动适应，想当于 <code>left:auto; right:auto</code></li>\n<li>先让盒子左右边缘和父盒子垂直的中心线垂直，然后把子盒子往回移动自身宽度的一半</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 通过 transform 实现*/</span><br><span class=\"line\">//子盒子</span><br><span class=\"line\">margin-left: 50%;                // 先移动父盒子的一半</span><br><span class=\"line\">       transform: translateX(-50%);     // 再移动自身盒子一半,transform中translate使用百分比时相对的是自己的长宽，不是父盒子的。</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">/*通过 定位实现*/</span><br><span class=\"line\">//父盒子</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">//子盒子</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">       left: 50%;                       // 向右移动父盒子一半</span><br><span class=\"line\">       margin-left: -100px;             // 向左移动自身盒子一半</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>把盒子转成行内块,行内元素只需要在父级元素添加text-align:center即可；</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父盒子</span><br><span class=\"line\">text-align: center;               // 让父盒子设置水平居中</span><br><span class=\"line\"></span><br><span class=\"line\">//子盒子</span><br><span class=\"line\">display: inline-block;            // 让子盒子显示为行内块模式</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>盒子垂直居中的方法</p>\n<ol>\n<li>知道父盒子的高度，可以使用 margin 计算盒子的上下边距，来使盒子居中</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">margin-top: 149px;         // 根据父盒子的高度指定子盒子 margin-top 即可</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>先让盒子的上下边缘和父盒子的水平中心线重叠，，然后再让子盒子往回移动自身一半的距离</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/* 通过 transform 属性来移动*/</span><br><span class=\"line\">\t//子盒子</span><br><span class=\"line\">\tmargin-top: 50%;                  // 向下移动父盒子的一半</span><br><span class=\"line\">        transform: translateY(-50%);      // 向上移动自身盒子的一半</span><br><span class=\"line\"></span><br><span class=\"line\">/* 通过 定位来移动*/</span><br><span class=\"line\">\t//父盒子</span><br><span class=\"line\">\tposition: relative;</span><br><span class=\"line\">\t//子盒子</span><br><span class=\"line\">\tposition: absolute;</span><br><span class=\"line\">        top: 50%;                  // 先向下移动父盒子的一半</span><br><span class=\"line\">        margin-top: -100px;        // 再向上移动自身盒子的一半</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>使用表格的 vertical-align :middle 属性来实现盒子垂直居中</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父盒子</span><br><span class=\"line\">display: table-cell;         // 显示形式为表格</span><br><span class=\"line\">       vertical-align: middle;      // 里面内容为居中对齐</span><br></pre></td></tr></table></figure>\n<ol start=\"4\">\n<li>把盒子转成行内块</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父盒子line-height:500px 与 子盒子的vertical-align:middel共同作用使子盒子垂直居中。</span><br><span class=\"line\">.parent-box &#123;</span><br><span class=\"line\">line-height: 500px;</span><br><span class=\"line\">text-align:center;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child-box &#123;</span><br><span class=\"line\">display:inline-block;</span><br><span class=\"line\">vertical-align:middle;</span><br><span class=\"line\">line-height:1rem;</span><br><span class=\"line\">color:white;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>利用flex布局</li>\n</ul>\n<p>flex布局，设置水平与竖直方向的内容居中。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.parent-box &#123;</span><br><span class=\"line\">display: flex;</span><br><span class=\"line\">justify-content: center;</span><br><span class=\"line\">align-items: center;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> position:absolute 配合定位与margin：auto</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不兼容低版本的IE浏览器</span><br><span class=\"line\">.parent-box &#123;</span><br><span class=\"line\">position: relative;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.child-box &#123;</span><br><span class=\"line\">position: absolute;</span><br><span class=\"line\">left: 0;</span><br><span class=\"line\">top: 0;</span><br><span class=\"line\">right: 0;</span><br><span class=\"line\">bottom:0;</span><br><span class=\"line\">margin: auto;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>使用JS的思路大概给大家说下：</li>\n</ul>\n<p>1、js中只要获取到当前盒子具体的left/top值即可</p>\n<p>2、一屏幕的宽高-盒子的宽高，最后除以2，获取的值就是它应该具备的left/top(这个值可以使盒子处于页面中间)</p>\n<h3 id=\"嵌套元素塌陷问题：\"><a href=\"#嵌套元素塌陷问题：\" class=\"headerlink\" title=\"嵌套元素塌陷问题：\"></a>嵌套元素塌陷问题：</h3><p>父元素与子元素有上外边距时，父元素会塌陷较大的外边距值</p>\n<ul>\n<li>解决方法：触发BFC（块格式上下文）<ul>\n<li>为父元素设置：上边框或上内边距</li>\n<li>为父元素添加overflow：hidden；</li>\n<li>为父元素添加dispaly:inline-block/tabl-cell;或float:left;或positon:absolute/fixed;</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"清除内外边距\"><a href=\"#清除内外边距\" class=\"headerlink\" title=\"清除内外边距\"></a>清除内外边距</h3><blockquote>\n<p>(body会默认有个边距)</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">* &#123;</span><br><span class=\"line\">   margin:0;</span><br><span class=\"line\">   padding:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>透明：<code>opacity:0.5</code>子元素也会跟着变化</li>\n<li>圆角边框：<code>border-radius:10px|10%|顺时针四个参数</code>;</li>\n<li>盒子阴影：<code>box-shadow:3px水平阴影 0px垂直阴影 5px模糊距离 0px阴影尺寸 #fff颜色 inset（内阴影）</code>不占空间</li>\n<li>文字阴影：<code>text-shadow:水平阴影 垂直阴影 模糊距离 颜色</code></li>\n<li>渐变背景：`background:linear-gradient(to bottom|to top|to right|to left,#fff(开始颜色),#000(结束颜色));</li>\n<li>过渡动画：<code>transion: width(要过渡的属性) 1s(过渡时间) ease-in(过渡方式) 2s(延迟时间)</code></li>\n<li>位移属性：<code>transform:translateX|translateY|translateZ(20px);</code>位移时默认是元素的中心位置</li>\n<li>缩放：<code>transform:scale(1.5);</code>默认为1正常大小；<code>transform-origin:50% 50%;</code>元素缩放中心点位置</li>\n<li>旋转：<code>transform:rotateX|rotateY|rotateZ(30deg);</code></li>\n<li>透视：<code>transform:perspective(1000px);</code>透视距离，必须写在前面；</li>\n<li>循环动画：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//定义动画</span><br><span class=\"line\">@keyframe beat&#123;\t\t//关键帧</span><br><span class=\"line\">30%:&#123;</span><br><span class=\"line\">transform:scale(1.3);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">100%:&#123;</span><br><span class=\"line\">transform:scale(1);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//使用动画</span><br><span class=\"line\"></span><br><span class=\"line\">span.heart&#123;</span><br><span class=\"line\">animation:beat(动画名称) 1.5s(动画时长) infinite(循环动画);</span><br><span class=\"line\">&#125;\t</span><br></pre></td></tr></table></figure></li>\n</ul>\n<h3 id=\"精灵图\"><a href=\"#精灵图\" class=\"headerlink\" title=\"精灵图\"></a>精灵图</h3><p>将多个小背景图整合到一张大图片中，减少了服务器的请求</p>\n<p>移动背景位置：<code>background-position </code>移动的距离是这个目标图片的x，y坐标，一般情况是向上或左移动，所以数值是负值；</p>\n<h3 id=\"字体图标\"><a href=\"#字体图标\" class=\"headerlink\" title=\"字体图标\"></a>字体图标</h3><p>精灵图放大会失真，字体图标不会，且可以改变颜色大小，只适合简单图形；</p>\n<p>字体图标下载网站：<code>http://icomoon.io</code> <code>https://iconfont.cn</code></p>\n<p>使用方法：<br>1.添加字体声明在<code>&lt;style&gt;&lt;/style&gt;</code>中</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@font-face&#123;</span><br><span class=\"line\">   font-family: `name`;</span><br><span class=\"line\">   src:url()</span><br><span class=\"line\">   ....</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>2.使用:从官网复制图标粘贴到相应位置并设置样式:<code>span&#123;font-family:&#39;name&#39;;font-size:....&#125;</code></p>\n<h3 id=\"三角形\"><a href=\"#三角形\" class=\"headerlink\" title=\"三角形\"></a>三角形</h3><p>盒边距设置为0，边框宽度控制大小，边框背景设置为透明</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">.box&#123;</span><br><span class=\"line\">   width:0px;</span><br><span class=\"line\">   height:0px;</span><br><span class=\"line\">   border:20px solid transparent;</span><br><span class=\"line\">   border-left-color:red;</span><br><span class=\"line\">   /*照顾兼容性*/</span><br><span class=\"line\">   line-height:0;</span><br><span class=\"line\">   font-size:0;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>直角三角形</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">width:0;</span><br><span class=\"line\">height:0;</span><br><span class=\"line\">/*上边框调大*/</span><br><span class=\"line\">border-toP:100px solid transparent;</span><br><span class=\"line\">border-right:50px solid red;</span><br><span class=\"line\">/*左边和下边边框设置为0*/</span><br><span class=\"line\">border-bottom:0;</span><br><span class=\"line\">border-left:0;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"鼠标样式\"><a href=\"#鼠标样式\" class=\"headerlink\" title=\"鼠标样式\"></a>鼠标样式</h3><p><code>li&#123; cursor:default|pointer(手指)|move|text(文本)|not-allowed(禁止)&#125;</code></p>\n<h3 id=\"防止文本域被拖拽\"><a href=\"#防止文本域被拖拽\" class=\"headerlink\" title=\"防止文本域被拖拽\"></a>防止文本域被拖拽</h3><p><code>textarea&#123;resize:none;&#125;</code></p>\n<h3 id=\"vertical-align\"><a href=\"#vertical-align\" class=\"headerlink\" title=\"vertical-align\"></a>vertical-align</h3><p>用于设置行内块垂直对齐方式(必须作用与inline-block元素)<br><code>vertical-align:baseline(基线)|top|middle|bottom;</code></p>\n<ul>\n<li>解决图片底部空白缝隙问题：添加vertical-align属性；或转换为块级元素`display:block;</li>\n</ul>\n<h3 id=\"溢出文字省略号表示\"><a href=\"#溢出文字省略号表示\" class=\"headerlink\" title=\"溢出文字省略号表示\"></a>溢出文字省略号表示</h3><ul>\n<li>单行</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">1.强制一行显示文本</span><br><span class=\"line\">white-space:nowrap;</span><br><span class=\"line\">2.超出部分隐藏</span><br><span class=\"line\">overflow:hidden;</span><br><span class=\"line\">3.超出文字用省略号表示</span><br><span class=\"line\">text-overflow:ellipsis;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>多行</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">兼容性差，适合移动端和wwebkit浏览器</span><br><span class=\"line\">overflow:hidden;</span><br><span class=\"line\">text-overflow:ellipsis;</span><br><span class=\"line\">/*弹性盒子显示*/</span><br><span class=\"line\">display: -webkit-box;</span><br><span class=\"line\">/*限时一个快元素显示的文本行数*/</span><br><span class=\"line\">-webkit-line-clap:2;</span><br><span class=\"line\">/*设置伸缩盒对象的子元素的排列方式和*/</span><br><span class=\"line\">-webkit-box-orient:vertical;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"盒子间的边框问题\"><a href=\"#盒子间的边框问题\" class=\"headerlink\" title=\"盒子间的边框问题\"></a>盒子间的边框问题</h3><p>防止边框重叠</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">ul li&#123;</span><br><span class=\"line\">   list-style:none;</span><br><span class=\"line\">   float:left;</span><br><span class=\"line\">   width:111Px;</span><br><span class=\"line\">   height:222px;</span><br><span class=\"line\">   border: 2px solid red;</span><br><span class=\"line\">   margin-left: -1px;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>鼠标移动显示边框</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/*若盒子有定位，则利用z-index提高层级*/</span><br><span class=\"line\">ul ll:hover&#123;</span><br><span class=\"line\">   z-index:1;</span><br><span class=\"line\">   border:1px solid red;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">/*若盒子没有定位则鼠标经过时添加相对定位*/</span><br><span class=\"line\">ul li:hover&#123;</span><br><span class=\"line\">   position:relative;</span><br><span class=\"line\">   border: 2px solid red;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":["study"],"tags":[]},{"title":"HTML超文本标记语言","url":"http://www.baidu.com/2020/11/10/html/","content":"<h1 id=\"HTML-是用来描述网页的一种语言\"><a href=\"#HTML-是用来描述网页的一种语言\" class=\"headerlink\" title=\"HTML 是用来描述网页的一种语言\"></a>HTML 是用来描述网页的一种语言</h1><p>emmet语法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">div*3快速生成3个&lt;div&gt;&lt;/div&gt;</span><br><span class=\"line\">父子级关系：ul&gt;li</span><br><span class=\"line\">兄弟关系：div+p</span><br><span class=\"line\">生成带有类名的：.demo或#two</span><br><span class=\"line\">有顺序的：加上$符号</span><br><span class=\"line\">在生成的标签内写内容：&#123;&#125;</span><br></pre></td></tr></table></figure>\n\n<p>浏览器内核:</p>\n<table>\n<thead>\n<tr>\n<th>浏览器</th>\n<th>内核</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>IE</td>\n<td>Trident</td>\n</tr>\n<tr>\n<td>firefox</td>\n<td>Gecko</td>\n</tr>\n<tr>\n<td>safari</td>\n<td>Webkit</td>\n</tr>\n<tr>\n<td>chrome/Opera</td>\n<td>Blink</td>\n</tr>\n</tbody></table>\n<h2 id=\"HTML-标签\"><a href=\"#HTML-标签\" class=\"headerlink\" title=\"HTML 标签\"></a>HTML 标签</h2><blockquote>\n<p>HTML 标记标签通常被称为 HTML 标签 (HTML tag)。</p>\n</blockquote>\n<ul>\n<li>HTML 标签是由尖括号包围的关键词，比如<code> &lt;html&gt;</code></li>\n<li>HTML 标签通常是成对出现的，称为双标签,如<code> &lt;html&gt;</code> 和<code> &lt;/html&gt;</code>.也有单标签：<code>&lt;br/&gt;</code></li>\n<li>标签对中的第一个标签是开始标签，第二个标签是结束标签</li>\n<li>开始和结束标签也被称为开放标签和闭合标签 </li>\n</ul>\n<p>网页：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;!DOCTYPE html&gt;\t//使用html5标准进行解析网页</span><br><span class=\"line\">&lt;html lang&gt;</span><br><span class=\"line\">&lt;head&gt;\t\t\t//网页头部</span><br><span class=\"line\">&lt;title&gt;title&lt;/title&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br><span class=\"line\">&lt;style&gt;&lt;/style&gt;</span><br><span class=\"line\">&lt;script&gt;&lt;/script&gt;</span><br><span class=\"line\">&lt;body&gt;&lt;/body&gt;</span><br><span class=\"line\">&lt;/html&gt;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<ul>\n<li>base</li>\n</ul>\n<p><code>&lt;base href=&quot;&quot; target=&quot;_top&quot;&gt;</code>所有链接标签的默认链接</p>\n<ul>\n<li>meta视口标签</li>\n</ul>\n<p>常用于指定网页描述、关键词、作者、事件等</p>\n<p><code>&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width,user-scalable=no,initial-scale=1.0,maximum-scale=1.0&quot;&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>width</td>\n<td>设置的是viewport宽度，可设置device-width特殊值</td>\n</tr>\n<tr>\n<td>initial-scale</td>\n<td>初始缩放比，大于0的数字</td>\n</tr>\n<tr>\n<td>maximum-scale</td>\n<td>最大缩放比，大于0的数字</td>\n</tr>\n<tr>\n<td>minimum-scale</td>\n<td>最小缩放比，大于0的数字</td>\n</tr>\n<tr>\n<td>user-scalable</td>\n<td>用户是否可以缩放</td>\n</tr>\n</tbody></table>\n<h3 id=\"常用标签\"><a href=\"#常用标签\" class=\"headerlink\" title=\"常用标签\"></a>常用标签</h3><ul>\n<li><p>标题标签:<code>&lt;h1&gt;----&lt;h6&gt;</code></p>\n</li>\n<li><p>段落标签：<code>&lt;p&gt;</code></p>\n</li>\n<li><p>换行标签：<code>&lt;br /&gt;</code></p>\n</li>\n<li><p>分割线： <code>&lt;hr&gt;</code></p>\n</li>\n<li><p>字体：<code>&lt;h1&gt;这是1号标题&lt;/h1&gt; &lt;font size=&quot;6&quot;&gt;这是6号字体文本&lt;/font&gt; 可以使用font-family（字体），color（颜色），和font-size（字体大小）属性来定义字体的样式,使用 text-align（文字对齐）属性指定文本的水平与垂直对齐方式</code>  </p>\n</li>\n</ul>\n<blockquote>\n<p>嵌套问题：超链接不能嵌套超链接，p标签不能嵌套p标签，标题标签h1-h6也不能嵌套；</p>\n</blockquote>\n<ul>\n<li><p>内部样式表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当单个文件需要特别样式时，就可以使用内部样式表。你可以在&lt;head&gt; 部分通过 &lt;style&gt;标签定义内部样式表:&lt;head&gt;</span><br><span class=\"line\">&lt;style type=&quot;text/css&quot;&gt;</span><br><span class=\"line\">body &#123;background-color:yellow;&#125;</span><br><span class=\"line\">p &#123;color:blue;&#125;</span><br><span class=\"line\">&lt;/style&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>外部样式表</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">当样式需要被应用到很多页面的时候，外部样式表将是理想的选择。</span><br><span class=\"line\">使用外部样式表，你就可以通过更改一个文件来改变整个站点的外观。</span><br><span class=\"line\">&lt;head&gt;</span><br><span class=\"line\">&lt;!--定义了文档与外部资源的关系--&gt;</span><br><span class=\"line\">&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;mystyle.css&quot;&gt;</span><br><span class=\"line\">&lt;/head&gt;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>背景色属性:<code>&lt;p style=&quot;background-color:green;&quot;&gt;这是一个段落。&lt;/p&gt;</code></p>\n</li>\n<li><p>加粗：<code>&lt;strong&gt;或&lt;b&gt;</code></p>\n</li>\n<li><p>斜体：<code>&lt;em&gt;或&lt;i&gt;</code></p>\n</li>\n<li><p>下划线：<code>&lt;ins&gt;或&lt;u&gt;</code></p>\n</li>\n<li><p>盒子: <code>&lt;div&gt;与&lt;span&gt;</code></p>\n</li>\n<li><p>图像标签和路径：<code>&lt;img src=&quot;图像路径&quot;/&gt;</code></p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>src</td>\n<td>图片路径</td>\n</tr>\n<tr>\n<td>alt</td>\n<td>图片不显示时提醒文字</td>\n</tr>\n<tr>\n<td>title</td>\n<td></td>\n</tr>\n<tr>\n<td>border</td>\n<td>边框</td>\n</tr>\n<tr>\n<td>width,height</td>\n<td>宽，高</td>\n</tr>\n</tbody></table>\n<ul>\n<li>超链接标签: <code>&lt;a href=&quot;跳转目标(外连接如www.xxx.com，内链接如xxx.html,空链接:#，下载链接)&quot; target=&quot;弹出方式(_self在本窗口打开，_blank在新窗口打开,_top跳出弹窗,&quot;&gt;文本图像&lt;/a&gt;</code></li>\n</ul>\n<ul>\n<li><p>锚点: <code>&lt;a href=&quot;#one&quot;&gt;&lt;/a&gt;   &lt;h3 id=&quot;one&quot;&gt;标题&lt;/h3&gt;</code></p>\n</li>\n<li><p>特殊符号:</p>\n</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>空格</td>\n<td><code>&amp;nbsp;</code></td>\n</tr>\n<tr>\n<td>小于号</td>\n<td><code>&amp;lt;</code></td>\n</tr>\n<tr>\n<td>大于号</td>\n<td><code>&amp;gt;</code></td>\n</tr>\n</tbody></table>\n<ul>\n<li>表格标签：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;table width=&quot;500px&quot; border=&quot;1px&quot; cellspacing=&quot;0&quot;&gt;  &lt;!--定义表格标签,属性引号可要可不要--&gt;</span><br><span class=\"line\">\t&lt;thead&gt;&lt;!--头部--&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt; </span><br><span class=\"line\">\t\t\t&lt;th&gt;&lt;/th&gt;&lt;!--表头，td-&gt;th加粗文字--&gt;</span><br><span class=\"line\">\t\t\t&lt;td&gt;&lt;/td&gt;&lt;!--列，必须嵌套在行中--&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;/thead&gt;</span><br><span class=\"line\">\t&lt;tbody&gt;&lt;!--主体--&gt;</span><br><span class=\"line\">&lt;col width=&quot;100px&quot;&gt;&lt;!--第1列的宽度--&gt;</span><br><span class=\"line\">&lt;col width=&quot;100px&quot;&gt;&lt;!--第2列的宽度--&gt;</span><br><span class=\"line\">&lt;colgroup span=&quot;6&quot; width=&quot;100px&quot;&gt;&lt;!--接下来6列合成一组，一起设置宽度--&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt; &lt;!--行--&gt;</span><br><span class=\"line\">\t\t\t&lt;td colspan=&quot;2&quot;&gt;&lt;/td&gt;&lt;!--合并单元格,需要删除多余的单元格--&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;td rowspan=2&quot;&gt;&lt;!--合并行,需要在下面行中删除一个单元格--&gt;&lt;/td&gt;</span><br><span class=\"line\">\t\t\t\t&lt;td&gt;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t&lt;tr height=&quot;100px&quot;&gt;\t&lt;!--设置行高，宽无法设置--&gt;</span><br><span class=\"line\">\t\t\t&lt;td width=&quot;100px&quot;&gt;\t&lt;!--设置列宽，一整列都一致变化,哪个大用哪个--&gt;</span><br><span class=\"line\">\t\t\t&lt;/td&gt;</span><br><span class=\"line\">\t\t\t&lt;td&gt;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t\t&lt;tr&gt;</span><br><span class=\"line\">\t\t\t&lt;td&gt;&lt;/td&gt;</span><br><span class=\"line\">\t\t&lt;/tr&gt;</span><br><span class=\"line\">\t&lt;/tbody&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">\t&lt;tfoot&gt;&lt;!--页脚--&gt;</span><br><span class=\"line\">\t&lt;/tfoot&gt;</span><br><span class=\"line\">&lt;/table&gt;</span><br></pre></td></tr></table></figure>\n\n<p>表格属性：</p>\n<table>\n<thead>\n<tr>\n<th>属性名</th>\n<th>属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>align</td>\n<td>left,center,right</td>\n<td>表格相对周围元素的对齐方式</td>\n</tr>\n<tr>\n<td>border</td>\n<td>1或”像素值”</td>\n<td>边框</td>\n</tr>\n<tr>\n<td>cellpadding</td>\n<td>像素值</td>\n<td>单元边沿与内容的的距离</td>\n</tr>\n<tr>\n<td>cellspacing</td>\n<td>像素值</td>\n<td>单元格间的空白</td>\n</tr>\n<tr>\n<td>width，height</td>\n<td></td>\n<td>高，宽</td>\n</tr>\n</tbody></table>\n<ul>\n<li><p>列表标签</p>\n<ol>\n<li>无序标签：<code>&lt;ul&gt;&lt;li&gt;列表&lt;/li&gt;&lt;li&gt;列表&lt;/li&gt;&lt;li&gt;列表&lt;/li&gt;&lt;/ul&gt;</code>;去掉小圆点：<code>list-style:none</code></li>\n<li>有序标签：<code>&lt;ol&gt;&lt;li&gt;列表&lt;/li&gt;&lt;li&gt;列表&lt;/li&gt;&lt;li&gt;列表&lt;/li&gt;&lt;/ol&gt;</code></li>\n<li>自定义列表：<code>&lt;dl&gt;&lt;dt&gt;名词&lt;/dt&gt;&lt;&lt;dd&gt;名词解释&lt;/dd&gt;dd&gt;名词解释&lt;/dd&gt;&lt;dl&gt;</code></li>\n</ol>\n</li>\n<li><p>表单域：</p>\n</li>\n</ul>\n<p><code>&lt;form action=&quot;url地址(服务器程序的url地址)&quot; method=&quot;提交方式(get/post)&quot; name=&quot;表单域名称&quot;&gt;表单域控件&lt;/form&gt;</code><br>用<code>&lt;input type=&quot;sumit&quot; value=&quot;提交&quot; /&gt;</code>提交数据，用<code>&lt;input type=&quot;reset&quot; value=&quot;重置&quot; /&gt;</code>重置输入；input必须放在form标签内才能提交，所有提交的数据必须有name属性；</p>\n<ul>\n<li><p>input表单元素：<br><code>&lt;input type=&quot;属性值&quot; name=&quot;名称;单选按钮与复选框应是相同的name值&quot; value=&quot;规定input元素的值&quot; checked=&quot;首次加载时选中&quot; maxlength=&quot;输入字段的最大长度&quot;/&gt;</code></p>\n</li>\n<li><p>input 样式修改</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">去除边框：</span><br><span class=\"line\">border:none;</span><br><span class=\"line\">ouline:none;</span><br><span class=\"line\">居中：</span><br><span class=\"line\">vertical-align:middle;</span><br><span class=\"line\">隐藏radio的按钮:</span><br><span class=\"line\">display:none</span><br></pre></td></tr></table></figure>\n\n<table>\n<thead>\n<tr>\n<th>type属性值</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>button</td>\n<td>按键</td>\n</tr>\n<tr>\n<td>checkbox</td>\n<td>定义复选框</td>\n</tr>\n<tr>\n<td>file</td>\n<td>供文件上传</td>\n</tr>\n<tr>\n<td>hidden</td>\n<td>隐藏输入字段</td>\n</tr>\n<tr>\n<td>image</td>\n<td>图像形式提交按钮</td>\n</tr>\n<tr>\n<td>password</td>\n<td>密码字段</td>\n</tr>\n<tr>\n<td>radio</td>\n<td>定义单选按钮</td>\n</tr>\n<tr>\n<td>reset</td>\n<td>重置按钮</td>\n</tr>\n<tr>\n<td>submit</td>\n<td>提交按钮</td>\n</tr>\n<tr>\n<td>text</td>\n<td>输入字段</td>\n</tr>\n</tbody></table>\n<ul>\n<li>label标签：用于绑定表单域，点击自动调整到输入框</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;label\\&gt;for=&quot;sex&quot;&gt; 男\\&lt;/label&gt;</span><br><span class=\"line\">&lt;input type=&quot;radio&quot; name=&quot;sex&quot; id=&quot;sex&quot; /&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>select:下拉列表</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;select&gt;</span><br><span class=\"line\">/*至少包含一对option*/</span><br><span class=\"line\">&lt;option&gt;\\&lt;/option&gt;</span><br><span class=\"line\">&lt;option&gt;\\&lt;/option&gt;</span><br><span class=\"line\">/*默认选中*/</span><br><span class=\"line\">&lt;option selected=&quot;selected&quot;\\&gt;xxx\\&lt;/option&gt;</span><br><span class=\"line\">&lt;/select&gt;</span><br></pre></td></tr></table></figure></li>\n<li><p>textarea:多行文本输入框</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;textarea rows=&quot;3&quot; cols=&quot;28&quot;&gt;   /*cols:每行字符数； rows：行数*/</span><br><span class=\"line\">内容</span><br><span class=\"line\">&lt;/textarea&gt;</span><br></pre></td></tr></table></figure>\n<hr>\n<h3 id=\"HTML5特性\"><a href=\"#HTML5特性\" class=\"headerlink\" title=\"HTML5特性\"></a>HTML5特性</h3><h4 id=\"1-新增语义化标签\"><a href=\"#1-新增语义化标签\" class=\"headerlink\" title=\"1.新增语义化标签\"></a>1.新增语义化标签</h4><p>标签语义化指根据网页中的内容结构，选择适合的标签进行编写。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;article&gt;</span><br><span class=\"line\">&lt;aside&gt;\t\t元素页面主内容之外的某些内容（比如侧栏）</span><br><span class=\"line\">&lt;details&gt;\t定义用户能够查看或隐藏的额外细节。</span><br><span class=\"line\">&lt;figcaption&gt; \t定义 &lt;figure&gt; 元素的标题。</span><br><span class=\"line\">&lt;figure&gt;\t规定自包含内容，比如图示、图表、照片、代码清单等。</span><br><span class=\"line\">&lt;footer&gt;</span><br><span class=\"line\">&lt;header&gt;</span><br><span class=\"line\">&lt;main&gt;</span><br><span class=\"line\">&lt;mark&gt;\t定义重要的或强调的文本。</span><br><span class=\"line\">&lt;nav&gt;</span><br><span class=\"line\">&lt;section&gt;\t定义文档中的节。</span><br><span class=\"line\">&lt;summary&gt;\t定义 &lt;details&gt; 元素的可见标题。</span><br><span class=\"line\">&lt;time&gt;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"2-新增多媒体标签\"><a href=\"#2-新增多媒体标签\" class=\"headerlink\" title=\"2.新增多媒体标签\"></a>2.新增多媒体标签</h4><ul>\n<li>\\&lt;video&gt;</li>\n</ul>\n<p><code>&lt;video src=&quot;&quot; controls=&quot;controls&quot; &gt;&lt;/video&gt;</code></p>\n<p>属性：</p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>自动播放，谷歌禁止，可添加muted属性解决</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>播放控件</td>\n</tr>\n<tr>\n<td>width;height</td>\n<td>宽高</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>循环播放</td>\n</tr>\n<tr>\n<td>preload</td>\n<td>auto(加载视频);none(不加载)</td>\n</tr>\n<tr>\n<td>poster</td>\n<td>imgurl(加载等待图片)</td>\n</tr>\n<tr>\n<td>muted</td>\n<td>静音播放</td>\n</tr>\n</tbody></table>\n<ul>\n<li>\\&lt;audio&gt;</li>\n</ul>\n<p><code>&lt;audio src=&quot;&quot; &gt;&lt;/audio&gt;</code></p>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>autoplay</td>\n<td>自动播放，谷歌禁止</td>\n</tr>\n<tr>\n<td>loop</td>\n<td>循环播放</td>\n</tr>\n<tr>\n<td>controls</td>\n<td>播放控件</td>\n</tr>\n</tbody></table>\n<h4 id=\"3-input类型\"><a href=\"#3-input类型\" class=\"headerlink\" title=\"3.input类型\"></a>3.input类型</h4><table>\n<thead>\n<tr>\n<th>属性值</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>type=”email”</td>\n<td>限制必须输入email类型</td>\n</tr>\n<tr>\n<td>type=”number”</td>\n<td>数字类型</td>\n</tr>\n<tr>\n<td>type=”search”</td>\n<td>搜索框</td>\n</tr>\n<tr>\n<td>type=”color”</td>\n<td>颜色</td>\n</tr>\n<tr>\n<td>type=”tel”</td>\n<td>手机号码</td>\n</tr>\n<tr>\n<td>type=”date”</td>\n<td>日期</td>\n</tr>\n<tr>\n<td>maxlength=””</td>\n<td>允许输入最大长度,不会提示</td>\n</tr>\n<tr>\n<td>max</td>\n<td>允许输入最大长度</td>\n</tr>\n<tr>\n<td>min</td>\n<td>允许输入最大长度</td>\n</tr>\n</tbody></table>\n<h4 id=\"4-表单属性\"><a href=\"#4-表单属性\" class=\"headerlink\" title=\"4.表单属性\"></a>4.表单属性</h4><table>\n<thead>\n<tr>\n<th>属性</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>placeholder</td>\n<td>提示文本</td>\n</tr>\n<tr>\n<td>multiple</td>\n<td>可多选文件提交</td>\n</tr>\n<tr>\n<td>autofocus</td>\n<td>自动聚焦</td>\n</tr>\n<tr>\n<td>required</td>\n<td>不能为空，必填</td>\n</tr>\n</tbody></table>\n<h3 id=\"5-canvas\"><a href=\"#5-canvas\" class=\"headerlink\" title=\"5. canvas\"></a>5. canvas</h3><p>使用js在网页上绘制图像<br><code>&lt;canvas id=&#39;&#39;  width=&#39;&#39; height=&#39;&#39;&gt;&lt;/canvas&gt;</code></p>\n<h3 id=\"本地存储localStorage\"><a href=\"#本地存储localStorage\" class=\"headerlink\" title=\"本地存储localStorage\"></a>本地存储localStorage</h3><p>无时间限制，5M，只存储字符串</p>\n<h3 id=\"地理定位Geolocation\"><a href=\"#地理定位Geolocation\" class=\"headerlink\" title=\"地理定位Geolocation\"></a>地理定位Geolocation</h3><h3 id=\"socket通信：webscoket\"><a href=\"#socket通信：webscoket\" class=\"headerlink\" title=\"socket通信：webscoket\"></a>socket通信：webscoket</h3><h3 id=\"后台js：webworkers\"><a href=\"#后台js：webworkers\" class=\"headerlink\" title=\"后台js：webworkers\"></a>后台js：webworkers</h3>","categories":["study"],"tags":[]},{"title":"dwm快捷键","url":"http://www.baidu.com/2020/10/11/dwm/","content":"<h2 id=\"基础快捷键\"><a href=\"#基础快捷键\" class=\"headerlink\" title=\"基础快捷键\"></a>基础快捷键</h2><ul>\n<li><p>打开新终端<br><code>Alt + shift + Enter</code></p>\n</li>\n<li><p>关闭一个窗口<br><code>Alt + shift + C</code></p>\n</li>\n<li><p>窗口横向排列<br><code>Alt + D</code></p>\n</li>\n<li><p>窗口竖向排列<br><code>Alt + I</code></p>\n</li>\n<li><p>窗口位置互换<br><code>Alt + Enter</code></p>\n</li>\n<li><p>在窗口间切换<br><code>Alt + J</code><br><code>Alt + k</code></p>\n</li>\n<li><p>改变窗口的长度/比例<br><code>Alt + H</code><br><code>Alt + L</code></p>\n</li>\n<li><p>平铺模式（tiling)<br><code>Alt + T</code></p>\n</li>\n<li><p>单窗口模式<br><code>Alt + M</code></p>\n</li>\n<li><p>浮动模式（float)<br><code>Alt + F</code></p>\n</li>\n<li><p>窗口模式切换<br><code>Alt + 空格</code><br><code>Alt + shift + 空格</code></p>\n</li>\n</ul>\n<h3 id=\"多屏幕问题\"><a href=\"#多屏幕问题\" class=\"headerlink\" title=\"多屏幕问题\"></a>多屏幕问题</h3><p>在主副屏之间移动焦点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 移动焦点至左边屏幕</span><br><span class=\"line\">Mod + &lt; </span><br><span class=\"line\"># 移动焦点至右边屏幕</span><br><span class=\"line\">Mod + &gt;</span><br></pre></td></tr></table></figure>\n\n<p>在主副屏之间移动窗口</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 移动窗口至左边屏幕</span><br><span class=\"line\">Mod + shift + &lt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>切换标签页</li>\n</ul>\n<p><code>Mod + num</code></p>\n<ul>\n<li>移动窗口至某标签页</li>\n</ul>\n<p><code>Mod + shift + num</code></p>\n<h3 id=\"自定义快捷键\"><a href=\"#自定义快捷键\" class=\"headerlink\" title=\"自定义快捷键\"></a>自定义快捷键</h3><p>我们以flamshot为例，为flameshot设置截图快捷键</p>\n<p>首先在/* commands*/下添加你要设置快捷键的命令</p>\n<ul>\n<li>flameshot的截图命令是：flameshot gui，后面没有参数所以设为NULL，这条命令的名字我们设为flameshot</li>\n</ul>\n<p><code>static const char *flameshot[]  = &#123; &quot;flameshot&quot;,&quot;gui&quot;, NULL &#125;;</code></p>\n<p>进行快捷键和命令的绑定</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 我们设定截图的快捷键是：Alt + Ctrl + A(MODKEY对应Alt，ControlMask对应Ctrl，XK_a对应A)。然后将该快捷键绑定到名字为flameshot的命令。spawn自己百度</span><br><span class=\"line\">&#123; MODKEY|ControlMask,           XK_a,      spawn,          &#123;.v = flameshot &#125; &#125;,</span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":[]},{"title":"hexo搭建博客","url":"http://www.baidu.com/2020/10/11/hexo/","content":"<h2 id=\"安装nodejs\"><a href=\"#安装nodejs\" class=\"headerlink\" title=\"安装nodejs\"></a>安装nodejs</h2><ul>\n<li>archlinux:<code>pacman -S nodejs</code></li>\n<li>ubuntu </li>\n</ul>\n<h2 id=\"安装npm\"><a href=\"#安装npm\" class=\"headerlink\" title=\"安装npm\"></a>安装npm</h2><ul>\n<li>archlinux:<br><code>pacman -S npm</code></li>\n<li>ubuntu:<br><code>apt-get install npm </code></li>\n</ul>\n<h3 id=\"换源\"><a href=\"#换源\" class=\"headerlink\" title=\"换源\"></a>换源</h3><p><code>npm config set registry https://registry.npm.taobao.org  //添加淘宝源</code></p>\n<p>使用nrm切换镜像源</p>\n<p><code>npm install nrm -g //全局安装</code></p>\n<p><code>nrm ls  //查看所有镜像源</code></p>\n<p><code>nrm use taobao  //切换为淘宝镜像源</code></p>\n<p>查看镜像源：<code>npm get registry</code></p>\n<p>安装hexo</p>\n<p><code>npm install -g hexo-cli</code></p>\n<h2 id=\"ssh\"><a href=\"#ssh\" class=\"headerlink\" title=\"ssh\"></a>ssh</h2><p>查看ssh</p>\n<p><code>cd ~/.ssh</code></p>\n<p>若无，则生成ssh</p>\n<p><code>ssh-keygen -t rsa -C 用户名</code></p>\n<p>一路回车默认安装,打开生成的<code>id_rsa.pub</code>复制</p>\n<p>设置git用户名邮箱  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的账号&quot;</span><br><span class=\"line\">git config --global user.email &quot;你邮箱地址&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo\"><a href=\"#hexo\" class=\"headerlink\" title=\"hexo\"></a>hexo</h2><p>进入一个文件夹进行初始化：<code>hexo init</code></p>\n<p>编辑<code>_config.yml</code><br>找到</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type:</span><br></pre></td></tr></table></figure>\n\n<p>修改为：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">  type: git</span><br><span class=\"line\">  repository: ........... ///克隆地址</span><br><span class=\"line\">  branchL: master</span><br></pre></td></tr></table></figure>\n\n<p>执行<code>hexo g -d </code>上传代码（注意第一次提交需要输入yes，不要一路回车）</p>\n<p><strong>常用命令：</strong></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo generate\t//Generate static files</span><br><span class=\"line\">hexo server\t//Run server</span><br><span class=\"line\">hexo deploy\t//Deploy to remote sites</span><br><span class=\"line\"></span><br><span class=\"line\">hexo new My_New_Post   \t//Create a new post</span><br></pre></td></tr></table></figure>\n<h3 id=\"hexo博客迁移\"><a href=\"#hexo博客迁移\" class=\"headerlink\" title=\"hexo博客迁移\"></a>hexo博客迁移</h3><p>先新建一个文件夹，初始化后，从原来的文件夹中拷贝下列文件进行覆盖</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">themes/</span><br><span class=\"line\">_config.yml</span><br><span class=\"line\">------------------</span><br><span class=\"line\">package.json</span><br><span class=\"line\">scaffolds/</span><br><span class=\"line\">source/</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"Fexo\"><a href=\"#Fexo\" class=\"headerlink\" title=\"Fexo\"></a>Fexo</h2><ul>\n<li><p>安装</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> cd my-blog</span><br><span class=\"line\"> git clone git@github.com:forsigner/fexo.git themes/fexo</span><br><span class=\"line\">git clone https://github.com/forsigner/fexo.git</span><br></pre></td></tr></table></figure></li>\n<li><p>配置主题<br>主题配置全部在theme/fexo里面完成，所里下面所有配置指的是配置theme/fexo/_config.yml。</p>\n</li>\n</ul>\n<p>设置基本信息</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">blog_name: Forsigner</span><br><span class=\"line\">slogan: Find the bug of the world</span><br></pre></td></tr></table></figure>\n<p>设置头像</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># relative url</span><br><span class=\"line\">avatar: /images/avatar.jpg</span><br><span class=\"line\"># or absolute url</span><br><span class=\"line\">avatar: https://avatars0.githubusercontent.com/u/2668081?v=3&amp;s=460</span><br></pre></td></tr></table></figure>\n\n<p>设置favicon</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">favicon: /favicon.ico</span><br></pre></td></tr></table></figure>\n<p>设置关键词<br>关键词主要作用是优化SEO</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">keywords: forsigner,前端,设计,Hexo主题,前端开发,用户体验,设计,frontend,design,nodejs,JavaScript</span><br></pre></td></tr></table></figure>\n<p>设置首页内容<br>你可以设置是否在首页直接显示文章</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">init_page_content: HOME_NAV  # HOME_NAV | POST</span><br></pre></td></tr></table></figure>\n\n<p>设置首页导航</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">home_nav:</span><br><span class=\"line\">  - name: Blog</span><br><span class=\"line\">    url: /archives</span><br><span class=\"line\">  - name: Github</span><br><span class=\"line\">    url: https://github.com/forsigner</span><br><span class=\"line\">    target: _blank</span><br><span class=\"line\">  - name: Douban</span><br><span class=\"line\">    url: http://www.douban.com/people/forsigner/</span><br><span class=\"line\">    target: _blank</span><br><span class=\"line\">  - name: Twitter</span><br><span class=\"line\">    url: https://twitter.com/forsigner</span><br><span class=\"line\">    target: _blank</span><br></pre></td></tr></table></figure>\n\n<p>设置页面导航</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page_nav:</span><br><span class=\"line\">  - 博客: /archives/</span><br><span class=\"line\">  - 分类: /category/</span><br><span class=\"line\">  - 标签: /tag/</span><br><span class=\"line\">  - 友链: /link/</span><br><span class=\"line\">  - 关于: /about/</span><br><span class=\"line\">  - RSS: /atom.xml</span><br></pre></td></tr></table></figure>\n\n<p>设置页面导航样式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">page_nav_style: CIRCLE  # CIRCLE|ROUND_RECT</span><br></pre></td></tr></table></figure>\n\n<p>设置面包屑</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">breadcrumb:</span><br><span class=\"line\">  isShow: true # true|fase</span><br></pre></td></tr></table></figure>\n\n<p>设置盒子<br>你可设置盒子是否显示和其显示的文字</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">toolbox:</span><br><span class=\"line\">  isShow: true # true|fase</span><br><span class=\"line\">  text: 盒子</span><br><span class=\"line\">搜索页面 Slogan</span><br><span class=\"line\">search_slogan:</span><br><span class=\"line\">  isShow: true # true|fase</span><br><span class=\"line\">  text: Can you find the bug of world ~</span><br><span class=\"line\">友链页面 Slogan</span><br><span class=\"line\">link_slogan:</span><br><span class=\"line\">  isShow: true # true|fase</span><br><span class=\"line\">  text: 交换友链可以邮件 forsigner@gmail.com</span><br></pre></td></tr></table></figure>\n\n<p>设置文章标题对齐方式</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">post:</span><br><span class=\"line\">  header_align: center # left|center</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n<p>启用页面<br>你可以启用你想要的页面，在开启关于、友链、项目的页面后，你可以对这些设置这些页面的内容</p>\n<p>新建分类、搜索、关于界面：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br><span class=\"line\">//进入source/categories/文件夹</span><br><span class=\"line\">//编辑index.md文件,添加type或layout属性</span><br><span class=\"line\">---</span><br><span class=\"line\">title: categories</span><br><span class=\"line\">layout: categories</span><br><span class=\"line\">或</span><br><span class=\"line\">type: categories</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n\n<p>启用分类页面<br>在博客根目录执行 <code>hexo new page category</code><br>修改my-blog/source/category/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: category</span><br><span class=\"line\">layout: category</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<p>启用标签页面<br>在博客根目录执行<code> hexo new page tag</code><br>修改my-blog/source/tag/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: tag</span><br><span class=\"line\">layout: tag</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启用友链页面</p>\n<p>在博客根目录执行<code> hexo new page link</code><br>修改my-blog/source/link/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: link</span><br><span class=\"line\">layout: link</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启用友链页面后，可以设置类似以下格式的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">link:</span><br><span class=\"line\">  - name: 织网</span><br><span class=\"line\">    info: 身体和灵魂，总有一个在路上</span><br><span class=\"line\">    url: http://zheng-ji.info/</span><br><span class=\"line\">    avatar: https://avatars3.githubusercontent.com/u/1414745?v=3&amp;s=460</span><br><span class=\"line\">  - name: Dongyado</span><br><span class=\"line\">    info: 生命不止，折腾不息</span><br><span class=\"line\">    url: http://dongyado.com/</span><br><span class=\"line\">    avatar: https://avatars0.githubusercontent.com/u/6274940?v=3&amp;s=460</span><br><span class=\"line\">  - name: OrangeCoder</span><br><span class=\"line\">    info: android ffmpeg nodejs gradle</span><br><span class=\"line\">    url: http://orangecoder.com/</span><br><span class=\"line\">    avatar: https://avatars0.githubusercontent.com/u/2263785?v=3&amp;s=460</span><br><span class=\"line\">  - name: EverET</span><br><span class=\"line\">    info: 好记性不如烂笔头</span><br><span class=\"line\">    url: http://everet.org/about-me/</span><br><span class=\"line\">    avatar: https://avatars1.githubusercontent.com/u/1559563?v=3&amp;s=460</span><br></pre></td></tr></table></figure>\n\n<p>启用关于页面</p>\n<p>在博客根目录执行 <code>hexo new page about</code><br>修改my-blog/source/about/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: about</span><br><span class=\"line\">layout: about</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启用关于页面后，可以设置类似以下格式的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">about:</span><br><span class=\"line\">  - type: me</span><br><span class=\"line\">    icon: icon-user</span><br><span class=\"line\">    text_value:</span><br><span class=\"line\">    - &quot;Scut，1991，Spring.&quot;</span><br><span class=\"line\">    - &quot;喜欢设计，擅长编程，喜欢睡懒觉.&quot;</span><br><span class=\"line\">    - &quot;前端开发工程师，常用 HTML / CSS / JavaScript.&quot;</span><br><span class=\"line\">  - type: Github</span><br><span class=\"line\">    icon: icon-github</span><br><span class=\"line\">    text_key: Github</span><br><span class=\"line\">    text_value: &quot;@forsigner&quot;</span><br><span class=\"line\">    text_value_url: https://github.com/forsigner</span><br><span class=\"line\">  - type: weibo</span><br><span class=\"line\">    icon: icon-weibo</span><br><span class=\"line\">    text_key: 微博</span><br><span class=\"line\">    text_value: &quot;@forsigner&quot;</span><br><span class=\"line\">    text_value_url: http://weibo.com/u/1847075964</span><br><span class=\"line\">  - type: mail</span><br><span class=\"line\">    icon: icon-mail</span><br><span class=\"line\">    text_key: Gmail</span><br><span class=\"line\">    text_value: &quot;forsigner@gmail.com&quot;</span><br><span class=\"line\">  - type: location</span><br><span class=\"line\">    icon: icon-location</span><br><span class=\"line\">    text_value: 珠海</span><br></pre></td></tr></table></figure>\n\n<p>启用项目页面</p>\n<p>在博客根目录执行 <code>hexo new page project</code><br>修改my-blog/source/project/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: project</span><br><span class=\"line\">layout: project</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>启用项目页面后，可以设置类似以下格式的内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">project:</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: fexo</span><br><span class=\"line\">    url: https://github.com/forsigner/fexo</span><br><span class=\"line\">    intro: A minimalist design theme for hexo</span><br><span class=\"line\">  # - type: company</span><br><span class=\"line\">  #   name: Fexo</span><br><span class=\"line\">  #   url: https://github.com/forsigner/fexo</span><br><span class=\"line\">  #   intro: A minimalist design theme for hexo</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: beside</span><br><span class=\"line\">    url: https://github.com/forsigner/beside</span><br><span class=\"line\">    intro: I need you beside me</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: web-fontmin</span><br><span class=\"line\">    url: https://github.com/forsigner/web-fontmin</span><br><span class=\"line\">    intro: 字体子集化，在线提取你需要的字体</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: magic-check</span><br><span class=\"line\">    url: https://github.com/forsigner/magic-check</span><br><span class=\"line\">    intro: Beautify Radio and Checkbox with pure CSS</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: nice-bar</span><br><span class=\"line\">    url: https://github.com/forsigner/nice-bar</span><br><span class=\"line\">    intro: A nice and lightweight scrollbar</span><br><span class=\"line\">  - type: personal</span><br><span class=\"line\">    name: angular-nice-bar</span><br><span class=\"line\">    url: https://github.com/forsigner/angular-nice-bar</span><br><span class=\"line\">    intro: A nice and lightweight scrollbar in Angular</span><br></pre></td></tr></table></figure>\n\n<p>启用搜索页面</p>\n<p>在博客根目录执行 <code>hexo new page search</code><br>修改my-blog/source/search/index.md里面的内容:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: search</span><br><span class=\"line\">layout: search</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n\n<p>然后安装 Hexo 插件 <code>hexo-search</code> (重要)<br>先进入 blog 的根目录</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd my-blog</span><br><span class=\"line\">npm install hexo-search --save</span><br></pre></td></tr></table></figure>\n\n<p>个性化设置</p>\n<p>自定义CSS</p>\n<p>也许 Fexo 默认的样式满足不了你个性化的需求，使用此配置你可以在不修改 Fexo 源码的情况下，任意的自定义 Fexo 的样式，方法如下：</p>\n<p>在 blog 根目录新建文件夹 my-blog/source/css<br>然后在此目录新建一个 CSS，名字随意，如 personal-style.css<br>修改fexo/_config.yml下面配置，然后你就可以写你想要的样式了<br>personal_style: /css/personal-style.css</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"># 如果不想启用自定义样式，注释这行就可以了</span><br><span class=\"line\">比如我的个人自定义样式如下：</span><br><span class=\"line\"></span><br><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">  font-family: &quot;Meiryo&quot;;</span><br><span class=\"line\">  src: url(&quot;/fonts/Meiryo.eot&quot;);</span><br><span class=\"line\">  /* IE9 */</span><br><span class=\"line\">  src: url(&quot;/fonts/Meiryo.eot?#iefix&quot;) format(&quot;embedded-opentype&quot;), /* IE6-IE8 */</span><br><span class=\"line\">  url(&quot;/fonts/Meiryo.woff&quot;) format(&quot;woff&quot;), /* chrome, firefox */</span><br><span class=\"line\">  url(&quot;/fonts/Meiryo.ttf&quot;) format(&quot;truetype&quot;), /* chrome, firefox, opera, Safari, Android, iOS 4.2+ */</span><br><span class=\"line\">  url(&quot;/fonts/Meiryo.svg#Meiryo&quot;) format(&quot;svg&quot;);</span><br><span class=\"line\">  /* iOS 4.1- */</span><br><span class=\"line\">  font-style: normal;</span><br><span class=\"line\">  font-weight: normal;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">html.page-home &#123;</span><br><span class=\"line\">  /*background-image: url(&#x27;/images/bg.jpg&#x27;)*/</span><br><span class=\"line\"></span><br><span class=\"line\">  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span><br><span class=\"line\">  /*background-blend-mode: screen;*/</span><br><span class=\"line\"></span><br><span class=\"line\">  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>自定义博客名的字体</p>\n<p>由于中文字体文件太大，有的快10M，所以 Fexo 没有引入中文字体，导致博客名有点难看。<br>但是可以通过提取字体来减小字体文件大小，让字体只有几KB。<br>一下步骤可以让你实现自定义博客名字体，包括英文和中文：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">下载免费可用的ttf格式字体</span><br><span class=\"line\">利用 Web-Fontmin 提取字体，然后下载 Web 字体和样式</span><br><span class=\"line\">在博客根目录的source文件夹新建目录 fonts</span><br><span class=\"line\">把下载的 web-fontmin 里的 CSS 内容 copy 到你的 personal-style.css 里去</span><br><span class=\"line\">修改fexo/_config.yml下面配置，设置字体名称：</span><br><span class=\"line\">blog_name_font_familiy: myFontName</span><br><span class=\"line\"></span><br><span class=\"line\"># 注意: 这是css文件里的font-familiy的值 ,例如里面是 font-familiy: &quot;myfontName&quot;</span><br><span class=\"line\">PS：自定义博客名字体前请先自定义CSS</span><br></pre></td></tr></table></figure>\n\n<p>为首页设置背景</p>\n<p>如果你不喜欢首页简洁的白色，想个性化一点，你可以自定义首页的背景颜色或者图片</p>\n<p>修改personal-style.css:</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">html.page-home &#123;</span><br><span class=\"line\">  position: absolute;</span><br><span class=\"line\">  top: 0;</span><br><span class=\"line\">  left: 0;</span><br><span class=\"line\">  right: 0;</span><br><span class=\"line\">  bottom: 0;</span><br><span class=\"line\">  background-image: url(&#x27;/images/bg.jpg&#x27;);</span><br><span class=\"line\">  background-color: transparent;</span><br><span class=\"line\">  background-size: cover;</span><br><span class=\"line\">  background-position: center center;</span><br><span class=\"line\">  background-repeat: no-repeat;</span><br><span class=\"line\"></span><br><span class=\"line\">  /*background: linear-gradient( #1abc9c, transparent), linear-gradient( 90deg, skyblue, transparent), linear-gradient( -90deg, coral, transparent);*/</span><br><span class=\"line\">  /*background-blend-mode: screen;*/</span><br><span class=\"line\"></span><br><span class=\"line\">  /*background: linear-gradient(to left, #5f2c82, #49a09d);*/</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>第三方服务</p>\n<p>启用统计</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">google_analytics:</span><br><span class=\"line\">baidu_analytics: 57e94d016sfsf1fba3xxxx8a2b0263af0</span><br></pre></td></tr></table></figure>\n\n<p>启用评论</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">disqus_shortname: forsigner</span><br><span class=\"line\"># duoshuo_shortname: forsigner</span><br></pre></td></tr></table></figure>\n\n<p>使用 Mathjax</p>\n<p>要使用 Mathjax，可以通过 Hexo 插件 hexo-renderer-mathjax支持</p>\n<p>查看 hexo-renderer-mathjax 文档</p>\n<h3 id=\"常见问题\"><a href=\"#常见问题\" class=\"headerlink\" title=\"常见问题\"></a>常见问题</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">$ hexo d</span><br><span class=\"line\">ERROR Deployer not found: git</span><br></pre></td></tr></table></figure>\n<p>解决办法：<br><code>npm install --save hexo-deployer-git</code></p>\n","categories":["blog"],"tags":[]},{"title":"JavaScript","url":"http://www.baidu.com/2020/09/22/js/","content":"<h3 id=\"JavaScript\"><a href=\"#JavaScript\" class=\"headerlink\" title=\"JavaScript\"></a>JavaScript</h3><p>运行在客户端的脚本语言；不需要编译，运行过程中由js引擎逐行解释并执行,也可以用于后端node.js技术<br>浏览器引擎：<br>渲染引擎：内核<br>js引擎：js解释器</p>\n<ul>\n<li>面向对象编程</li>\n</ul>\n<p>类：一类具有相同特征事物的抽象概念;<br>对象：具体的某一个个体，具有唯一性的实例；</p>\n<p>编程思想：</p>\n<ol>\n<li>分析有哪些实体</li>\n<li>设计实体的属性和功能</li>\n<li>实体间的相互作用</li>\n</ol>\n<ul>\n<li>书写位置<ol>\n<li>行内式：<code>&lt;input type=&quot;botton&quot; onclick=&quot;alert(&#39;hello!!&#39;) /&gt;</code>Html推荐双引号，js推荐单引号</li>\n</ol>\n</li>\n</ul>\n<blockquote>\n<p>注释：外部脚本不能包含 <code>&lt;script&gt;</code> 标签。<br>优势：分离了 HTML 和代码,使 HTML 和 JavaScript 更易于阅读和维护,已缓存的 JavaScript 文件可加速页面加载<br>可通过完整的 URL 或相对于当前网页的路径引用外部脚本：<code>&lt;script src=&quot;www.xxx.com/..&quot;&gt;&lt;script&gt;</code></p>\n</blockquote>\n<ol start=\"2\">\n<li>外部链接：<code>&lt;script src=&quot;xxx.js&quot;&gt;&lt;/script&gt;</code></li>\n<li>内联式：<code>&lt;script&gt;alert(&#39;hello&#39;)&lt;/script&gt;</code></li>\n</ol>\n<blockquote>\n<p>js脚本可被放置与 HTML 页面的 <code>&lt;body&gt;</code> 或<code> &lt;head&gt;</code> 部分中，或兼而有之。<br>提示：把脚本置于<code> &lt;body&gt;</code> 元素的底部，可改善显示速度，因为脚本编译会拖慢显示。<br>注释：旧的 JavaScript 例子也许会使用 type 属性：<code>&lt;script type=&quot;text/javascript&quot;&gt;</code>。<br>注释：type 属性不是必需的。JavaScript 是 HTML 中的默认脚本语言。</p>\n</blockquote>\n<h4 id=\"输入输出语句\"><a href=\"#输入输出语句\" class=\"headerlink\" title=\"输入输出语句\"></a>输入输出语句</h4><ul>\n<li>alert(msg):浏览器弹窗提示</li>\n<li>console.log(msg):控制台打印信息</li>\n<li>innerHTML:写入HTML元素<blockquote>\n<p>如需访问 HTML 元素，JavaScript 可使用 document.getElementById(id) 方法。如：<code>document.getElementById(&quot;demo&quot;).innerHTML = 5 + 6;</code></p>\n</blockquote>\n</li>\n<li>document.write()：写入HTML输出<blockquote>\n<p>注意：在 HTML 文档完全加载后使用 document.write() 将会删除所有的标签 ;</p>\n</blockquote>\n</li>\n<li>prompt(info):浏览器弹出，用户输入</li>\n</ul>\n<h4 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h4><p>变量是弱类型的,重复声明 JavaScript  变量，将不会丢它的值。</p>\n<table>\n<thead>\n<tr>\n<th>情况</th>\n<th>说明</th>\n<th>结果</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>var age;console.log(age)</td>\n<td>只声明不负值</td>\n<td>undefined</td>\n</tr>\n<tr>\n<td>console.log(age)</td>\n<td>不声明，不负值</td>\n<td>报错</td>\n</tr>\n<tr>\n<td>age=10;console.log(age)</td>\n<td>不声明，只赋值</td>\n<td>10(如果您为尚未声明的变量赋值，此变量会自动成为全局变量。)</td>\n</tr>\n</tbody></table>\n<p>可以在字符串添加转义字符来使用引号：</p>\n<p>如果变量在函数内没有声明（没有使用 var 关键字），该变量为全局变量。</p>\n<h4 id=\"命名规范\"><a href=\"#命名规范\" class=\"headerlink\" title=\"命名规范\"></a>命名规范</h4><ul>\n<li>区分大小写</li>\n<li>不能数字开头</li>\n<li>可使用的符号作开头：下划线<code>_</code>，美元符<code>$</code></li>\n</ul>\n<h4 id=\"变量数据类型\"><a href=\"#变量数据类型\" class=\"headerlink\" title=\"变量数据类型\"></a>变量数据类型</h4><p>动态数据类型。同一变量可做不同数据类型使用<br>类型种类：<code>number</code> <code>boolean</code> <code>string</code> <code>undefined</code> <code>null</code></p>\n<ul>\n<li>布尔类型<br><code>var flag=true;</code><br>true参加数学加法时当做1，false为0；</li>\n</ul>\n<p>true:<code>-15</code> <code>&quot;false&quot;</code><br>false:<code>0</code> <code>-0</code> <code>&quot;&quot;</code> <code>undefined</code> <code>null</code>  <code>false</code>  <code>NaN</code></p>\n<ul>\n<li><p>undefined<br>与数字相加后结果为NaN;任何变量均可通过设置值等于 undefined 或null进行清空。其类型也将是 undefined而null的类型为对象。</p>\n</li>\n<li><p>typeof</p>\n</li>\n</ul>\n<blockquote>\n<p>typeof 运算符不是变量。它属于运算符。运算符（比如 + - * /）没有数据类型。<br>但是，typeof 始终会返回字符串（包含运算数的类型）。</p>\n</blockquote>\n<p><code>console.log(typeof age);</code><br>查看数据类型</p>\n<ul>\n<li>constructor 属性</li>\n</ul>\n<p>constructor 属性返回所有 JavaScript 变量的构造器函数。</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;Bill&quot;.constructor                 // 返回 &quot;function String()  &#123; [native code] &#125;&quot;</span><br><span class=\"line\">(3.14).constructor                 // 返回 &quot;function Number()  &#123; [native code] &#125;&quot;</span><br><span class=\"line\">false.constructor                  // 返回 &quot;function Boolean() &#123; [native code] &#125;&quot;</span><br><span class=\"line\">[1,2,3,4].constructor              // 返回 &quot;function Array()   &#123; [native code] &#125;&quot;</span><br><span class=\"line\">&#123;name:&#x27;Bill&#x27;, age:62&#125;.constructor  // 返回&quot; function Object()  &#123; [native code] &#125;&quot;</span><br><span class=\"line\">new Date().constructor             // 返回 &quot;function Date()    &#123; [native code] &#125;&quot;</span><br><span class=\"line\">function () &#123;&#125;.constructor         // 返回 &quot;function Function()&#123; [native code] &#125;&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>数字型<br>绝不要用前导零写数字（比如 07）。<br>Infinity:无穷大；</li>\n<li>Infinity:无穷小；<br>除以 0（零）也会生成 Infinity<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x =  2 / 0;          // x 将是 Infinity</span><br><span class=\"line\">var y = -2 / 0;          // y 将是 -Infinity</span><br></pre></td></tr></table></figure></li>\n</ul>\n<p>NaN:非数字<br>尝试用一个非数字字符串进行除法会得到 NaN<br>可使用全局 JavaScript 函数 isNaN() 来确定某个值是否是数：<br>NaN 是数，typeof NaN 返回 number</p>\n<p>JavaScript 数值始终是 64 位的浮点数,其中 0 到 51 存储数字（片段），52 到 62 存储指数，63 位存储符号</p>\n<p>精度<br>整数（不使用指数或科学计数法）会被精确到 15 位。<br>小数的最大数是 17 位，但是浮点的算数并不总是 100% 精准</p>\n<p>数字字符串<br>JavaScript 字符串可以拥有数字内容：</p>\n<p>在所有数字运算中，JavaScript 会尝试将字符串转换为数字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = &quot;100&quot;;</span><br><span class=\"line\">var y = &quot;10&quot;;</span><br><span class=\"line\">var z = x / y;       // z 将是 10</span><br><span class=\"line\">var z = x * y;       // z 将是 1000</span><br><span class=\"line\">var z = x - y;       // z 将是 90</span><br><span class=\"line\">//警告！！</span><br><span class=\"line\">//JavaScript 的加法和级联（concatenation）都使用 + 运算符。</span><br><span class=\"line\">//如果您对一个数和一个字符串相加，结果也是字符串级联：</span><br><span class=\"line\">var z = x + y;       // z 不会是 110（而是 10010）</span><br></pre></td></tr></table></figure>\n\n<p>数值属性</p>\n<table>\n<thead>\n<tr>\n<th>属性</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>MAX_VALUE</td>\n<td>返回 JavaScript 中可能的最大数。</td>\n</tr>\n<tr>\n<td>MIN_VALUE</td>\n<td>返回 JavaScript 中可能的最小数。</td>\n</tr>\n<tr>\n<td>NEGATIVE_INFINITY</td>\n<td>表示负的无穷大（溢出返回）。</td>\n</tr>\n<tr>\n<td>NaN</td>\n<td>表示非数字值（”Not-a-Number”）。</td>\n</tr>\n<tr>\n<td>POSITIVE_INFINITY</td>\n<td>表示无穷大（溢出返回）。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>数字属性不可用于变量<br>数字属性属于名为 number 的 JavaScript 数字对象包装器。</p>\n</blockquote>\n<blockquote>\n<p>这些属性只能作为 Number.MAX_VALUE 访问。</p>\n</blockquote>\n<blockquote>\n<p>使用 myNumber.MAX_VALUE，其中 myNumber 是变量、表达式或值，将返回 undefined：</p>\n</blockquote>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 6;</span><br><span class=\"line\">var y = x.MAX_VALUE;    // y 成为 undefined</span><br><span class=\"line\">//只能如下使用</span><br><span class=\"line\">var x = Number.MIN_VALUE;\t//返回 JavaScript 中可能的最小数字。</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"字符串\"><a href=\"#字符串\" class=\"headerlink\" title=\"字符串\"></a>字符串</h3><p>使用单引号或双引号，推荐单引号。在js中字符串既是基本数据类型，又是复合数据类型.</p>\n<ul>\n<li><p>声明</p>\n<ol>\n<li>new运算符声明(对象）<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=new String(&quot;100&quot;)</span><br></pre></td></tr></table></figure></li>\n<li>省略new</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=String(&quot;jjj&quot;);</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>字符串常量声明<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=&quot;jjj&quot;;</span><br></pre></td></tr></table></figure></li>\n</ol>\n<ul>\n<li>嵌套：<code>var str=&#39;啥&quot;嘎&quot;嘎和&#39;; var str=&quot;航空&#39;港行&#39;供货商&quot;;</code>也可以加转义符<code>\\</code></li>\n<li>字符串长度：<code>var str=&#39;画口红管工行&#39;;  alert(str.length);</code><blockquote>\n<p>注：中文UTF-8（三个字符代表一个汉字），gbk（两个字符表示一个汉字）但计数时都当成一个字来计数。</p>\n</blockquote>\n</li>\n<li>字符串拼接：<code>字符串+任何类型=拼接后的字符串</code></li>\n</ul>\n<h4 id=\"js-判断字符串中是否包含某个字符串\"><a href=\"#js-判断字符串中是否包含某个字符串\" class=\"headerlink\" title=\"js 判断字符串中是否包含某个字符串\"></a>js 判断字符串中是否包含某个字符串</h4><ol>\n<li>方法一: indexOf()   (推荐)</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;123&quot;;</span><br><span class=\"line\">console.log(str.indexOf(&quot;3&quot;) != -1 );  // 未找到文本将返回-1</span><br><span class=\"line\">//indexOf() 方法可返回某个指定的字符串值在字符串中首次出现的位置。</span><br><span class=\"line\">//lastIndexOf() 方法返回指定文本在字符串中最后一次出现的索引,其为从后向前进行检索</span><br><span class=\"line\">//两种方法都接受作为检索起始位置的第二个参数。如str.indexOf(&quot;China&quot;, 18);</span><br></pre></td></tr></table></figure>\n<ol start=\"2\">\n<li>方法二: search() </li>\n</ol>\n<p>找到符合条件的子串第一次出现的位置</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;123&quot;;</span><br><span class=\"line\">console.log(str.search(&quot;3&quot;) != -1 );  //并返回匹配位置的下标</span><br><span class=\"line\">//search() 方法用于检索字符串中指定的子字符串，或检索与正则表达式相匹配的子字符串。如果没有找到任何匹配的子串，则返回 -1。</span><br></pre></td></tr></table></figure>\n<ol start=\"3\">\n<li>方法三:match()</li>\n</ol>\n<p>匹配成功返回匹配的子串数组,否则返回null</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;123&quot;;</span><br><span class=\"line\">var reg = RegExp(/3/);</span><br><span class=\"line\">if(str.match(reg))&#123;</span><br><span class=\"line\">    // 包含        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//match() 方法可在字符串内检索指定的值，或找到一个或多个正则表达式的匹配。其为RegExp 对象方法</span><br></pre></td></tr></table></figure>\n\n<ol start=\"4\">\n<li>方法四:test() </li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;123&quot;;</span><br><span class=\"line\">var reg = RegExp(/3/);</span><br><span class=\"line\">console.log(reg.test(str)); // true</span><br><span class=\"line\">//test() 方法用于检索字符串中匹配的正则是否存在。若有则返回 true 否则 false。</span><br></pre></td></tr></table></figure>\n<ol start=\"5\">\n<li>方法五:exec()</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;123&quot;;</span><br><span class=\"line\">var reg = RegExp(/3/);</span><br><span class=\"line\">if(reg.exec(str))&#123;</span><br><span class=\"line\">    // 包含        </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//exec() 方法用于检索字符串中的正则表达式的匹配。返回一个数组，其中存放匹配的结果。如果未找到匹配，则返回值为 null。</span><br></pre></td></tr></table></figure>\n<h2 id=\"正则表达式\"><a href=\"#正则表达式\" class=\"headerlink\" title=\"正则表达式\"></a>正则表达式</h2><p>正则表达式是构成搜索模式（search pattern）的字符序列。<br>语法：<code>/pattern/modifiers;</code>如：<code>var patt = /hello/i;</code></p>\n<p>声明：</p>\n<ol>\n<li>new声明</li>\n</ol>\n<p>参数：第一个为字符串，第二个为修饰符(修饰符无顺序）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var box1=new RegExp(&quot;hello&quot;,&quot;ig&quot;);</span><br><span class=\"line\">var box1= RegExp(&quot;hello&quot;,&quot;ig&quot;);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>省略new声明</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var box1=/hello/gi;</span><br></pre></td></tr></table></figure>\n\n\n\n<p>正则表达式修饰符<br>修饰符可用于大小写不敏感的更全局的搜素：</p>\n<table>\n<thead>\n<tr>\n<th>修饰符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>i</td>\n<td>执行对大小写不敏感的匹配。</td>\n</tr>\n<tr>\n<td>g</td>\n<td>执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。</td>\n</tr>\n<tr>\n<td>m</td>\n<td>执行多行匹配。</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>字符串中，遇到换行，重新开始计算行首；</p>\n</blockquote>\n<p>正则表达式模式<br>括号用于查找一定范围的字符串：</p>\n<table>\n<thead>\n<tr>\n<th>表达式</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>[]</td>\n<td>查找方括号之间的任何符合的字符。</td>\n</tr>\n<tr>\n<td>[^]</td>\n<td>匹配除括号内的字符</td>\n</tr>\n<tr>\n<td>[0-9]</td>\n<td>查找任何从 0 至 9 的数字。</td>\n</tr>\n<tr>\n<td>(x|y)</td>\n<td>查找由 | 分隔的任何选项。</td>\n</tr>\n</tbody></table>\n<p>元字符（Metacharacter）是拥有特殊含义的字符：</p>\n<table>\n<thead>\n<tr>\n<th>元字符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>.</td>\n<td>匹配单个任意字符</td>\n</tr>\n<tr>\n<td>\\d</td>\n<td>查找数字。</td>\n</tr>\n<tr>\n<td>\\D</td>\n<td>匹配非数字</td>\n</tr>\n<tr>\n<td>\\s</td>\n<td>查找空白符、空格、制表符、换行符。</td>\n</tr>\n<tr>\n<td>\\S</td>\n<td>匹配非空白字符</td>\n</tr>\n<tr>\n<td>\\b</td>\n<td>匹配空格字符。</td>\n</tr>\n<tr>\n<td>\\n</td>\n<td>查找换行符。</td>\n</tr>\n<tr>\n<td>\\r</td>\n<td>查找回车符。</td>\n</tr>\n<tr>\n<td>\\t</td>\n<td>查找制表符。</td>\n</tr>\n<tr>\n<td>\\0</td>\n<td>查找null符。</td>\n</tr>\n</tbody></table>\n<p>锚字符<br>|||<br>|-|-|<br>|^|行首匹配|<br>|$|行尾匹配|</p>\n<p>重复字符：(n为任意的单个字符）</p>\n<table>\n<thead>\n<tr>\n<th>量词</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>n?</td>\n<td>匹配任何包含零个或一个 n 的字符。</td>\n</tr>\n<tr>\n<td>n+</td>\n<td>匹配任何包含至少一个 n 的字符。</td>\n</tr>\n<tr>\n<td>n*</td>\n<td>匹配任何个 n 的字符。</td>\n</tr>\n<tr>\n<td>n*</td>\n<td>匹配任何包含零个或多个 n 的字符。</td>\n</tr>\n<tr>\n<td>n{m,n}</td>\n<td>匹配至少m个，至多n个</td>\n</tr>\n<tr>\n<td>n{m}</td>\n<td>必须匹配m个</td>\n</tr>\n<tr>\n<td>(abd)+</td>\n<td>小括号中的部分代表一个字符串处理</td>\n</tr>\n</tbody></table>\n<p>提取部分字符串<br>有三种提取部分字符串的方法：</p>\n<ul>\n<li>slice(start, end)<br>该方法设置两个参数：起始索引（开始位置），终止索引（结束位置）。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;Apple, Banana, Mango&quot;;</span><br><span class=\"line\">var res = str.slice(7,13);</span><br><span class=\"line\">//如果某个参数为负，则从字符串的结尾开始计数。</span><br><span class=\"line\">//如果省略第二个参数，则该 slice() 将删除前面的部分，保留后面的部分。</span><br><span class=\"line\">//提示：负值位置不适用 Internet Explorer 8 及其更早版本。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>substring(start, end)</li>\n</ul>\n<p>提取[start,end)这部分字符串，返回新的字符串</p>\n<p>不同之处在于 substring() 无法接受负的索引。<br>如果省略第二个参数，则该 substring() 将删除前面的部分，保留后面的部分。</p>\n<ul>\n<li>substr(start, length)</li>\n</ul>\n<p>substr() 类似于 slice()。</p>\n<p>不同之处在于第二个参数规定被提取部分的长度。<br>如果省略第二个参数，则该 substring() 将删除前面的部分，保留后面的部分。<br>如果首个参数为负，则从字符串的结尾计算位置。第二个参数不能为负，因为它定义的是长度。</p>\n<ul>\n<li>replace() </li>\n</ul>\n<p>str.replace(oldstr,newstr);该方法用另一个值替换在字符串中指定的值,会返回替换成功的新字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = &quot;Please visit Microsoft!&quot;;</span><br><span class=\"line\">var n = str.replace(&quot;Microsoft&quot;, &quot;W3School&quot;);</span><br></pre></td></tr></table></figure>\n\n<p>默认地，replace() 只替换首个匹配：如需替换所有匹配，请使用正则表达式的 g 标志（用于全局搜索)<br>replace() 对大小写敏感。如需执行大小写不敏感的替换，请使用正则表达式 /i（大小写不敏感）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">str = &quot;Please visit Microsoft!&quot;;</span><br><span class=\"line\">var n = str.replace(/MICROSOFT/gi, &quot;W3School&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>转换为大写和小写<br>通过 toUpperCase() 把字符串转换为大写：通过 toLowerCase() 把字符串转换为小写：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text1 = &quot;Hello World!&quot;;       // 字符串</span><br><span class=\"line\">var text2 = text1.toUpperCase();  // text2 是被转换为大写的 text1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>concat() 连接两个或多个字符串：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text1 = &quot;Hello&quot;;</span><br><span class=\"line\">var text2 = &quot;World&quot;;</span><br><span class=\"line\">text3 = text1.concat(text2);</span><br><span class=\"line\">text4 = text1.concat(&quot;jjjjjj&quot;,text2,&quot;jj&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>trim() 方法删除字符串两端的空白符：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;       Hello World!        &quot;;</span><br><span class=\"line\">alert(str.trim());</span><br><span class=\"line\">//Internet Explorer 8 或更低版本不支持 trim() 方法。</span><br><span class=\"line\">//如需支持 IE 8，您可搭配正则表达式使用 replace() 方法代替：</span><br><span class=\"line\">var str = &quot;       Hello World!        &quot;;</span><br><span class=\"line\">alert(str.replace(/^[\\s\\uFEFF\\xA0]+|[\\s\\uFEFF\\xA0]+$/g, &#x27;&#x27;));</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"提取字符串中的一个字符\"><a href=\"#提取字符串中的一个字符\" class=\"headerlink\" title=\"提取字符串中的一个字符\"></a>提取字符串中的一个字符</h4><p>这是两个提取字符串字符的安全方法：</p>\n<ul>\n<li><p>charAt(position)<br>charAt() 方法返回字符串中指定下标（位置）的字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;HELLO WORLD&quot;;</span><br><span class=\"line\">str.charAt(0);            // 返回 H</span><br></pre></td></tr></table></figure></li>\n<li><p>charCodeAt(position)</p>\n</li>\n</ul>\n<p>charCodeAt() 方法返回字符串中指定索引的字符 unicode 编码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;HELLO WORLD&quot;;</span><br><span class=\"line\">str.charCodeAt(0);         // 返回 72</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>String.fromCharCode(码值1，码值2…）<br>用于将ASCII码转换为对应字符,返回值为组合的字符串</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str=String.fromCharCode(99,93,83);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>属性访问（Property Access）</li>\n</ul>\n<p>使用属性访问有点不太靠谱：</p>\n<ul>\n<li>不适用 Internet Explorer 7 或更早的版本</li>\n<li>它让字符串看起来像是数组（其实并不是）</li>\n<li>如果找不到字符，[ ] 返回 undefined，而 charAt() 返回空字符串。</li>\n<li>字符串是只读的，无法像数组一样通过索引下标去修改单个字符，除非整个修改。str[0] = “A” 不会产生错误（但也不会工作！）</li>\n</ul>\n<blockquote>\n<p>提示：如果您希望按照数组的方式处理字符串，可以先把它转换为数组。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var str = &quot;HELLO WORLD&quot;;</span><br><span class=\"line\">str[0];                   // 返回 H</span><br></pre></td></tr></table></figure>\n\n<p>表单元素，获取其中的内容，可通过<code>.value</code>属性获取<br>双标签节点，用innerHTML属性获取标签间内容</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function test()&#123;</span><br><span class=\"line\">var text=document.ElementById(&quot;id&quot;);</span><br><span class=\"line\">var msg=document.ElementById(&quot;id&quot;);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>把字符串转换为数组</li>\n</ul>\n<p>可以通过 split(分割符/正则)分割字符串，返回分割的子串组成的数组。</p>\n<p> 将字符串转换为数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var txt = &quot;a,b,c,d,e&quot;;   // 字符串</span><br><span class=\"line\">txt.split(&quot;,&quot;);          // 用逗号分隔</span><br><span class=\"line\">txt.split(&quot; &quot;);          // 用空格分隔</span><br><span class=\"line\">txt.split(&quot;|&quot;);          // 用竖线分隔</span><br><span class=\"line\">//如果省略分隔符，被返回的数组将是整个字符串即[&quot;string&quot;]。</span><br><span class=\"line\">//若没有匹配，被返回的数组也是整个字符串即[&quot;string&quot;]</span><br><span class=\"line\">//如果分隔符是 &quot;&quot;，被返回的数组将是间隔单个字符的数组</span><br></pre></td></tr></table></figure>\n\n\n\n<h4 id=\"数据类型转换\"><a href=\"#数据类型转换\" class=\"headerlink\" title=\"数据类型转换\"></a>数据类型转换</h4><ul>\n<li>转为字符串</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>toString()</td>\n<td><code>var num=1;alert(num.toString());</code></td>\n</tr>\n<tr>\n<td>String()强制转换</td>\n<td><code>var num=1; alert(String(num));</code></td>\n</tr>\n<tr>\n<td>拼接</td>\n<td><code>var num=1; alert(num+&quot;&quot;);</code></td>\n</tr>\n</tbody></table>\n<p>能够使用 toString() 方法把数输出为十六进制、八进制或二进制。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myNumber = 128;</span><br><span class=\"line\">myNumber.toString(16);     // 返回 80</span><br><span class=\"line\">myNumber.toString(8);      // 返回 200</span><br><span class=\"line\">myNumber.toString(2);      // 返回 10000000</span><br></pre></td></tr></table></figure>\n\n\n<p>toExponential() 返回字符串值，它包含已被四舍五入并使用指数计数法的数字。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 9.656;</span><br><span class=\"line\">x.toExponential(2);     // 返回 9.66e+0</span><br><span class=\"line\">x.toExponential(4);     // 返回 9.6560e+0</span><br><span class=\"line\">x.toExponential(6);     // 返回 9.656000e+0</span><br></pre></td></tr></table></figure>\n\n<p>toFixed() 返回字符串值，它包含了指定位数小数的数字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 9.656;</span><br><span class=\"line\">x.toFixed(0);           // 返回 10</span><br><span class=\"line\">x.toFixed(2);           // 返回 9.66</span><br><span class=\"line\">x.toFixed(4);           // 返回 9.6560</span><br><span class=\"line\">x.toFixed(6);           // 返回 9.656000</span><br></pre></td></tr></table></figure>\n\n<p>toPrecision() 返回字符串值，它包含了指定长度的数字：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 9.656;</span><br><span class=\"line\">x.toPrecision();        // 返回 9.656</span><br><span class=\"line\">x.toPrecision(2);       // 返回 9.7</span><br><span class=\"line\">x.toPrecision(4);       // 返回 9.656</span><br><span class=\"line\">x.toPrecision(6);       // 返回 9.65600</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>在 JavaScript 中，数字可以是原始值（typeof = number）或对象（typeof = object）。<br>在 JavaScript 内部使用 valueOf() 方法可将 Number 对象转换为原始值。<br>所有 JavaScript 数据类型都有 valueOf() 和 toString() 方法。</p>\n</blockquote>\n<ul>\n<li>转数字</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th></th>\n<th></th>\n</tr>\n</thead>\n<tbody><tr>\n<td>parseInt(string)保留整数,去掉单位;只返回首个数字;如果无法转换为数值，则返回 NaN</td>\n<td><code>parseInt(&#39;11&#39;);</code></td>\n</tr>\n<tr>\n<td>parseFloat(string)只返回首个数字,包括小数部分</td>\n<td><code>parseFloat(&#39;222&#39;);</code></td>\n</tr>\n<tr>\n<td>Number()强制转换</td>\n<td><code>Number(&#39;22&#39;);</code></td>\n</tr>\n<tr>\n<td>js隐式转换（减，乘，除)</td>\n<td><code>&#39;11&#39;-0</code></td>\n</tr>\n</tbody></table>\n<p>Number() 还可以把日期转换为数字：<code>Number(new Date(&quot;2019-04-15&quot;));    // 返回 1506729600000</code>方法返回 1970 年 1 月 1 日至今的毫秒数。</p>\n<p><code>==</code>符号会把字符串的数据类型转换为数字型再比较。<br><code>===</code>两侧的值和数据类型一样才相等。</p>\n<h3 id=\"逻辑运算符\"><a href=\"#逻辑运算符\" class=\"headerlink\" title=\"逻辑运算符\"></a>逻辑运算符</h3><ul>\n<li>逻辑与<br><code>表达式1&amp;&amp;表达式2</code>如果第一个表达式为真，则返回表达式2，否则返回表达式1</li>\n</ul>\n<blockquote>\n<p><code>0</code> <code>&#39;&#39;</code> <code>null</code> <code>undefind</code> <code>NaN</code>为假</p>\n</blockquote>\n<ul>\n<li>逻辑或<br><code>表达式1||表达式2</code>如果表达式1为真则返回表达式1，否则返回表达式2</li>\n</ul>\n<h3 id=\"位运算符\"><a href=\"#位运算符\" class=\"headerlink\" title=\"位运算符\"></a>位运算符</h3><p>位运算符处理 32 位数。</p>\n<p>该运算中的任何数值运算数都会被转换为 32 位的数。结果会被转换回 JavaScript 数。</p>\n<table>\n<thead>\n<tr>\n<th>运算符</th>\n<th>描述</th>\n<th>例子</th>\n<th>等同于</th>\n<th>结果</th>\n<th>十进制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>&amp;</td>\n<td>与</td>\n<td>5 &amp; 1</td>\n<td>0101 &amp; 0001</td>\n<td>0001</td>\n<td>1</td>\n</tr>\n<tr>\n<td>|</td>\n<td>或</td>\n<td>5 | 1</td>\n<td>0101 | 0001</td>\n<td>0101</td>\n<td>5</td>\n</tr>\n<tr>\n<td>~</td>\n<td>非</td>\n<td>~ 5</td>\n<td>~0101</td>\n<td>1010</td>\n<td>10</td>\n</tr>\n<tr>\n<td>^</td>\n<td>异或</td>\n<td>5 ^ 1</td>\n<td>0101 ^ 0001</td>\n<td>0100</td>\n<td>4</td>\n</tr>\n<tr>\n<td>&lt;&lt;</td>\n<td>零填充左位移</td>\n<td>5 &lt;&lt; 1</td>\n<td>0101 &lt;&lt; 1</td>\n<td>1010</td>\n<td>10</td>\n</tr>\n<tr>\n<td>&gt;&gt;</td>\n<td>有符号右位移</td>\n<td>5 &gt;&gt; 1</td>\n<td>0101 &gt;&gt; 1</td>\n<td>0010</td>\n<td>2</td>\n</tr>\n<tr>\n<td>&gt;&gt;&gt;</td>\n<td>零填充右位移</td>\n<td>5 &gt;&gt;&gt; 1</td>\n<td>0101 &gt;&gt;&gt; 1</td>\n<td>0010</td>\n<td>2</td>\n</tr>\n</tbody></table>\n<blockquote>\n<p>上例使用 4 位无符号的例子。但是 JavaScript 使用 32 位有符号数。</p>\n</blockquote>\n<blockquote>\n<p>因此，在 JavaScript 中，~ 5 不会返回 10，而是返回 -6。</p>\n</blockquote>\n<blockquote>\n<p>~00000000000000000000000000000101 将返回 11111111111111111111111111111010。</p>\n</blockquote>\n<p>幂运算符为<code>**</code>而不是<code>^</code>,也可以用<code>Math.pow(x,y) </code>实现</p>\n<h3 id=\"结构\"><a href=\"#结构\" class=\"headerlink\" title=\"结构\"></a>结构</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//switch</span><br><span class=\"line\">var num=3;</span><br><span class=\"line\">switch(num)&#123;</span><br><span class=\"line\">case 2:</span><br><span class=\"line\">console.log(num);</span><br><span class=\"line\">break;</span><br><span class=\"line\">case 3:</span><br><span class=\"line\">console.log(num);</span><br><span class=\"line\">break;</span><br><span class=\"line\">default:</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>continue用于跳出本次循环，继续下一次循环；<br>break用于结束循环；</p>\n<h3 id=\"创建数组\"><a href=\"#创建数组\" class=\"headerlink\" title=\"创建数组\"></a>创建数组</h3><p>数组是对象<br>请不要最后一个元素之后写逗号（比如 “BMW”,）可能存在跨浏览器兼容性问题。<br>JavaScript 方法 toString() 把数组转换为数组值（逗号分隔）的字符串。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用new创建数组</span><br><span class=\"line\">var a=new Array();\t//注意大写</span><br><span class=\"line\">var a=new Array(2);\t//只有一个数字时，为直接创建长度为2的空数组</span><br><span class=\"line\">var cars = new Array(&quot;Saab&quot;, &quot;Volvo&quot;, &quot;BMW&quot;);\t//也可以直接赋值</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组字面量方式创建</span><br><span class=\"line\">var a=[];</span><br><span class=\"line\">var a=[&#x27;xxx&#x27;,77,true];</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取数组元素：数组名[索引号]</span><br><span class=\"line\">console.log(a[0]);</span><br><span class=\"line\">//二位数组,只对字符串有用</span><br><span class=\"line\">console.log(a[0][0]);\t//结果为第二个x</span><br><span class=\"line\">console.log(a[2][0]);\t//结果为undefined</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组长度：数组名.length</span><br><span class=\"line\">console.log(a.length); //新增数组元素</span><br><span class=\"line\">//修改数组索引追加数组元素</span><br><span class=\"line\">//不能直接给数组名赋值，否则会覆盖以前的数据</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//变量里存放的是数组的地址</span><br><span class=\"line\">var arr=[&quot;jjj&quot;,&quot;222&quot;,true,222];</span><br><span class=\"line\">var arr1=arr</span><br><span class=\"line\">console.log(arr1);</span><br><span class=\"line\">arr1.push(&quot;end&quot;);</span><br><span class=\"line\">console.log(&quot;push:&quot;,arr1);</span><br><span class=\"line\">console.log(arr);\t//arr也会一起变化</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组遍历\"><a href=\"#数组遍历\" class=\"headerlink\" title=\"数组遍历\"></a>数组遍历</h3><ul>\n<li>for循环</li>\n<li>for ..in 快速遍历（没有判断,速度更快）</li>\n<li>forEach</li>\n<li>for….of</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array=[10,11,12,13,14];</span><br><span class=\"line\"></span><br><span class=\"line\">for(var i in array)&#123;</span><br><span class=\"line\">document.write(i,array[i]);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">array.forEach(function(item,n,array)&#123;</span><br><span class=\"line\">document.write(n,item);</span><br><span class=\"line\">&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">for (var item of array)&#123;</span><br><span class=\"line\">//item为当前遍历到的元素</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h3 id=\"数组的操作方法\"><a href=\"#数组的操作方法\" class=\"headerlink\" title=\"数组的操作方法\"></a>数组的操作方法</h3><p>10种：push,pop,shift,unshift,splice,slice,concat,join,sort,reverse</p>\n<ul>\n<li><p>JS数组添加元素</p>\n<ol>\n<li>在末尾追加push()；</li>\n</ol>\n</li>\n</ul>\n<p>示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//向arr数组的末尾追加元素，</span><br><span class=\"line\">arr.push(&#x27;lemon&#x27;, &#x27;cucumber&#x27;);</span><br><span class=\"line\">alert(arr);</span><br><span class=\"line\">//push()方法会返回新数组的长度</span><br></pre></td></tr></table></figure>\n\n<p>也可以使用 length 属性向数组添加新元素：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits[fruits.length] = &quot;Lemon&quot;;     // 向 fruits 添加一个新元素 (Lemon)</span><br><span class=\"line\">//添加具有高索引的元素会在数组中创建未定义的undefined</span><br><span class=\"line\">fruits[10] = &quot;Lemon&quot;;</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>在第一位添加unshift()；</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//向arr数组的第一位添加元素，</span><br><span class=\"line\">arr.unshift(&#x27;peach&#x27;, &#x27;pear&#x27;);\t//返回新数组的长度。</span><br><span class=\"line\">alert(arr);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"3\">\n<li>在指定位置添加splice();</li>\n</ol>\n<p>示例代码：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">///从数组中添加/删除项目，然后返回被删除的项目,如果有的话。</span><br><span class=\"line\">arr.splice(3,0,&#x27;元素1&#x27;,&#x27;元素2&#x27;); </span><br><span class=\"line\">alert(arr);</span><br><span class=\"line\">//arrayObject.splice(index,howmany,item1,.....,itemX)</span><br><span class=\"line\">//index\t必需。整数，规定添加/删除项目的位置，使用负数可从数组结尾处规定位置。</span><br><span class=\"line\">//howmany\t必需。要删除的项目数量。如果设置为 0，则不会删除项目。</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>pop() 方法从数组中删除最后一个元素：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.pop();              // 从 fruits 删除最后一个元素（&quot;Mango&quot;）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>pop() 方法返回被删除的值：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">var x = fruits.pop();      // x 的值是 &quot;Mango&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>shift() 方法会删除首个数组元素，</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.shift();            // 从 fruits 删除第一个元素 &quot;Banana&quot;</span><br><span class=\"line\">//shift() 方法返回被删除的字符串即 返回 &quot;Banana&quot;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>删除元素<br>既然 JavaScript 数组属于对象，其中的元素就可以使用 JavaScript delete 运算符来删除：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">delete fruits[0];           // 把 fruits 中的首个元素改为 undefined</span><br><span class=\"line\">//用 delete 会在数组留下未定义的空洞。请使用 pop() 或 shift() 取而代之。</span><br></pre></td></tr></table></figure>\n<p>使用 splice() 来删除元素</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//通过聪明的参数设定，您能够使用 splice() 在数组中不留“空洞”的情况下移除元素：</span><br><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.splice(0, 1);        // 删除 fruits 中的第一个元素</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>拼接数组<br>splice() 方法可用于向数组添加新项：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.splice(2, 0, &quot;Lemon&quot;, &quot;Kiwi&quot;);</span><br><span class=\"line\">//第一个参数（2）定义了应添加新元素的位置（拼接）。</span><br><span class=\"line\">//第二个参数（0）定义应删除多少元素。</span><br><span class=\"line\">//其余参数（“Lemon”，“Kiwi”）定义要添加的新元素。</span><br><span class=\"line\">//splice() 方法返回一个包含已删除项的数组：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>concat() 方法通过合并（连接）现有数组来创建一个新数组：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var myGirls = [&quot;Cecilie&quot;, &quot;Lone&quot;];</span><br><span class=\"line\">var myBoys = [&quot;Emil&quot;, &quot;Tobias&quot;, &quot;Linus&quot;];</span><br><span class=\"line\">var myChildren = myGirls.concat(myBoys,&quot;jjjj&quot;,11);   // 连接 myGirls 和 myBoys,&quot;jjj&quot;等</span><br><span class=\"line\">//concat() 方法不会更改现有数组。它总是返回一个新数组。</span><br><span class=\"line\">//concat() 方法可以使用任意数量的数组参数：</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>join() 方法</li>\n</ul>\n<p>会将数组内的所有元素结合为一个字符串。当然您还可以规定分隔符(默认以逗号分割)：<code>array.join(&quot;,&quot;)</code></p>\n<ul>\n<li>裁剪数组<br>slice(start,end) 方法用数组的某个片段切出新数组。原数组不会发生改变</li>\n</ul>\n<p>本例从数组元素 1 （”Orange”）开始切出一段数组：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">var citrus = fruits.slice(1); \t//默认到结尾</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>sort() 方法以字母顺序对数组进行排序：</li>\n</ul>\n<p>该函数很适合字符串（”Apple” 会排在 “Banana” 之前）。</p>\n<p>不过，如果数字按照字符串来排序，则 “25” 大于 “100”，因为 “2” 大于 “1”。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.sort();            // 对 fruits 中的元素进行排序</span><br></pre></td></tr></table></figure>\n\n<p>sort() 方法在对数值排序时会产生不正确的结果。</p>\n<p>我们通过一个比值函数来修正此问题：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var points = [40, 100, 1, 5, 25, 10];</span><br><span class=\"line\">points.sort(function(a, b)&#123;return a - b&#125;); </span><br><span class=\"line\">//比值函数</span><br><span class=\"line\">//比较函数的目的是定义另一种排序顺序。</span><br><span class=\"line\">//比较函数应该返回一个负，零或正值，这取决于参数：</span><br><span class=\"line\">//function(a, b)&#123;return a-b&#125;</span><br><span class=\"line\">//当 sort() 函数比较两个值时，会将值发送到比较函数，并根据所返回的值（负、零或正值）对这些值进行排序。</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>对数组使用 Math.max()<br>您可以使用 Math.max.array 来查找数组中的最高值;或使用 Math.min.apply 来查找数组中的最低值</p>\n</li>\n<li><p>反转数组<br>reverse() 方法反转数组中的元素。</p>\n</li>\n</ul>\n<p>您可以使用它以降序对数组进行排序：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var fruits = [&quot;Banana&quot;, &quot;Orange&quot;, &quot;Apple&quot;, &quot;Mango&quot;];</span><br><span class=\"line\">fruits.sort();            // 对 fruits 中的元素进行排序</span><br><span class=\"line\">fruits.reverse();         // 反转元素顺序</span><br></pre></td></tr></table></figure>\n\n<p>小程序查看对象中是否包含某个属性—–hasOwnProperty</p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><ul>\n<li>声明<br>在函数中，声明的参数是局部变量。只能在函数内访问。局部变量在函数开始时创建，在函数完成时被删除。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//函数关键字声明</span><br><span class=\"line\">function a()&#123;</span><br><span class=\"line\">console.log(&#x27;xxxxxxxxx&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//函数表达式声明</span><br><span class=\"line\">var b=function()&#123;&#125;;</span><br><span class=\"line\">//function 函数名（形参1，形参2...）&#123;//形参即形式上的参数&#125;</span><br><span class=\"line\">function b(n)&#123;</span><br><span class=\"line\">console.log(n);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">b(&#x27;xxx&#x27;);</span><br><span class=\"line\">//实参与形参个数一致时，正常输出</span><br><span class=\"line\">//实参小于形参时，多余的形参可看作不用声明的变量，结果为undefined</span><br><span class=\"line\">//实参多于形参时，只取到形参的个数</span><br><span class=\"line\">//#######################################</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//函数的返回值</span><br><span class=\"line\">function c()&#123;</span><br><span class=\"line\">return 返回的内容；</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var n=c();</span><br><span class=\"line\">//return 之后的代码不会执行；</span><br><span class=\"line\">//return只返回一个值，且只返回最后一个值。</span><br><span class=\"line\">//return可返回数组，字符串，</span><br><span class=\"line\">//如果没有return则返回undefind</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//###########</span><br><span class=\"line\">function fn()&#123;</span><br><span class=\"line\">console.log(arguments);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2,2,34,9);</span><br><span class=\"line\">//arguments里储存了所有传过来的实参，它是一个伪数组，具有length属性，可用索引的方式遍历，但不具有数组的push，pop等方法</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">写在这的代码会在整个页面加载完后再运行</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//简化写法</span><br><span class=\"line\">function $(id)&#123;</span><br><span class=\"line\">return document.getElenmentById(id);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var text=$(&quot;button&quot;);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>递归</li>\n</ul>\n<p>函数自己调用自己，一般情况下有参数，有return</p>\n<ol>\n<li>首先找到临界值，即无需计算获得的值；</li>\n<li>找到这一次和上一次的关系</li>\n<li>假设当前函数已经可以使用，调用自身计算上一次。</li>\n</ol>\n<h3 id=\"作用域\"><a href=\"#作用域\" class=\"headerlink\" title=\"作用域\"></a>作用域</h3><ul>\n<li>JavaScript 变量的有效期</li>\n</ul>\n<p>JavaScript 变量的有效期始于其被创建时。<br>局部变量会在函数完成时被删除。<br>全局变量会在您关闭页面是被删除。</p>\n<p>函数参数也是函数内的局部变量。<br>在 HTML 中，全局作用域是 window。所有全局变量均属于 window 对象。<br>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var carName = &quot;porsche&quot;;</span><br><span class=\"line\">// 此处的代码能够使用 window.carName</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>JavaScript 声明会被提升<br>在 JavaScript 中，可以在使用变量之后对其进行声明。<br>换句话说，可以在声明变量之前使用它。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//js中没有块级作用域，如&#123;&#125; if&#123;&#125; for&#123;&#125;，只有全局作用域和局部作用域</span><br><span class=\"line\">//作用域链：内部函数访问外部函数变量，采用的是链式查找方式来取值的，其采取就近原则</span><br><span class=\"line\">var num=10;</span><br><span class=\"line\">function fn ()&#123;</span><br><span class=\"line\">var num=20;</span><br><span class=\"line\">function fun()&#123;</span><br><span class=\"line\">console.log(num)\t//结果为20</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return fun();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//js引擎运行分两步</span><br><span class=\"line\">//预解析:js引擎会把js里的所有var， function提升到当前作用域的最前面，但不提升赋值操作</span><br><span class=\"line\">//代码执行：顺序从上往下执行</span><br><span class=\"line\">fun();</span><br><span class=\"line\">var fun=function()&#123;xxx&#125;;//会报错</span><br><span class=\"line\">//-------------</span><br><span class=\"line\">fun();</span><br><span class=\"line\">function fun()&#123;xxx&#125;//正常运行</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//预编译:创建AO对象;找已声明的变量,值都是undefined;实参形参值相等;找函数声明，会覆盖形参的值</span><br><span class=\"line\">function fn(a,c)&#123;</span><br><span class=\"line\">\tconsole.log(c);\t//2</span><br><span class=\"line\">\tconsole.log(a);\t//function a()</span><br><span class=\"line\">\tfunction a()&#123; &#125;</span><br><span class=\"line\"></span><br><span class=\"line\">\tvar a=12;</span><br><span class=\"line\">\tconsole.log(a);\t\t//12</span><br><span class=\"line\"></span><br><span class=\"line\">\tconsole.log(b);\t\t//undefined</span><br><span class=\"line\">\tvar b=function()&#123;&#125;</span><br><span class=\"line\">\tconsole.log(b);\t\t//function b()</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\">fn(1,2);</span><br></pre></td></tr></table></figure>\n\n\n<p>JavaScript 初始化不会被提升<br>JavaScript 只提升声明，而非初始化。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 5; // 初始化 x</span><br><span class=\"line\"> </span><br><span class=\"line\">elem = document.getElementById(&quot;demo&quot;); // 查找元素</span><br><span class=\"line\">elem.innerHTML = x + &quot; &quot; + y;           // 显示 x 和 y</span><br><span class=\"line\"> </span><br><span class=\"line\">var y = 7; // 初始化 y </span><br></pre></td></tr></table></figure>\n<h2 id=\"ES6-中的一些新特性。\"><a href=\"#ES6-中的一些新特性。\" class=\"headerlink\" title=\"ES6 中的一些新特性。\"></a>ES6 中的一些新特性。</h2><ul>\n<li>JavaScript let</li>\n<li>JavaScript const</li>\n<li>幂 (**)</li>\n<li>默认参数值</li>\n<li>Array.find()<br>在数组中查找符合条件的元素，只要找到一个符合条件的元素，就终止遍历，返回值为找到的元素。<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var array=[1,2,3,45,5];</span><br><span class=\"line\">var res=arr.find(function(item,idex,array)&#123;</span><br><span class=\"line\">//查找条件</span><br><span class=\"line\">return item&gt;5;</span><br><span class=\"line\">&#125;)</span><br><span class=\"line\">console.log(res);</span><br></pre></td></tr></table></figure></li>\n<li>Array.findIndex()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">array.findIndex(item=&gt;item&gt;20);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Array.copyWithin()<br>第一个参数：从哪个下标开始<br>第二第三个参数：开始与结束的范围[start,end)<br>把范围里的元素从第一个参数开始覆盖。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr=[2,3,4,1,4,5,1,6,7,8,9,1,3];</span><br><span class=\"line\">arr.copyWithin(2,5,7);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Object.assign();合并对象</li>\n</ul>\n<p>将所有传入的对象都合并到第一个对象里。浅拷贝，</p>\n<ul>\n<li>let 和 const 关键字<br>用 let 或 const 声明的变量和常量不会被提升！遇到大括号就形成作用域。<blockquote>\n<p>全局（在函数之外）声明的变量拥有全局作用域。<br>局部（函数内）声明的变量拥有函数作用域。</p>\n</blockquote>\n</li>\n</ul>\n<p>通过 var 关键词声明的变量没有块作用域。将变量或者形参所在函数的大括号作为作用域处理。<br>在块 {} 内声明的变量可以从块之外进行访问。</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  var x = 10; </span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 此处可以使用 x</span><br></pre></td></tr></table></figure>\n\n<p>在 ES2015 之前，JavaScript 是没有块作用域的。</p>\n<p>可以使用 let 关键词声明拥有块作用域的变量。</p>\n<p>在块 {} 内声明的变量无法从块外访问：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&#123; </span><br><span class=\"line\">  let x = 10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 此处不可以使用 x</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>重新声明变量</li>\n</ul>\n<p>使用 var 关键字重新声明变量会带来问题。</p>\n<p>在块中重新声明变量也将重新声明块外的变量：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 10;</span><br><span class=\"line\">// 此处 x 为 10</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  var x = 6;</span><br><span class=\"line\">  // 此处 x 为 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 此处 x 为 6</span><br></pre></td></tr></table></figure>\n\n<p>使用 let 关键字重新声明变量可以解决这个问题。</p>\n<p>在块中重新声明变量不会重新声明块外的变量：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = 10;</span><br><span class=\"line\">// 此处 x 为 10</span><br><span class=\"line\">&#123; </span><br><span class=\"line\">  let x = 6;</span><br><span class=\"line\">  // 此处 x 为 6</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">// 此处 x 为 10</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>Internet Explorer 11 或更早的版本不完全支持 let 关键词。</p>\n</blockquote>\n<ul>\n<li>var 与let 区别</li>\n</ul>\n<p>通过 var 关键词定义的全局变量属于 window 对象<br>通过 let 关键词定义的全局变量不属于 window 对象<br>允许在程序的任何位置使用 var 重新声明 JavaScript 变量<br>在相同的作用域，或在相同的块中，通过 let 重新声明一个 var 变量是不允许的<br>在相同的作用域，或在相同的块中，通过 let 重新声明一个 let 变量是不允许的<br>在相同的作用域，或在相同的块中，通过 var 重新声明一个 let 变量是不允许的<br>在不同的作用域或块中，通过 let 重新声明变量是允许的<br>通过 var 声明的变量会提升到顶端<br>通过 let 定义的变量不会被提升到顶端</p>\n<ul>\n<li>const</li>\n</ul>\n<p>通过 const 定义的变量与 let 变量类似，但不能重新赋值;const 变量必须在声明时赋值,const 变量不能在声明之前使用</p>\n<ul>\n<li>但常量对象是可以更改</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">// 您可以创建 const 对象：</span><br><span class=\"line\">const car = &#123;type:&quot;porsche&quot;, model:&quot;911&quot;, color:&quot;Black&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 您可以更改属性：</span><br><span class=\"line\">car.color = &quot;White&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">// 您可以添加属性：</span><br><span class=\"line\">car.owner = &quot;Bill&quot;;</span><br></pre></td></tr></table></figure>\n\n<p>但是您无法重新为常量对象赋值：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const car = &#123;type:&quot;porsche&quot;, model:&quot;911&quot;, color:&quot;Black&quot;&#125;;</span><br><span class=\"line\">car = &#123;type:&quot;Volvo&quot;, model:&quot;XC60&quot;, color:&quot;White&quot;&#125;;    // ERROR</span><br></pre></td></tr></table></figure>\n\n<p>同理常量数组可以更改；但是您无法重新为常量数组赋值<br>在同一作用域或块中，不允许将已有的 var 或 let 变量重新声明或重新赋值给 const;<br>在同一作用域或块中，为已有的 const 变量重新声明声明或赋值是不允许的;<br>在另外的作用域或块中重新声明 const 是允许的：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const x = 2;       // 允许</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  const x = 3;   // 允许</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  const x = 4;   // 允许</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>Internet Explorer 10 或更早版本不支持 const 关键词。</p>\n</blockquote>\n<ul>\n<li>声明严格模式</li>\n</ul>\n<p>通过在脚本或函数的开头添加 “use strict”; 来声明严格模式。(浏览器低版本不兼容)<br>在脚本开头进行声明，拥有全局作用域（脚本中的所有代码均以严格模式来执行）：<br>在函数中声明严格模式，拥有局部作用域（只有函数中的代码以严格模式执行）</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&quot;use strict&quot;;</span><br><span class=\"line\">x = 3.14;       // 这会引发错误，因为 x 尚未声明</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>严格模式中不允许的事项：<br>在不声明变量的情况下使用变量，是不允许的;<br>在不声明对象的情况下使用对象也是不允许的：<br>删除变量（或对象）是不允许的<code>delete:x;</code><br>删除函数是不允许的,重复参数名是不允许的,八进制数值文本是不允许的,转义字符是不允许的写入只读属性是不允许的,写入只能获取的属性是不允许的,删除不可删除的属性是不允许的,字符串 “eval” 不可用作变量,字符串 “arguments” 不可用作变量,with 语句是不允许的,处于安全考虑，不允许 eval() 在其被调用的作用域中创建变量,在类似 f() 的函数调用中，this 的值是全局对象。在严格模式中，现在它成为了 undefined。</li>\n</ul>\n<h3 id=\"对象\"><a href=\"#对象\" class=\"headerlink\" title=\"对象\"></a>对象</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//利用对象字面量创建对象&#123;&#125;</span><br><span class=\"line\">var obj=&#123;&#125;;\t//创建了一个空的对象</span><br><span class=\"line\">var obj=&#123;</span><br><span class=\"line\">username:&#x27;张山&#x27;,</span><br><span class=\"line\">age: 18,</span><br><span class=\"line\">sex:&#x27;男&#x27;,</span><br><span class=\"line\">hi:function()&#123;</span><br><span class=\"line\">console.log(&#x27;hello!!!!!!!!!!!!!!&#x27;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//#################</span><br><span class=\"line\">//利用new Object 创建对象</span><br><span class=\"line\">var obj1= new Object();//创建一个空对象,可省略new</span><br><span class=\"line\">obj1.username=&#x27;张山&#x27;;</span><br><span class=\"line\">obj1.age= 18;</span><br><span class=\"line\">obj1.sex=&#x27;男&#x27;;</span><br><span class=\"line\">obj1.hi=function()&#123;</span><br><span class=\"line\">console.log(&#x27;hello!!!!!!!!!!!!!!&#x27;);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//里面的属性或方法，采用键值对的形式-&gt;  属性名： 属性值</span><br><span class=\"line\">//多个属性或方法中间用逗号隔开</span><br><span class=\"line\">//方法冒号后面跟的是一个匿名函数</span><br><span class=\"line\">//##################################</span><br><span class=\"line\">//调用对象的属性，采用 对象名.属性名</span><br><span class=\"line\">console.log(obj1.uname);</span><br><span class=\"line\">//或者 对象名[&#x27;属性名&#x27;]</span><br><span class=\"line\">console.log(obj1[&#x27;age&#x27;]);</span><br><span class=\"line\">//调用对象的方法-&gt; 对象名.方法名</span><br><span class=\"line\">obj1.hi();</span><br><span class=\"line\">//如果您不使用 () 访问 fullName 方法，则将返回函数的具体内容</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//##############################</span><br><span class=\"line\">//遍历对象</span><br><span class=\"line\">//for(变量 in 对象)&#123;&#125;</span><br><span class=\"line\">for (var i in obj)&#123;</span><br><span class=\"line\">console.log(k);\t\t</span><br><span class=\"line\">console.log(obj[i]);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//################################</span><br><span class=\"line\">//利用构造函数创建对象</span><br><span class=\"line\">//function 构造函数名()&#123;</span><br><span class=\"line\">//this.属性名=值;</span><br><span class=\"line\">//this.方法名=function()&#123;&#125;</span><br><span class=\"line\">//&#125;</span><br><span class=\"line\">// new 构造函数名();</span><br><span class=\"line\">function Star(username,age,sex)&#123;</span><br><span class=\"line\">this.name=username;</span><br><span class=\"line\">this.age=age;</span><br><span class=\"line\">this.sex=sex;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">new Star(&#x27;刘德华&#x27;,58,&#x27;男&#x27;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>箭头函数（Arrow Function）<br>箭头函数允许使用简短的语法来编写函数表达式。</li>\n</ul>\n<p>您不需要 function 关键字、return 关键字以及花括号。</p>\n<blockquote>\n<p>注意:箭头函数不能用new，如果返回值是一个对象，一定要加（）；箭头函数中的this，指向的是上层函数的主人；</p>\n</blockquote>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = function(x, y) &#123;</span><br><span class=\"line\">   return x * y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//多个参数，有返回值</span><br><span class=\"line\">var  x = (x, y) =&gt; x * y;</span><br><span class=\"line\">//或</span><br><span class=\"line\">var x=(x,Y)=&gt;&#123;</span><br><span class=\"line\">reruen x*y;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">function add(x)&#123;</span><br><span class=\"line\">return x+10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//一个参数，有返回值</span><br><span class=\"line\">var add=x=&gt;x+10;</span><br><span class=\"line\">add(5);</span><br><span class=\"line\">//或</span><br><span class=\"line\">var add=x=&gt;&#123;</span><br><span class=\"line\">return x+10;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">function show()&#123;</span><br><span class=\"line\">alert(&quot;hello&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//无参数，无返回值</span><br><span class=\"line\">var show=()=&gt;&#123;</span><br><span class=\"line\">alert(&quot;hello&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">--------------------</span><br><span class=\"line\">function xxx(num)&#123;</span><br><span class=\"line\">alert(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//有一个参数，无返回值</span><br><span class=\"line\">var xxx=num=&gt;&#123;</span><br><span class=\"line\">alert(num);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">----------------</span><br><span class=\"line\">function show()&#123;</span><br><span class=\"line\">return &#123;name:&#x27;xxx&#x27;&#125;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//返回对象</span><br><span class=\"line\">var show=()=&gt;(&#123;..&#125;);</span><br></pre></td></tr></table></figure>\n\n<p>箭头功能没有自己的 this。它们不适合定义对象方法。<br>箭头功能未被提升。它们必须在使用前进行定义。</p>\n<p>使用 const 比使用 var 更安全，因为函数表达式始终是常量值。<br>如果函数是单个语句，则只能省略 return 关键字和花括号。因此，保留它们可能是一个好习惯：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">const x = (x, y) =&gt; &#123; return x * y &#125;;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"内置对象-如同内置函数）如-Math、-Date、-Array、-String、\"><a href=\"#内置对象-如同内置函数）如-Math、-Date、-Array、-String、\" class=\"headerlink\" title=\"内置对象(如同内置函数）如:Math、 Date、 Array、 String、\"></a>内置对象(如同内置函数）如:Math、 Date、 Array、 String、</h4><p>Math对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">Math.PI  //圆周率</span><br><span class=\"line\">Math.abs()\t//求绝对值</span><br><span class=\"line\">Math.max()\t//求最大</span><br><span class=\"line\">Math.min()\t//求最小值</span><br><span class=\"line\">Math.pow(x,y) \t//x的y次幂</span><br><span class=\"line\">Math.round()\t//四舍五入</span><br><span class=\"line\">Math.random()\t//获取随机数</span><br><span class=\"line\">Math.ceil()\t// 向上取整,有小数就整数部分加1</span><br><span class=\"line\">Math.floor()\t// 向下取整,丢弃小数部分</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>获取当前时间</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//时间对象是静态的</span><br><span class=\"line\">//必须实例化</span><br><span class=\"line\">var nowdate=new Date();</span><br><span class=\"line\">console.log(nowdate);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//############</span><br><span class=\"line\">//Date()构造函数的参数</span><br><span class=\"line\">//自定义日期格式</span><br><span class=\"line\">var nowdate=new Date(&quot;2020-2-22&quot;);</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//日期格式化</span><br><span class=\"line\">//getFUllYear()\t//年</span><br><span class=\"line\">//getMonth() \t//月</span><br><span class=\"line\">//getDate()\t//天</span><br><span class=\"line\">//getDay()\t//星期（周日0到周六6）</span><br><span class=\"line\">//getHours()</span><br><span class=\"line\">//getMinutes()</span><br><span class=\"line\">//getSeconds()</span><br><span class=\"line\">var date= new Date();</span><br><span class=\"line\">console.log(date.getHours());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//封装一个获取时间的方法</span><br><span class=\"line\">function gettime()&#123;</span><br><span class=\"line\">var time = new Date();</span><br><span class=\"line\">var h=time.getHours();</span><br><span class=\"line\">h= h&lt;10 ? &quot;0&quot;+h : h;\t\t//小于10前面添加0</span><br><span class=\"line\">var m=time.getMinutes();</span><br><span class=\"line\">var s=getSeconds();</span><br><span class=\"line\">return h +&#x27;:&#x27;+ m +&#x27;:&#x27;+ s;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(gettime());</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//######################</span><br><span class=\"line\">//获取Date总毫秒数，距离1970.1.1的总毫秒数</span><br><span class=\"line\">var date= new Date();</span><br><span class=\"line\">console.log(date.valueOf());</span><br><span class=\"line\">//或</span><br><span class=\"line\">console.log(date.getTime());</span><br><span class=\"line\">//或</span><br><span class=\"line\">var date1= +new Date();\t\t//常用</span><br><span class=\"line\">console.log(date1);</span><br><span class=\"line\">//或</span><br><span class=\"line\">console.log(Date.now());\t//H5新增</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>js 时分秒转化为秒</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var time = &#x27;00:02:10&#x27;;</span><br><span class=\"line\">          var hour = time.split(&#x27;:&#x27;)[0];</span><br><span class=\"line\">          var min = time.split(&#x27;:&#x27;)[1];</span><br><span class=\"line\">          var sec = time.split(&#x27;:&#x27;)[2];</span><br><span class=\"line\"></span><br><span class=\"line\">          s = Number(hour*3600) + Number(min*60) + Number(sec);</span><br><span class=\"line\">          console.log(s);//130</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li> 设置日期对象的日期值</li>\n</ul>\n<table>\n<thead>\n<tr>\n<th>方法</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>setDate()</td>\n<td>以数值（1-31）设置日</td>\n</tr>\n<tr>\n<td>setFullYear()</td>\n<td>设置年（可选月和日）</td>\n</tr>\n<tr>\n<td>setHours()</td>\n<td>设置小时（0-23）</td>\n</tr>\n<tr>\n<td>setMilliseconds()</td>\n<td>设置毫秒（0-999）</td>\n</tr>\n<tr>\n<td>setMinutes()</td>\n<td>设置分（0-59）</td>\n</tr>\n<tr>\n<td>setMonth()</td>\n<td>设置月（0-11）</td>\n</tr>\n<tr>\n<td>setSeconds()</td>\n<td>设置秒（0-59）</td>\n</tr>\n<tr>\n<td>setTime()</td>\n<td>设置时间（从 1970 年 1 月 1 日至今的毫秒数）</td>\n</tr>\n</tbody></table>\n<p>setFullYear() 方法设置日期对象的年份。这个例子设置为 2020 年：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var d = new Date();</span><br><span class=\"line\">d.setFullYear(2020);</span><br><span class=\"line\">document.getElementById(&quot;demo&quot;).innerHTML = d;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>比较日期</li>\n</ul>\n<p>日期可以很容易地进行比较。</p>\n<p>下面的例子把今日与 2049 年 1 月 16 日进行比较：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var today, someday, text;</span><br><span class=\"line\">today = new Date();</span><br><span class=\"line\">someday = new Date();</span><br><span class=\"line\">someday.setFullYear(2049, 0, 16);</span><br><span class=\"line\">if (someday &gt; today) &#123;</span><br><span class=\"line\">  text = &quot;今天在 2049 年 1 月 16 日之前&quot;;</span><br><span class=\"line\">&#125; else &#123;</span><br><span class=\"line\">  text = &quot;今天在 2049 年 1 月 16 日之后&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.getElementById(&quot;demo&quot;).innerHTML = text;</span><br></pre></td></tr></table></figure>\n<h3 id=\"定时器\"><a href=\"#定时器\" class=\"headerlink\" title=\"定时器\"></a>定时器</h3><ul>\n<li><p>setInterval(“函数”，毫秒数);<br>每隔对应的毫秒执行一次传入的函数;<br>返回值为：系统给启动定时器分配的编号；</p>\n</li>\n<li><p>clearInterval(定时器编号);<br>取消定时器</p>\n</li>\n</ul>\n<h3 id=\"延时器\"><a href=\"#延时器\" class=\"headerlink\" title=\"延时器\"></a>延时器</h3><pre><code>只执行一次\n</code></pre>\n<ul>\n<li>创建延时器<br>  <code>window.setTimeout(函数类型，延迟时间)</code><br>  返回值timeoutID是一个正整数，表示定时器的编号需要注意的是setTimeout()和setInterval()共用一个编号池，技术上，clearTimeout()和 clearInterval() 可以互换。但是，为了避免混淆，不要混用取消定时函数。</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var timer1=window.setTimeout(function ()&#123;</span><br><span class=\"line\">                console.log(&quot;你好啊！！！&quot;);</span><br><span class=\"line\">            &#125;,3000);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>清除延时器</li>\n</ul>\n<p><code>window.clearTimeout(延时器名称)</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function func()&#123;</span><br><span class=\"line\">                //清除延时器</span><br><span class=\"line\">                window.clearTimeout(timer1);</span><br><span class=\"line\">            &#125;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JS-this-关键词指的是它所属的对象。\"><a href=\"#JS-this-关键词指的是它所属的对象。\" class=\"headerlink\" title=\"JS this 关键词指的是它所属的对象。\"></a>JS this 关键词指的是它所属的对象。</h3><p>它拥有不同的值，具体取决于它的使用位置：</p>\n<ul>\n<li>在方法中，this 指的是所有者对象。</li>\n</ul>\n<p>在对象方法中，this 指的是此方法的“拥有者”。<br>在本页最上面的例子中，this 指的是 person 对象。<br>person 对象是 fullName 方法的拥有者。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person = &#123;</span><br><span class=\"line\">  firstName: &quot;Bill&quot;,</span><br><span class=\"line\">  lastName : &quot;Gates&quot;,</span><br><span class=\"line\">  id       : 678,</span><br><span class=\"line\">fullName : function() &#123;</span><br><span class=\"line\">  return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>单独的情况下，this 指的是全局对象。</li>\n</ul>\n<p>在单独使用时，拥有者是全局对象，因此 this 指的是全局对象。<br>在浏览器窗口中，全局对象是 [object Window]：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var x = this;</span><br></pre></td></tr></table></figure>\n\n<p>在严格模式中，如果单独使用，那么 this 指的是全局对象 [object Window]</p>\n<ul>\n<li>在函数中，this 指的是全局对象。</li>\n</ul>\n<p>在 JavaScript 函数中，函数的拥有者默认绑定 this。<br>因此，在函数中，this 指的是全局对象 [object Window]。</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function myFunction() &#123;</span><br><span class=\"line\">  return this;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<p>箭头函数没有自己的this，其中的this指的是window全局对象</p>\n<p>在函数中使用时，在严格模式下，this 是未定义的（undefined）</p>\n<ul>\n<li>在事件中，this 指的是接收事件的元素。</li>\n</ul>\n<p>在 HTML 事件处理程序中，this 指的是接收此事件的 HTML 元素：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=&quot;this.style.display=&#x27;none&#x27;&quot;&gt;</span><br><span class=\"line\">  点击来删除我！</span><br><span class=\"line\">&lt;/button&gt;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>像 call() 和 apply() 这样的方法可以将 this 引用到任何对象。</p>\n<ul>\n<li><p>call<br>格式：函数名.call();<br>参数：第一个参数：传入该函数this指向的对象，传入什么强制指向什么。<br> 第二参数开始：将原函数的参数往后顺延一位。</p>\n</li>\n<li><p>apply<br>格式：函数名.apply()<br>参数：第一个参数：传入该函数this指向的对象，传入什么强制指向什么。<br> 第二个参数：数组 其放入我们所有原来的参数。</p>\n</li>\n<li><p>bind预设this指向</p>\n</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show(x,y)&#123;</span><br><span class=\"line\">console.log(this);</span><br><span class=\"line\">console.log(x);</span><br><span class=\"line\">console.log(y);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var res=show.bind(&quot;bind&quot;);</span><br><span class=\"line\">console.log(res);</span><br></pre></td></tr></table></figure>\n\n\n<p>call() 和 apply() 方法是预定义的 JavaScript 方法。<br>它们都可以用于将另一个对象作为参数调用对象方法。<br>在下面的例子中，当使用 person2 作为参数调用 person1.fullName 时，this 将引用 person2，即使它是 person1 的方法：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var person1 = &#123;</span><br><span class=\"line\">  fullName: function() &#123;</span><br><span class=\"line\">    return this.firstName + &quot; &quot; + this.lastName;</span><br><span class=\"line\">  &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var person2 = &#123;</span><br><span class=\"line\">  firstName:&quot;Bill&quot;,</span><br><span class=\"line\">  lastName: &quot;Gates&quot;,</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">person1.fullName.call(person2);  // 会返回 &quot;Bill Gates&quot;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"js错误\"><a href=\"#js错误\" class=\"headerlink\" title=\"js错误\"></a>js错误</h2><ul>\n<li><p>try 语句使您能够测试代码块中的错误。</p>\n</li>\n<li><p>catch 语句允许您处理错误。</p>\n</li>\n<li><p>throw 语句允许您创建自定义错误。</p>\n</li>\n<li><p>finally 使您能够执行代码，在 try 和 catch 之后，无论结果如何。</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">try &#123;</span><br><span class=\"line\">     供测试的代码块</span><br><span class=\"line\">\tthrow new Error(&quot;直接允许&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"> catch(err) &#123;</span><br><span class=\"line\">console.log(err);</span><br><span class=\"line\">     处理错误的代码块</span><br><span class=\"line\">//如果try中的代码无异常则不执行catch中的代码</span><br><span class=\"line\">&#125; </span><br><span class=\"line\">finally &#123;</span><br><span class=\"line\">     无论 try / catch 结果如何都执行的代码块</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//----------------------------------</span><br><span class=\"line\">function myFunction() &#123;</span><br><span class=\"line\">    var message, x;</span><br><span class=\"line\">    message = document.getElementById(&quot;message&quot;);</span><br><span class=\"line\">    message.innerHTML = &quot;&quot;;</span><br><span class=\"line\">    x = document.getElementById(&quot;demo&quot;).value;</span><br><span class=\"line\">    try &#123; </span><br><span class=\"line\">        if(x == &quot;&quot;) throw &quot;是空的&quot;;</span><br><span class=\"line\">        if(isNaN(x)) throw &quot;不是数字&quot;;</span><br><span class=\"line\">         x = Number(x);</span><br><span class=\"line\">        if(x &gt;  10) throw &quot;太大&quot;;</span><br><span class=\"line\">        if(x &lt;  5) throw &quot;太小&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    catch(err) &#123;</span><br><span class=\"line\">        message.innerHTML = &quot;错误：&quot; + err + &quot;.&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">    finally &#123;</span><br><span class=\"line\">        document.getElementById(&quot;demo&quot;).value = &quot;&quot;;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"JavaScript-闭包\"><a href=\"#JavaScript-闭包\" class=\"headerlink\" title=\"JavaScript 闭包\"></a>JavaScript 闭包</h3><ul>\n<li><p>闭包特点：</p>\n<ol>\n<li>函数嵌套函数</li>\n<li>内部函数使用外部函数的形参和变量</li>\n<li>被引用的形参和变量不会被内存回收</li>\n</ol>\n</li>\n<li><p>好处：</p>\n<ol>\n<li>变量能常驻内存当中</li>\n<li>避免全局变量污染</li>\n<li>可以声明私有成员</li>\n</ol>\n</li>\n</ul>\n<p>JavaScript 变量属于本地或全局作用域。</p>\n<p>全局变量能够通过闭包实现局部（私有）。<br>闭包指的是有权访问父作用域的函数，即使在父函数关闭之后</p>\n<blockquote>\n<p>拥有相同名称的全局变量和局部变量是不同的变量。修改一个，不会改变其他。不通过关键词 var 创建的变量总是全局的，即使它们在函数中创建。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var add = (function () &#123;</span><br><span class=\"line\">    var counter = 0;</span><br><span class=\"line\">    return function () &#123;return counter += 1;&#125;</span><br><span class=\"line\">&#125;)();</span><br><span class=\"line\"></span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\">add();</span><br><span class=\"line\"></span><br><span class=\"line\">// 计数器目前是 3 </span><br><span class=\"line\">/*</span><br><span class=\"line\">第一次调用add()，相当于执行了function()&#123;return (++counter)&#125;一次；第二次调用add()，相当于又执行了function()&#123;return (++counter)&#125;一次；又由于function()&#123;return (++counter)&#125;是闭包，引用了其父函数的变量counter，所以在函数调用完毕counter依然存在，没有清零。</span><br><span class=\"line\">    而且只在第一次给add赋值时，将counter设置为0。以后每次调用add()，counter都自增一次，没有重置。也就是前文说的，父函数只执行一次，每次调用都只执行了子函数。</span><br><span class=\"line\">    这是为什么呢？因为只有执行下面这个函数，counter才重置。而这个函数只在第一次给add赋值时执行过一次。以后每次调用add()，都相当于调用function()&#123;return(++counter)&#125;。</span><br><span class=\"line\">    function()&#123;</span><br><span class=\"line\">       var counter = 0;</span><br><span class=\"line\">       return function()&#123;</span><br><span class=\"line\">          return (++counter);</span><br><span class=\"line\">       &#125;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">*/</span><br></pre></td></tr></table></figure>\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var moduleA=(function(mod)&#123;</span><br><span class=\"line\">var conut=10;\t//私有变量</span><br><span class=\"line\">function showA()&#123;\t//私有函数</span><br><span class=\"line\">count+=20;</span><br><span class=\"line\">console.log(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">function showB()&#123;</span><br><span class=\"line\">count*=10;</span><br><span class=\"line\">console.log(count);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mod.outA=showA;</span><br><span class=\"line\">mod.outB=showB;</span><br><span class=\"line\">//对外暴露</span><br><span class=\"line\">return mod;</span><br><span class=\"line\">&#125;)(moduleA||&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">var moduleA=(function(mod)&#123;</span><br><span class=\"line\">function showC()&#123;</span><br><span class=\"line\">console.log(&quot;jjjj&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">mod.outC=showC;</span><br><span class=\"line\">return mod;</span><br><span class=\"line\">&#125;)(moduleA||&#123;&#125;);</span><br><span class=\"line\"></span><br><span class=\"line\">mouleA.outA();</span><br><span class=\"line\">mouleA.outB();</span><br><span class=\"line\">mouleA.outC();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>立即执行函数写法</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var test=(function()&#123;</span><br><span class=\"line\">var c=0;</span><br><span class=\"line\">var m1=function()&#123;xxxx&#125;;</span><br><span class=\"line\">var m2=function()&#123;xxxx&#125;;</span><br><span class=\"line\">return&#123;</span><br><span class=\"line\">m1:m1,</span><br><span class=\"line\">m2:m2</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)();</span><br></pre></td></tr></table></figure>\n<h4 id=\"模块化规范\"><a href=\"#模块化规范\" class=\"headerlink\" title=\"模块化规范\"></a>模块化规范</h4><ul>\n<li>AMD规范：<ul>\n<li>声明：<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">define(function()&#123;</span><br><span class=\"line\">//代码</span><br><span class=\"line\">return&#123;</span><br><span class=\"line\">outA:showA,</span><br><span class=\"line\">outB:showB</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure></li>\n</ul>\n</li>\n</ul>\n<p>引用：（异步执行）</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">require(&quot;moduleA.js&quot;,function(moduleA)&#123;</span><br><span class=\"line\">moduleA.putA();</span><br><span class=\"line\">moduleA.putB();</span><br><span class=\"line\">&#125;)</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>ECMA6</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">export=&#123;</span><br><span class=\"line\">outA:showA</span><br><span class=\"line\">outB:showB</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">import moduleA from &quot;moduleA.js&quot;</span><br><span class=\"line\">moduleA.outA();</span><br><span class=\"line\">moduleA.outB();</span><br></pre></td></tr></table></figure>\n<ul>\n<li><p>JavaScript 性能</p>\n<ol>\n<li>减少循环中的活动</li>\n<li>减少 DOM 访问<br>与其他 JavaScript 相比，访问 HTML DOM 非常缓慢</li>\n<li>缩减 DOM 规模<br>请尽量保持 HTML DOM 中较少的元素数量。</li>\n<li>避免不必要的变量</li>\n<li>延迟 JavaScript 加载<br>请把脚本放在页面底部，使浏览器首先加载页面。</li>\n<li>避免使用 with<br>请避免使用 with 关键词。它对速度有负面影响。它也将混淆 JavaScript 作用域。</li>\n</ol>\n</li>\n</ul>\n<ul>\n<li>JavaScript JSON</li>\n</ul>\n<p>JSON 是存储和传输数据的格式。<br>JSON 格式仅仅是文本，它能够轻松地在服务器浏览器之间传输，并用作任何编程语言的数据格式。<br>JSON 语法衍生于 JavaScript 对象标记法语法:</p>\n<ul>\n<li>数据在名称/值对中</li>\n<li>数据由逗号分隔</li>\n<li>花括号容纳对象</li>\n<li>方括号容纳数组</li>\n</ul>\n<p>JSON 的值不可以是以下数据类型之一：函数;日期;undefined.</p>\n<p>把 JSON 文本转换为 JavaScript 对象<br>首先，创建包含 JSON 语法的 JavaScript 字符串：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var text = &#x27;&#123; &quot;employees&quot; : [&#x27; +</span><br><span class=\"line\">&#x27;&#123; &quot;firstName&quot;:&quot;Bill&quot; , &quot;lastName&quot;:&quot;Gates&quot; &#125;,&#x27; +</span><br><span class=\"line\">&#x27;&#123; &quot;firstName&quot;:&quot;Steve&quot; , &quot;lastName&quot;:&quot;Jobs&quot; &#125;,&#x27; +</span><br><span class=\"line\">&#x27;&#123; &quot;firstName&quot;:&quot;Alan&quot; , &quot;lastName&quot;:&quot;Turing&quot; &#125; ]&#125;&#x27;;</span><br></pre></td></tr></table></figure>\n\n<p>然后，使用 JavaScript 的内建函数 JSON.parse() 来把这个字符串转换为 JavaScript 对象：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var obj = JSON.parse(text);</span><br></pre></td></tr></table></figure>\n\n<p>最后，请在您的页面中使用这个新的 JavaScript 对象：</p>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;p id=&quot;demo&quot;&gt;\\&lt;/p&gt;</span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">document.getElementById(&quot;demo&quot;).innerHTML =</span><br><span class=\"line\">obj.employees[1].firstName + &quot; &quot; + obj.employees[1].lastName;</span><br><span class=\"line\">&lt;/script&gt; </span><br></pre></td></tr></table></figure>\n\n<p>JSON 与 XML 的差异在于：</p>\n<ul>\n<li>JSON 不使用标签</li>\n<li>JSON 更短</li>\n<li>JSON 的读写速度更快</li>\n<li>JSON 可使用数组</li>\n</ul>\n<p>最大的不同在于：</p>\n<p>XML 必须使用 XML 解析器进行解析。而 JSON 可通过标准的 JavaScript 函数进行解析。</p>\n<ul>\n<li>JavaScript 表单验证<br>HTML 表单验证能够通过 JavaScript 来完成</li>\n</ul>\n<p>JavaScript 实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function validateForm() &#123;</span><br><span class=\"line\">    var x = document.forms[&quot;myForm&quot;][&quot;fname&quot;].value;</span><br><span class=\"line\">    if (x == &quot;&quot;) &#123;</span><br><span class=\"line\">        alert(&quot;必须填写姓名&quot;);</span><br><span class=\"line\">        return false;</span><br><span class=\"line\">    &#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>该函数能够在表单提交时被调用：</p>\n<p>HTML 表单实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;form name=&quot;myForm&quot; action=&quot;action\\_page\\_post.php&quot; onsubmit=&quot;return validateForm()&quot; method=&quot;post&quot;&gt;</span><br><span class=\"line\">姓名：&lt;input type=&quot;text&quot; name=&quot;fname&quot;&gt;</span><br><span class=\"line\">&lt;input type=&quot;submit&quot; value=&quot;Submit&quot;&gt;</span><br><span class=\"line\">&lt;/form&gt;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"BOM\"><a href=\"#BOM\" class=\"headerlink\" title=\"BOM\"></a>BOM</h2><p>浏览器对象</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window:&#123;</span><br><span class=\"line\">document:&#123;anchors,forms,images,links,location&#125;,</span><br><span class=\"line\">frames,</span><br><span class=\"line\">history,</span><br><span class=\"line\">location,</span><br><span class=\"line\">navigator,</span><br><span class=\"line\">screen</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"window方法\"><a href=\"#window方法\" class=\"headerlink\" title=\"window方法\"></a>window方法</h3><ul>\n<li>alert();弹出提示框</li>\n<li>confirm();弹出带确认的提示框，点确认返回true，取消返回false</li>\n<li>prompt(“tips”,”tips”);弹出带输入框的提示框，第一个参数为面板上的提示的内容，第二个为输入框里提示的内容</li>\n<li>open();第一个参数的为跳转的url，第二个参数为新窗口的名字，第三个参数为设置打开窗口的属性；如width,height,top,left.</li>\n</ul>\n<p>history对象</p>\n<p>window..history掌管的是当前窗口的历史记录（只要加载的url不一样就会产生不一样的历史记录）</p>\n<p>属性：<br>history.length返回当前窗口的历史记录条数<br>方法：<br>history.back();返回上一条历史记录<br>history.forward()；前进下一条记录<br>history.go();跳转到（0为刷新，正整数为前进，负整数为后退）</p>\n<h3 id=\"location\"><a href=\"#location\" class=\"headerlink\" title=\"location\"></a>location</h3><p>location—地址栏</p>\n<p>方法：</p>\n<ul>\n<li><p>location.assign(url)<br>当前窗口跳转到该url</p>\n</li>\n<li><p>location.replace(url)</p>\n</li>\n</ul>\n<p>在当前窗口替换成新的url</p>\n<ul>\n<li>location.reload()</li>\n</ul>\n<p>刷新当前窗口</p>\n<ul>\n<li>location.reload(true)</li>\n</ul>\n<p>不经过浏览器缓存，强制从服务器重载</p>\n<hr>\n<p><em>url:统一资源定位符</em><br><em>协议://IP（域名）//:端口号/路径/?查询字符串#锚点</em></p>\n<ul>\n<li>location.protocol</li>\n</ul>\n<p>查看协议<br>file:本地磁盘文件访问<br>http:<br>https:</p>\n<ul>\n<li>location.hostname</li>\n</ul>\n<p>查看主机名 IP</p>\n<ul>\n<li>location.port</li>\n</ul>\n<p>查看端口号(默认隐藏，无法查看)</p>\n<p><code>hostname:port</code>可直接定位到当前使用的网络的程序</p>\n<ul>\n<li>location.pathname </li>\n</ul>\n<p>查看路径</p>\n<ul>\n<li>location.search </li>\n</ul>\n<p>查看字符串如<code>?name1=Tom&amp;name2=Tony</code></p>\n<ul>\n<li>location.hash</li>\n</ul>\n<p>查看锚点</p>\n<ul>\n<li>loaction.href</li>\n</ul>\n<p>查看整个url</p>\n<p>##DOM</p>\n<p>文档对象模型（document object model）<br>HTML DOM 方法是您能够（在 HTML 元素上）执行的动作。<br>HTML DOM 属性是您能够设置或改变的 HTML 元素的值。</p>\n<ul>\n<li><p>通过这个对象模型，JavaScript 获得创建动态 HTML 的所有力量：</p>\n<ul>\n<li>JavaScript 能改变页面中的所有 HTML 元素</li>\n<li>JavaScript 能改变页面中的所有 HTML 属性</li>\n<li>JavaScript 能改变页面中的所有 CSS 样式</li>\n<li>JavaScript 能删除已有的 HTML 元素和属性</li>\n<li>JavaScript 能添加新的 HTML 元素和属性</li>\n<li>JavaScript 能对页面中所有已有的 HTML 事件作出反应</li>\n<li>JavaScript 能在页面中创建新的 HTML 事件</li>\n</ul>\n</li>\n<li><p>节点类型:</p>\n<ul>\n<li>元素节点：<div></div></li>\n<li>属性节点：id=“div1”</li>\n<li>文本节点： 文本</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"结点的获取\"><a href=\"#结点的获取\" class=\"headerlink\" title=\"结点的获取\"></a>结点的获取</h3><ul>\n<li><p>document.getElementById(id);</p>\n</li>\n<li><p>node.getElementsByTagName(标签名);<br>通过标签名获取符合条件的元素节点，返回：伪数组</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//获取ol下的li节点</span><br><span class=\"line\">bar oOl=document.getElementById(&quot;ol1&quot;);</span><br><span class=\"line\">var lis=oOl.getElementsByTagName(&quot;li&quot;);</span><br><span class=\"line\">//返回的是数组</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>node.getElementsByClassName(class名);<br>通过class名字获取符合条件的元素节点；(IE8以下不兼容）</p>\n</li>\n<li><p>document.getElementByName(name属性的值);<br>通过name属性的值获取符合条件的元素节点，一般用于表单元素,因为其他元素使用name属性没用</p>\n</li>\n<li><p>document.querySelector(CSS选择器格式字符串);<br>返回一个元素节点，找到符合条件的第一个元素节点</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">//id=ol1</span><br><span class=\"line\">var node=document.querySelector(&quot;#ol1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//tagName=&#x27;li&#x27;</span><br><span class=\"line\">var node=document.querySelector(&quot;li&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">//class=box</span><br><span class=\"line\">var node =document.querySelector(&quot;.box&quot;);</span><br><span class=\"line\">node.style.backgroundColor=&#x27;red&#x27;;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li>document.querySelectorAll(CSS选择器格式字符串);<br>返回一个数组</li>\n</ul>\n<h3 id=\"获取样式\"><a href=\"#获取样式\" class=\"headerlink\" title=\"获取样式\"></a>获取样式</h3><ul>\n<li>node.currentStyle[‘height’];    //IE兼容</li>\n<li>getComputedStyle(node)[‘height’];    //火狐、谷歌</li>\n</ul>\n<p>获取的是当前有效的样式</p>\n<ul>\n<li>node.getAttribute(“class”);</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//增加属性,支持自定义</span><br><span class=\"line\">node.setAttribute(&quot;class&quot;,&quot;box&quot;);</span><br><span class=\"line\">node.setAttribute(&quot;jjj&quot;,&quot;aaa&quot;);</span><br><span class=\"line\">//删除属性</span><br><span class=\"line\">node.removeAttribute(&quot;class&quot;);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取内容\"><a href=\"#获取内容\" class=\"headerlink\" title=\"获取内容\"></a>获取内容</h3><ul>\n<li>innerHTML<br>获取标签内容，写入时会解析标签</li>\n<li>innerText<br>获取标签间纯文本，不会解析标签</li>\n<li>outerHTML<br>会替换整个标签</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var odiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(odiv.innerHTML);</span><br><span class=\"line\">odiv.innerHTML=&quot;&lt;h1&gt;jjjjjjjj&lt;/h1&gt;&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">console.log(odiv.innerText);</span><br><span class=\"line\">console.log(odiv.outerHTML);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取子节点\"><a href=\"#获取子节点\" class=\"headerlink\" title=\"获取子节点\"></a>获取子节点</h3><ul>\n<li><p>childNodes<br>访问当前节点下所有的子节点</p>\n</li>\n<li><p>firstChild<br>访问子节点中的首位</p>\n</li>\n<li><p>lastChild<br>访问子节点中的最后一位</p>\n</li>\n<li><p>nextSibling 访问当前节点兄弟节点中的下一个节点</p>\n</li>\n<li><p>previousSibling 访问当前节点兄弟节点中的上一个节点</p>\n</li>\n</ul>\n<blockquote>\n<p>上面这些属性都包含文本节点</p>\n</blockquote>\n<ul>\n<li>children</li>\n<li>firstElementChild</li>\n<li>lastElementChild</li>\n<li>nextElementSibling</li>\n<li>previousElementSibling</li>\n</ul>\n<blockquote>\n<p>上面这些属性只获取子节点中的元素节点，不包含文本。</p>\n</blockquote>\n<table>\n<thead>\n<tr>\n<th></th>\n<th>nodeType</th>\n<th>nodeName</th>\n<th>nodeValue</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>元素节点</td>\n<td>1</td>\n<td>标签名</td>\n<td>null</td>\n</tr>\n<tr>\n<td>属性节点</td>\n<td>2</td>\n<td>属性名</td>\n<td>属性值</td>\n</tr>\n<tr>\n<td>文本节点</td>\n<td>3</td>\n<td>#text</td>\n<td>文本内容</td>\n</tr>\n</tbody></table>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oDiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">console.log(oDiv.childNodes.length);\t//返回数组，里面为全部子元素，包括换行，缩进</span><br><span class=\"line\">console.log(oDiv.childNodes[0].nodeName);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;body&gt;</span><br><span class=\"line\">&lt;div id=&quot;div1&quot; &gt; &lt;em&gt; text&lt;/em&gt; divtext &lt;strong&gt;text&lt;/strong&gt;&lt;/div&gt;</span><br><span class=\"line\">&lt;/body&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"获取当前元素节点上的所有的属性节点\"><a href=\"#获取当前元素节点上的所有的属性节点\" class=\"headerlink\" title=\"获取当前元素节点上的所有的属性节点\"></a>获取当前元素节点上的所有的属性节点</h3><ul>\n<li>attrbutes</li>\n</ul>\n<p>获取当前元素节点上的所有的属性节点</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var oDiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">console.log(oDiv.attributes);</span><br></pre></td></tr></table></figure>\n\n<p>返回的是集合：</p>\n<ol>\n<li>无序</li>\n<li>不重复</li>\n</ol>\n<h3 id=\"获取其中的某一个属性节点\"><a href=\"#获取其中的某一个属性节点\" class=\"headerlink\" title=\"获取其中的某一个属性节点\"></a>获取其中的某一个属性节点</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//div中title=&quot;hello&quot;</span><br><span class=\"line\">console.log(oDiv.attributes.getNamedItem(&quot;title&quot;).nodeName);</span><br><span class=\"line\">console.log(oDiv.attributes.getNamedItem(&quot;title&quot;).nodeType);</span><br><span class=\"line\">console.log(oDiv.attributes.getNamedItem(&quot;title&quot;).nodeValue);</span><br><span class=\"line\">//或</span><br><span class=\"line\">console.log(oDiv.attributes[&quot;title&quot;].nodeName);</span><br><span class=\"line\">console.log(oDiv.attributes[&quot;title&quot;].nodeType);</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"节点操作\"><a href=\"#节点操作\" class=\"headerlink\" title=\"节点操作\"></a>节点操作</h3><blockquote>\n<p>document.write()会覆盖页面上的所有内容</p>\n</blockquote>\n<ul>\n<li>createElement()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.createElement();</span><br><span class=\"line\">参数：标签名</span><br><span class=\"line\">返回值：创建好的节点</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>appendChild()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node1.appendChild(node2);</span><br><span class=\"line\">将node2节点插入到node1节点的子节点的末尾</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>createTextNode()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.createTextNode(文本);</span><br><span class=\"line\">创建文本节点（纯文本）</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>insertBefore()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box1的父节点.insertBefore(box2,box1);</span><br><span class=\"line\">将box2添加到box1前面</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>replaceChild()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box1的父节点.replaceChild(box2,box1);</span><br><span class=\"line\">用box2替换掉box1</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>cloneNode()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">node.cloneNode();\t//克隆自己</span><br><span class=\"line\">node.cloneNode(true);\t//克隆自己和本身下的所有子节点</span><br><span class=\"line\">//返回克隆的新节点</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>removeChild()</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">box1的父节点.Child(box1);</span><br><span class=\"line\">删掉box1节点</span><br></pre></td></tr></table></figure>\n\n\n\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">                var oDiv=document.getElementById(&quot;div1&quot;);\t//div</span><br><span class=\"line\">               var newP=document.createElement(&#x27;p&#x27;);\t\t//创建一个新的p标签节点</span><br><span class=\"line\">                var newText=document.createTextNode(&#x27;jjjj&#x27;);\t//创建一个字符节点</span><br><span class=\"line\">                newP.appendChild(newText);\t\t\t//将字符节点插入到p节点中</span><br><span class=\"line\">                oDiv.appendChild(newP);\t\t\t\t//将p节点插入到div节点中</span><br><span class=\"line\">\t\tvar newb=document.createElement(&#x27;input&#x27;);\t\t//新建一个input节点</span><br><span class=\"line\">                oDiv.insertBefore(newb,newP);\t\t\t//将input节点添加到p节点前面</span><br><span class=\"line\">\t\t//doument.body.insertBefore(oP,oDiv);\t//将oP节点插入到oDiv 前面</span><br><span class=\"line\">        &#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n<h3 id=\"offset\"><a href=\"#offset\" class=\"headerlink\" title=\"offset\"></a>offset</h3><ul>\n<li>offsetWidth</li>\n<li>offsetHeight</li>\n</ul>\n<ul>\n<li><p>offsetLeft</p>\n</li>\n<li><p>offsetTop</p>\n<ol>\n<li><p>在父元素均不设置position属性时，在Chrome，opera和IE浏览器中offsetLeft是<em>元素边框外侧</em>到<em>浏览器窗口内侧</em>的距离且body.offsetLeft=0,在firefox浏览器中offsetLeft是元素边框外侧到body内侧的距离body.offsetLeft=-边框宽度</p>\n</li>\n<li><p>如果父元素是body且body设置了position属性，在Chrome和opera浏览器中offsetLeft是元素边框外侧到body边框外侧的距离，在IE和fireForx浏览器中offsetLeft是元素边框外侧到body边框内侧的距离</p>\n</li>\n<li><p>如果父元素不是body元素且设置了position属性时，offsetLeft为元素边框外侧到父元素边框内侧的距离（各浏览器情况一致）。</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oDiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">//alert(getStyle(ODiv,&quot;width&quot;));</span><br><span class=\"line\">alert(oDiv.offsetWidth);\t//眼睛能看到的实际宽度（width+border+padding）</span><br><span class=\"line\"></span><br><span class=\"line\">var oDiv2=document.getElementById(&quot;div2&quot;);</span><br><span class=\"line\">alert(oDiv2.offsetLeft);//眼睛能看到实际距离第一个有定位的父节点的距离。</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"HTML-事件\"><a href=\"#HTML-事件\" class=\"headerlink\" title=\"HTML 事件\"></a>HTML 事件</h2><p>HTML 事件可以是浏览器或用户做的某些事情。</p>\n<p>写法：</p>\n<ol>\n<li>内联模式</li>\n<li>脚本模式/外联模式</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">&lt;button onclick=&quot;btnClick()&quot;&gt; 内联模式&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;button id=&quot;btn&quot;&gt;外联模式&lt;/button&gt;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;script&gt;</span><br><span class=\"line\">var oBtn=document.getElementById(&quot;btn&quot;);</span><br><span class=\"line\">0Btn.onclick=function()&#123;</span><br><span class=\"line\">console.log(&quot;click button&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&lt;/script&gt;</span><br></pre></td></tr></table></figure>\n\n<p>绑定事件格式：<code>元素节点.on+事件类型=匿名函数</code>；</p>\n<blockquote>\n<p>系统会在事件绑定完成时，生成一个事件对象。触发事件时，系统会自动去调用事件绑定的函数，将事件对象当做第一个参数传入。</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show()&#123;</span><br><span class=\"line\">console.log(argument.length);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oBtn=document.getElement(&quot;btn1&quot;);</span><br><span class=\"line\">//oBtn.onclick=show;</span><br><span class=\"line\"></span><br><span class=\"line\">/*</span><br><span class=\"line\">button属性：左键0；中键1；右键2；</span><br><span class=\"line\"></span><br><span class=\"line\">鼠标位置：(原点位置不同）</span><br><span class=\"line\">clientX    clientY\t\t//可视窗口的左上角</span><br><span class=\"line\">pageX    pageY\t\t\t//整个页面的左上角（滚动也包括）</span><br><span class=\"line\">screenX    screenY\t\t//电脑屏幕的左上角</span><br><span class=\"line\">*/</span><br><span class=\"line\"></span><br><span class=\"line\">oBtn.onclick=function(e)&#123;</span><br><span class=\"line\">//事件对象获取的方式，固定写法</span><br><span class=\"line\">var ev=e||window.event;</span><br><span class=\"line\">console.log(ev);</span><br><span class=\"line\">//console.log(ev.button);</span><br><span class=\"line\">//console.log(ev.clientX);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>循环添加</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var Oblock=document.querySelectorAll(&#x27;div&#x27;);</span><br><span class=\"line\">\t\t\t//console.log(Oblock);</span><br><span class=\"line\">\t\t\tfor (var i=0 ;i&lt; Oblock.length;i++)&#123;</span><br><span class=\"line\">\t\t\t\tOblock[i].index=i;</span><br><span class=\"line\">\t\t\t\tOblock[i].onmousedown=function(e)&#123;</span><br><span class=\"line\">\t\t\t\tconsole.log(this.index);</span><br><span class=\"line\">\t\t\t\t&#125;</span><br><span class=\"line\">\t\t\t&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>window事件</p>\n<ul>\n<li>load 当页面加载完后会触发</li>\n<li>unload 当页面解析的时候触发（如刷新界面、关闭当前界面）IE浏览器兼容</li>\n<li>scroll 页面滚动</li>\n<li>resize 窗口大小发生变化的时候触发</li>\n</ul>\n</li>\n<li><p>表单事件</p>\n<ul>\n<li><p>blur 失去焦点</p>\n</li>\n<li><p>focus 获取焦点</p>\n</li>\n<li><p>select  在输入框内选中文本时触发</p>\n</li>\n<li><p>change 修改输入框内容并失去焦点时触发</p>\n</li>\n<li><p>sumit 只对sumit按钮有效</p>\n</li>\n<li><p>reset 只对reset按钮有效</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>下面是一些常见的 HTML 事件：</p>\n<table>\n<thead>\n<tr>\n<th>事件</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>onchange</td>\n<td>HTML 元素已被改变</td>\n</tr>\n<tr>\n<td>onclick</td>\n<td>用户点击了 HTML 元素</td>\n</tr>\n<tr>\n<td>ondblclick</td>\n<td>双击</td>\n</tr>\n<tr>\n<td>onmouseover</td>\n<td>用户把鼠标移动到 HTML 元素上(经过子节点会重复触发)</td>\n</tr>\n<tr>\n<td>onmouseout</td>\n<td>用户把鼠标移开 HTML 元素(经过子节点会重复触发)</td>\n</tr>\n<tr>\n<td>onmouseenter</td>\n<td>用户把鼠标移动到 HTML 元素上(经过子节点不会重复触发,IE8不兼容)</td>\n</tr>\n<tr>\n<td>onmouseleave</td>\n<td>用户把鼠标移开 HTML 元素(经过子节点不会重复触发,IE8不兼容)</td>\n</tr>\n<tr>\n<td>onmousedown</td>\n<td>鼠标任一按钮被按下</td>\n</tr>\n<tr>\n<td>onmousemove</td>\n<td>鼠标被移动,会不停触发</td>\n</tr>\n<tr>\n<td>onmouseup</td>\n<td>鼠标按键被松开</td>\n</tr>\n<tr>\n<td>onkeypress</td>\n<td>用户按下键盘按键(只支持字符建，shift等没用)</td>\n</tr>\n<tr>\n<td>onkeydown</td>\n<td>用户按下键盘按键</td>\n</tr>\n<tr>\n<td>onkeyup</td>\n<td>用户抬起键盘按键</td>\n</tr>\n<tr>\n<td>onload</td>\n<td>浏览器已经完成页面加载</td>\n</tr>\n</tbody></table>\n<p>键盘事件对象属性：</p>\n<ul>\n<li>shiftKey    //按下shift键为true，默认为false</li>\n<li>altKey</li>\n<li>ctrlKey</li>\n<li>metaKey        //按下win键</li>\n<li>keyCode    键码        //不区分大小写，只返回大写ASCII码，支持shift、ctrl等非字符键；只在keydown下支持,可用 which兼容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">window.onkeydown=function(ev)&#123;</span><br><span class=\"line\">var e=ev||window.event;</span><br><span class=\"line\">var w=e.which||e.keyCode;</span><br><span class=\"line\">console.log(w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>charCode        键码        //区分大小写，只支持字符键，只在keypress下支持,可用 which兼容</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">window.onkeypress=function(ev)&#123;</span><br><span class=\"line\">var e=ev||window.event;</span><br><span class=\"line\">var w=e.which||e.keyCode;</span><br><span class=\"line\">console.log(w);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>target<br>目标对象/触发对象</li>\n</ul>\n<p>IE8以下不兼容，可使用window.event.srcElement</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oUl=document.getElementById(&quot;ul1&quot;);</span><br><span class=\"line\"></span><br><span class=\"line\">window.onkeypress=function(ev)&#123;</span><br><span class=\"line\">var e=ev||window.event;</span><br><span class=\"line\">var target=e.target||window.event.srcElement;</span><br><span class=\"line\">console.log(this.tagName);</span><br><span class=\"line\">console.log(target.innerHTML);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>事件冒泡：由里向外逐级触发</li>\n</ul>\n<p>事件对象的属性和方法:<br>cancelBubble=true;<br>stopPropagation();</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oDiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">for(var i=0;i&lt;aDivs.length;i++)&#123;</span><br><span class=\"line\">window.onkeypress=function(ev)&#123;</span><br><span class=\"line\">var e=ev||window.event;</span><br><span class=\"line\">console.log(this.tagName);</span><br><span class=\"line\">e.cancelBubble=true;</span><br><span class=\"line\">//e.stopProgagation();</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"DOM事件监听器\"><a href=\"#DOM事件监听器\" class=\"headerlink\" title=\"DOM事件监听器\"></a>DOM事件监听器</h4><ul>\n<li>addEventListerner();<br>语法<br>element.addEventListener(event, function, useCapture);<br>第一个参数是事件的类型（比如 “click” 或 “mousedown”）。第二个参数是当事件发生时我们需要调用的函数。第三个参数是布尔值，指定使用事件冒泡还是事件捕获,默认false事件冒泡,此参数是可选的。<blockquote>\n<p>注意：请勿对事件使用 “on” 前缀；请使用 “click” 代替 “onclick”。</p>\n</blockquote>\n</li>\n</ul>\n<p>实例</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//添加当用户点击按钮时触发的事件监听器：</span><br><span class=\"line\">document.getElementById(&quot;myBtn&quot;).addEventListener(&quot;click&quot;, displayDate);</span><br></pre></td></tr></table></figure>\n<p>addEventListener() 方法为指定元素指定事件处理程序。addEventListener() 方法为元素附加事件处理程序而不会覆盖已有的事件处理程序。您能够向一个元素添加多个事件处理程序。您能够向一个元素添加多个相同类型的事件处理程序，例如两个 “click” 事件。传统事件绑定重复添加会覆盖。您能够向任何 DOM 对象添加事件处理程序而非仅仅 HTML 元素，例如 window 对象。addEventListener() 方法使我们更容易控制事件如何对冒泡作出反应。当使用 addEventListener() 方法时，JavaScript 与 HTML 标记是分隔的，已达到更佳的可读性；即使在不控制 HTML 标记时也允许您添加事件监听器。</p>\n<p>您能够通过使用 <code>removeEventListener()</code> 方法轻松地删除事件监听器。</p>\n<p>格式：<code>node.removeEvenetListener()</code><br>参数：第一个为事件类型，第二个为删除函数的名字；</p>\n<h4 id=\"IE事件处理函数\"><a href=\"#IE事件处理函数\" class=\"headerlink\" title=\"IE事件处理函数\"></a>IE事件处理函数</h4><ul>\n<li>attachEvent();<br>参数：事件名称和函数<br>格式：node.attchEvent(onclink,fn);</li>\n</ul>\n<ul>\n<li>detachEvent();<br>参数：事件名称和函数<br>格式：node.detachEvent(onclink,fn);</li>\n</ul>\n<ul>\n<li>阻止超链接的默认行为</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var a1=document.getElementById(&quot;a1&quot;);</span><br><span class=\"line\">a1.onclick=function()&#123;</span><br><span class=\"line\">return confirm(&quot;are you sure?&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//或</span><br><span class=\"line\">a1.onclick=function(evt)&#123;</span><br><span class=\"line\">evt.preventDefault();</span><br><span class=\"line\">alert(&quot;done&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//or</span><br><span class=\"line\">a1.onclick=function(evt)&#123;</span><br><span class=\"line\">window.event.returnValue=false;\t\t\t//IE兼容</span><br><span class=\"line\">alert(&quot;done&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&lt;a id=&quot;a1&quot; href=&quot;...&quot;&gt;&lt;/a&gt;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"委托\"><a href=\"#委托\" class=\"headerlink\" title=\"委托\"></a>委托</h3><p>事件委托</p>\n<ol>\n<li>找到当前节点的父节点或者祖先节点</li>\n<li>将事件添加到你找到的这个父节点或者祖先节点上</li>\n<li>找到触发对象，判断触发对象是否是想要的触发对象，进行后续操作</li>\n</ol>\n<p>li委托ul将li变成红色：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oUl=document.getElementById(&quot;ul1&quot;);</span><br><span class=\"line\">oUl.onclick=function(ev)&#123;</span><br><span class=\"line\">var e=ev||winow.event;</span><br><span class=\"line\">var target=e.target||winow.event.target;</span><br><span class=\"line\">if(target.nodeName.toLowerCase()==&quot;li&quot;)&#123;</span><br><span class=\"line\">target.style.backgroundColor=&quot;red&quot;;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n\n<h3 id=\"localStorage\"><a href=\"#localStorage\" class=\"headerlink\" title=\"localStorage\"></a>localStorage</h3><p>HTML5中年，加入了一个localStorage特性，用来作为本地存储使用的，解决了cookie存储空间不足的问题。localStorage中一般浏览器支持5M大小，cookie中每条cookie的存储空间为4k。</p>\n<ul>\n<li>本地存储技术：</li>\n</ul>\n<p><em>localStorage(IE8以下不兼容);</em></p>\n<ul>\n<li><p>永久存储</p>\n</li>\n<li><p>最大可存储5M，相当于客户端一个微型数据库</p>\n</li>\n<li><p>只能存储string</p>\n</li>\n<li><p>localStorage对象</p>\n<ul>\n<li>setItem(name,value);</li>\n</ul>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(!window.localStorage)&#123;</span><br><span class=\"line\">alert(&quot;当前页面不支持localStorage&quot;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">else&#123;</span><br><span class=\"line\">localStorage.setItem(&quot;a&quot;,&quot;1&quot;);</span><br><span class=\"line\">localStorage.b=&quot;2&quot;;</span><br><span class=\"line\">localStorage[&quot;c&quot;]=&quot;3&quot;;</span><br><span class=\"line\">console.log(localStorage.getItem(&quot;b&quot;);</span><br><span class=\"line\">console.log(localStorage.b;</span><br><span class=\"line\">console.log(localStorage[&quot;a&quot;];</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getItem(name);</li>\n<li>removeItem(name);</li>\n</ul>\n<p><em>cookie</em></p>\n<p>会话跟踪技术,从一次会话开始到结束（浏览器的关闭），会全程跟踪记录客户端的状态，记录相关信息</p>\n<ul>\n<li>可设置过期时间</li>\n<li>最大可存储4KB</li>\n<li>每一个域名下最多可存储50条数据</li>\n</ul>\n<blockquote>\n<p>只能存储字符串</p>\n</blockquote>\n<ul>\n<li>cookie的语法</li>\n</ul>\n<p>name 键；value 值，都可自定义<br><code>name=value;expires=date;path=path;domain=url;secure，其中name=value必选，剩余的可选</code></p>\n<ol>\n<li>expires:过期时间，填写日期对象。系统会自动清理过期的cookie</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">funciton afterOffDate(n)&#123;</span><br><span class=\"line\">var d=new Date();</span><br><span class=\"line\">var day=d.getDate();</span><br><span class=\"line\">d.setDate(n+day);</span><br><span class=\"line\">return d;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">document.cookie=&quot;user=&#x27;xxx&#x27;;expires=&quot;+afterOffDate(7);</span><br></pre></td></tr></table></figure>\n\n<ol start=\"2\">\n<li>path 限制访问路径，如果不设置默认加载当前.html文件的路径；</li>\n<li>domain 限制访问域名，如果不设置默认加载当前文件.html文件的服务器域名</li>\n<li>secure 加入这个字段后只能设置https协议加载cookie；<blockquote>\n<p>火狐浏览器支持本地加载的文件缓存cookie，谷歌只支持服务器加载文件缓存cookie</p>\n</blockquote>\n</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//设置cookie</span><br><span class=\"line\">document.cookie=&#x27;username=xxx&#x27;;</span><br><span class=\"line\">//读取cookie</span><br><span class=\"line\">console.log(document.cookie);</span><br></pre></td></tr></table></figure>\n<ul>\n<li>cookie编解码</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">document.cookie=&quot;name1=&quot;+encodeURIComponent(&quot;小明&quot;);\t//编码写入</span><br><span class=\"line\">console.log(decodeURIComponent(document.cookie);\t//解码读取</span><br></pre></td></tr></table></figure>\n\n\n<p><em>sessionStorage(结合后台使用)</em></p>\n<h4 id=\"HTML5-新特性\"><a href=\"#HTML5-新特性\" class=\"headerlink\" title=\"HTML5 新特性\"></a>HTML5 新特性</h4><ul>\n<li>中括号解析</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var [x,y,z]=[1,&quot;dd&quot;,false];</span><br><span class=\"line\">//相当与</span><br><span class=\"line\">var x=1,y=&quot;dd&quot;,z=fase;</span><br><span class=\"line\">//还可以</span><br><span class=\"line\">var [x,[a,b],y]=[10,[10,&quot;dd&quot;],&quot;a&quot;];</span><br><span class=\"line\">//交换两数方便</span><br><span class=\"line\">var [x,y]=[1,2];</span><br><span class=\"line\">[x,y]=[y,x];</span><br><span class=\"line\">//函数可一次性返回多个数据</span><br><span class=\"line\">function xxx()&#123;</span><br><span class=\"line\">return [&quot;jj&quot;,3,true];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var [a,b,c]=xxx();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>大括号解析</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//不用按循序赋值</span><br><span class=\"line\">var &#123;name,age,sex&#125;=&#123;</span><br><span class=\"line\">sex:&quot;男&quot;,</span><br><span class=\"line\">name:&quot;xiaomi&quot;,</span><br><span class=\"line\">age:11</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>反引号</p>\n<ul>\n<li>可用反引号代替单双引号括起字符串。其中的换行、代码缩进都会保留。</li>\n<li>拼接字符串时可用<code>$&#123;变量/表达式/函数&#125;</code>代替<code>+&#39;&#39;+</code></li>\n</ul>\n</li>\n<li><p>Array.from()</p>\n</li>\n</ul>\n<p>将伪数组转换为真数组</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var aLid=document.getElementById(&quot;li1&quot;);</span><br><span class=\"line\">aLis=Array.from(aLis);</span><br><span class=\"line\">aLis.push(&quot;test&quot;);</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>Set();集合</li>\n</ul>\n<p>特点：</p>\n<ol>\n<li>不重复</li>\n<li>无序</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let imgs= new Set();</span><br><span class=\"line\">//添加元素</span><br><span class=\"line\">imgs.add(100);</span><br><span class=\"line\">imgs.add(100);</span><br><span class=\"line\">imgs.add(&quot;ddd&quot;);</span><br><span class=\"line\">imgs.add(new String(&quot;ddd&quot;));</span><br><span class=\"line\">console.log(imgs);</span><br></pre></td></tr></table></figure>\n\n<p>遍历集合<code>for....of</code></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(let item of imgs.keys())&#123;\t//遍历键</span><br><span class=\"line\">console.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let item of imgs.values())&#123;\t\t//只遍历值</span><br><span class=\"line\">console.log(item);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">for(let item of imgs.entries())&#123;   \t//遍历键与值</span><br><span class=\"line\">console.log(item);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>数组与集合互转</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//数组变集合</span><br><span class=\"line\">var set=new Set([3,2,4,5,6,1,3,4]);</span><br><span class=\"line\">console.log(set);</span><br><span class=\"line\">//集合变数组，将数据结构展开为数组</span><br><span class=\"line\">var arr = [...set];</span><br><span class=\"line\">console.log(arr);</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>Map();映射</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">let map=new Map();</span><br><span class=\"line\">//添加数据</span><br><span class=\"line\">map.set(&quot;Tom&quot;,&quot;fishman&quot;);</span><br><span class=\"line\">map.set(&quot;Jack&quot;,&quot;woker&quot;);</span><br><span class=\"line\">map.set(&quot;Sim&quot;,&quot;teacher&quot;);</span><br><span class=\"line\">map.set(&quot;Jack&quot;,&quot;bussnessman&quot;);</span><br><span class=\"line\">console.log(map);</span><br><span class=\"line\">//取值</span><br><span class=\"line\">console.log(map.get(&quot;Tom&quot;));</span><br><span class=\"line\">//map遍历：for   of</span><br><span class=\"line\">for(let [key,value] of map)&#123;</span><br><span class=\"line\">console.log(key,value);</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>遍历：数组[for循环、for…in、foreach、for…of],对象[for…in]，set[for…of],map[for…pf];</p>\n</blockquote>\n<ul>\n<li>构造函数</li>\n</ul>\n<p>我们某一个函数，使用new运算符去调用</p>\n<ol>\n<li>当前函数中的this指向新创建的对象</li>\n<li>自动完成原料和出厂操作<br>这种通过new调用函数，叫做构造函数(首字母一般大写)，其可构造对象，</li>\n</ol>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function createPerson(name,sex)&#123;</span><br><span class=\"line\">var obj=new Object();\t//原料</span><br><span class=\"line\">//加工</span><br><span class=\"line\">0bj.name=name;</span><br><span class=\"line\">obj.sex=sex;</span><br><span class=\"line\">0bj.showName=function()&#123;</span><br><span class=\"line\">console.log(this.name);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">obj.showSex=functin()&#123;</span><br><span class=\"line\">console.log(this.sex);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return obj;\t//出厂</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var p1=createPerson(&quot;Tom&quot;,&quot;man&quot;);</span><br><span class=\"line\">p1.showName();</span><br><span class=\"line\">p1.showSex();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>prototype 原型对象</li>\n</ul>\n<p>每一个函数上，都一个原型对象prototype</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function show()&#123;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(show.prototype);</span><br></pre></td></tr></table></figure>\n\n\n<p>用在构造函数上，我们可以给构造函数的原型prototype，添加方法</p>\n<ol>\n<li>如果我们将方法添加到构造函数的原型prototype对象上</li>\n<li>构造函数构造出来的对象共享原型上所有的方法</li>\n</ol>\n<p>构造函数构造出来的对象，有一个属性_proto_,指向构造除这个对象的构造函数的原型。</p>\n<p>instanceof关键字，判断某一个对象是否是这个构造函数构造出来的。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">var arr1=[3,32,4,1,45];</span><br><span class=\"line\">var arr2=[4,3,2,1];</span><br><span class=\"line\">Array.prototype.sum=function()&#123;</span><br><span class=\"line\">var res=0;</span><br><span class=\"line\">for(var i=0;i&lt;this.length;i++)&#123;</span><br><span class=\"line\">res+=this[i];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">return res;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">console.log(arr1.sum());</span><br><span class=\"line\">console.log(arr2.sum());</span><br><span class=\"line\">console.log(arr1.sum==arr2.sum);</span><br></pre></td></tr></table></figure>\n\n<p>在子一级构造函数重写方法，只会在子一级生效，并不会影响父一级构造函数的方法。</p>\n<p>继承和多态：<br>继承侧重是从父一级构造函数，继承到属性和方法；<br>多态侧重的是子一级自己重写和新增的属性和方法;</p>\n<h3 id=\"拖拽\"><a href=\"#拖拽\" class=\"headerlink\" title=\"拖拽\"></a>拖拽</h3><ul>\n<li>mousedown </li>\n</ul>\n<p>记录鼠标按下的位置和被拖拽物体相对距离</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//clientX为鼠标位置，offsetLeft为盒子位置</span><br><span class=\"line\">var offsetX=e.clientX-node.offsetLeft;</span><br><span class=\"line\">var offsetY=e.clientY-node.offsetTop;</span><br></pre></td></tr></table></figure>\n\n\n<ul>\n<li>mousemove</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//鼠标移动的距离减去相对距离=盒子移动的距离</span><br><span class=\"line\">node.style.left=e.clientX-offsetX+&#x27;px&#x27;;</span><br><span class=\"line\">node.style.top=e.clientY-offsetY+&#x27;px&#x27;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>mouseup</li>\n</ul>\n<p>取消拖拽</p>\n<p><em>实例：</em></p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//父盒子与子盒子要有定位</span><br><span class=\"line\">window.onload=function()&#123;</span><br><span class=\"line\">var oDiv=document.getElementById(&quot;div1&quot;);</span><br><span class=\"line\">oDiv.onmousedown=function(ev)&#123;</span><br><span class=\"line\">var e=ev||window.event;</span><br><span class=\"line\">var offsetX=e.clientX-oDiv.offsetLeft;</span><br><span class=\"line\">var offsetY=e.clientY-oDiv.offsetTop;</span><br><span class=\"line\"></span><br><span class=\"line\">document.onmousemove=function(ev)&#123;</span><br><span class=\"line\">\tvar e=ev||window.event;</span><br><span class=\"line\">oDiv.style.left=e.clientX-offsetX+&quot;px&quot;;</span><br><span class=\"line\">oDiv.style.top=e.clientY-offsetY+&quot;px&quot;;</span><br><span class=\"line\">&#125;&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">document.onmouseup=function()&#123;</span><br><span class=\"line\">document.onmousemove=null;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<h4 id=\"ECMA6-class语法\"><a href=\"#ECMA6-class语法\" class=\"headerlink\" title=\"ECMA6 class语法\"></a>ECMA6 class语法</h4><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">class preson&#123;</span><br><span class=\"line\">//class属性添加。</span><br><span class=\"line\">constructor(name,sex,age)&#123;</span><br><span class=\"line\">this.name=xxx;</span><br><span class=\"line\">this.sex=sex;</span><br><span class=\"line\">this.age=age;</span><br><span class=\"line\"></span><br><span class=\"line\">showself()&#123;</span><br><span class=\"line\">console.log(`$&#123;this.name&#125;,$&#123;this.age&#125;`);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">var p1=new person(&quot;Tony&quot;,&quot;man&quot;,33);</span><br><span class=\"line\">p1.showself();</span><br><span class=\"line\"></span><br><span class=\"line\">//extends继承</span><br><span class=\"line\">class worker extends person&#123;</span><br><span class=\"line\">constructor(name,sex,age,job)&#123;</span><br><span class=\"line\">//继承到父一级的属性</span><br><span class=\"line\">super(name,sex,age);</span><br><span class=\"line\">this.job=job;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br></pre></td></tr></table></figure>\n\n\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">function person(name,sex,age)&#123;</span><br><span class=\"line\">this.name=name;</span><br><span class=\"line\">this.sex=sex;</span><br><span class=\"line\">this.age=age;</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">person.prototype.showself=function()&#123;</span><br><span class=\"line\">console.log(this.name,this.age);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">function woker(name,sex,age,job)&#123;</span><br><span class=\"line\">//1.构造函数的伪装，继承父级的属性</span><br><span class=\"line\">Person.call(this,name,sex,age);</span><br><span class=\"line\">this.job=job;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//2.原型链  继承父一级的方法</span><br><span class=\"line\">//&lt;1&gt;通过for ...in 遍历继承</span><br><span class=\"line\">for (var funcName in person.prototype)&#123;</span><br><span class=\"line\">worker.prototype[funcName]=person.prototype[funcName];</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">//&lt;2&gt;Object.create()</span><br><span class=\"line\">worker.prototype=Object.create(person.prototype);</span><br><span class=\"line\">//&lt;3&gt;调用构造函数继承</span><br><span class=\"line\">worker.prototype=new person();</span><br><span class=\"line\"></span><br><span class=\"line\">worker.prototype.showjob=function()&#123;</span><br><span class=\"line\">console.log(this.job);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">var w1=new worker(&quot;Tom&quot;,&quot;man&quot;,22,&quot;driver&quot;);</span><br></pre></td></tr></table></figure>\n\n\n\n","categories":[],"tags":[]},{"title":"vim插件管理Vundle安装","url":"http://www.baidu.com/2020/02/22/markdown_preview/","content":"<h2 id=\"安装Vundle插件管理器\"><a href=\"#安装Vundle插件管理器\" class=\"headerlink\" title=\"安装Vundle插件管理器\"></a>安装Vundle插件管理器</h2><p>github搜索Vundle，直接克隆</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/.vim/bundle</span><br><span class=\"line\">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure>\n<h2 id=\"编辑-vimrc配置文件\"><a href=\"#编辑-vimrc配置文件\" class=\"headerlink\" title=\"编辑.vimrc配置文件\"></a>编辑.vimrc配置文件</h2><p>若没有则创建<br>在.vimrc中输入</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">set nocompatible   &quot;去除vi一致性</span><br><span class=\"line\">filetype off </span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;Vundle插件位置</span><br><span class=\"line\">set rtp+=~/.vim/bundle/Vundle.vim</span><br><span class=\"line\">&quot;&quot;初始化</span><br><span class=\"line\">call vundle#begin()</span><br><span class=\"line\"></span><br><span class=\"line\">Plugin &#x27;VundleVim/Vundle.vim&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;</span><br><span class=\"line\">&quot;其他插件安装位置&quot;</span><br><span class=\"line\">&quot;格式：Plugin &#x27;用户名/插件仓库名&#x27;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&#x27;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;&quot;</span><br><span class=\"line\">call vundle#end()</span><br><span class=\"line\">filetype plugin indent on &quot;加载vim自带的与插件的语法脚本等</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h2><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">:pluginInstall  //安装插件</span><br><span class=\"line\">:PluginClean  \t//删除插件</span><br><span class=\"line\">:PluginUpdate   //更新</span><br><span class=\"line\">:PluginSearch   //搜索</span><br></pre></td></tr></table></figure>\n","categories":["linux"],"tags":[]},{"title":"linux常用命令","url":"http://www.baidu.com/2020/01/11/linux_use/","content":"<h3 id=\"小技巧\"><a href=\"#小技巧\" class=\"headerlink\" title=\"小技巧\"></a>小技巧</h3><ol>\n<li>Tab键：一下补全，两下提示</li>\n<li>简写：<br>若仅输入<code>alias</code>，则可列出目前所有的别名设置。alias的效力仅及于该次登入的操作。若要每次登入是即自动设好别名，可在.profile或.cshrc中设定指令的别名。</li>\n</ol>\n<p><code>alias 别名=指令名称</code><br>如<code>alias ll=ls -l</code> </p>\n<ol start=\"3\">\n<li>强制关闭程序：<code>kill -9 进程pid</code></li>\n<li>修改hosts：<code>sudo vim /etc/hosts</code></li>\n<li>退出用户：<code>tty -&gt; w -&gt; sudo pkill -9 tty1</code> <h2 id=\"apt\"><a href=\"#apt\" class=\"headerlink\" title=\"apt\"></a>apt</h2></li>\n</ol>\n<p><code>  apt [options] [command] [package ...]</code></p>\n<blockquote>\n<p>options：可选，选项包括 -h（帮助），-y（当安装过程提示选择全部为”yes”），-q（不显示安装的过程）等等。<br>command：要进行的操作。<br>package：安装的包名。</p>\n</blockquote>\n<p>常用命令:<br>列出所有可更新的软件清单命令：<code>sudo apt update</code></p>\n<p>升级软件包：<code>sudo apt upgrade</code></p>\n<p>列出可更新的软件包及版本信息：<code>apt list --upgradeable</code></p>\n<p>升级软件包，升级前先删除需要更新软件包：<code>sudo apt full-upgrade</code></p>\n<p>安装指定的软件命令：<code>sudo apt install &lt;package_name&gt;</code></p>\n<p>更新指定的软件命令：<code>sudo apt update &lt;package_name&gt;</code></p>\n<p>显示软件包具体信息,例如：版本号，安装大小，依赖关系等等：<code>sudo apt show &lt;package_name&gt;</code></p>\n<p>删除软件包命令：<code>sudo apt remove &lt;package_name&gt;</code></p>\n<p>清理不再使用的依赖和库文件:<code> sudo apt autoremove</code></p>\n<p>移除软件包及配置文件:<code> sudo apt purge &lt;package_name&gt;</code></p>\n<p>查找软件包命令： <code>sudo apt search &lt;keyword&gt;</code></p>\n<p>列出所有已安装的包：<code>apt list --installed</code></p>\n<p>列出所有已安装的包的版本信息：<code>apt list --all-versions</code></p>\n<h3 id=\"linux-chmod命令\"><a href=\"#linux-chmod命令\" class=\"headerlink\" title=\"linux chmod命令\"></a>linux chmod命令</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">u 表示该文件的拥有者，g 表示与该文件的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示这三者皆是。</span><br><span class=\"line\">+ 表示增加权限、- 表示取消权限、= 表示唯一设定权限。</span><br><span class=\"line\">r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该文件是个子目录或者该文件已经被设定过为可执行。</span><br></pre></td></tr></table></figure>\n\n<p>chmod命令可以使用八进制数来指定权限。文件或目录的权限位是由9个权限位来控制，每三位为一组。例如， 765 将这样解释：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">所有者的权限用数字表达：属主的那三个权限位的数字加起来的总和。如 rwx ，也就是 4+2+1 ，应该是 7。</span><br><span class=\"line\">用户组的权限用数字表达：属组的那个权限位数字的相加的总和。如 rw- ，也就是 4+2+0 ，应该是 6。</span><br><span class=\"line\">其它用户的权限数字表达：其它用户权限位的数字相加的总和。如 r-x ，也就是 4+0+1 ，应该是 5。</span><br></pre></td></tr></table></figure>\n<h3 id=\"find命令\"><a href=\"#find命令\" class=\"headerlink\" title=\"find命令\"></a>find命令</h3><p>Linux find 命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则 find 命令将在当前目录下查找子目录与文件。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">find   path   -option   [   -print ]   [ -exec   -ok   command ]   &#123;&#125; \\;</span><br><span class=\"line\"></span><br><span class=\"line\">-type c : 文件类型是 c 的文件。</span><br><span class=\"line\"> -name &quot;*.c&quot;</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"ln-命令\"><a href=\"#ln-命令\" class=\"headerlink\" title=\"ln 命令\"></a>ln 命令</h3><p>Linux ln（英文全拼：link files）命令是一个非常重要命令，它的功能是为某一个文件在另外一个位置建立一个同步的链接。</p>\n<p>当我们需要在不同的目录，用到相同的文件时，我们不需要在每一个需要的目录下都放一个必须相同的文件，我们只要在某个固定的目录，放上该文件，然后在 其它的目录下用ln命令链接（link）它就可以，不必重复的占用磁盘空间<br><code> ln [参数][源文件或目录][目标文件或目录]</code></p>\n<blockquote>\n<p>必要参数：<br>-b 删除，覆盖以前建立的链接<br>-d 允许超级用户制作目录的硬链接<br>-f 强制执行<br>-i 交互模式，文件存在则提示用户是否覆盖<br>-n 把符号链接视为一般目录<br>-s 软链接(符号链接)<br>-v 显示详细的处理过程</p>\n</blockquote>\n<h3 id=\"mv-命令\"><a href=\"#mv-命令\" class=\"headerlink\" title=\"mv 命令\"></a>mv 命令</h3><p>Linux mv（英文全拼：move file）命令用来为文件或目录改名、或将文件或目录移入其它位置。</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mv source_directory(目录) dest_directory(目录)\t</span><br><span class=\"line\">//目录名 dest_directory 已存在，将 source_directory 移动到目录名 dest_directory 中；目录名 dest_directory 不存在则 source_directory 改名为目录名 dest_directory</span><br></pre></td></tr></table></figure>\n<blockquote>\n<p>参数说明：<br>-b: 当目标文件或目录存在时，在执行覆盖前，会为其创建一个备份。<br>-i: 如果指定移动的源目录或文件与目标的目录或文件同名，则会先询问是否覆盖旧文件，输入 y 表示直接覆盖，输入 n 表示取消该操作。<br>-f: 如果指定移动的源目录或文件与目标的目录或文件同名，不会询问，直接覆盖旧文件。<br>-n: 不要覆盖任何已存在的文件或目录。<br>-u：当源文件比目标文件新或者目标文件不存在时，才执行移动操作。</p>\n</blockquote>\n<h3 id=\"rm-命令\"><a href=\"#rm-命令\" class=\"headerlink\" title=\"rm 命令\"></a>rm 命令</h3><blockquote>\n<p>参数：<br>-i 删除前逐一询问确认。<br>-f 即使原档案属性设为唯读，亦直接删除，无需逐一确认。<br>-r 将目录及以下之档案亦逐一删除。</p>\n</blockquote>\n<h3 id=\"cp-命令\"><a href=\"#cp-命令\" class=\"headerlink\" title=\"cp 命令\"></a>cp 命令</h3><blockquote>\n<p>参数说明：<br>-a：此选项通常在复制目录时使用，它保留链接、文件属性，并复制目录下的所有内容。其作用等于dpR参数组合。<br>-d：复制时保留链接。这里所说的链接相当于Windows系统中的快捷方式。<br>-f：覆盖已经存在的目标文件而不给出提示。<br>-i：与-f选项相反，在覆盖目标文件之前给出提示，要求用户确认是否覆盖，回答”y”时目标文件将被覆盖。<br>-p：除复制文件的内容外，还把修改时间和访问权限也复制到新文件中。<br>-r：若给出的源文件是一个目录文件，此时将复制该目录下所有的子目录和文件。<br>-l：不复制文件，只是生成链接文件。</p>\n</blockquote>\n<h3 id=\"which命令\"><a href=\"#which命令\" class=\"headerlink\" title=\"which命令\"></a>which命令</h3><p>Linux which命令用于查找文件。</p>\n<p>which指令会在环境变量$PATH设置的目录里查找符合条件的文件。</p>\n<h3 id=\"touch命令\"><a href=\"#touch命令\" class=\"headerlink\" title=\"touch命令\"></a>touch命令</h3><p>Linux touch命令用于修改文件或者目录的时间属性，包括存取时间和更改时间。若文件不存在，系统会建立一个新的文件。</p>\n<blockquote>\n<p>参数说明：<br>a 改变档案的读取时间记录。<br>m 改变档案的修改时间记录。<br>c 假如目的档案不存在，不会建立新的档案。与 –no-create 的效果一样。<br>f 不使用，是为了与其他 unix 系统的相容性而保留。<br>r 使用参考档的时间记录，与 –file 的效果一样。<br>d 设定时间与日期，可以使用各种不同的格式。<br>t 设定档案的时间记录，格式与 date 指令相同。<br>–no-create 不会建立新档案。<br>–help 列出指令格式。<br>–version 列出版本讯息。</p>\n</blockquote>\n<h3 id=\"mount命令\"><a href=\"#mount命令\" class=\"headerlink\" title=\"mount命令\"></a>mount命令</h3><p>Linux mount命令是经常会使用到的命令，它用于挂载Linux系统外的文件。</p>\n<blockquote>\n<p>参数说明：<br>-V：显示程序版本<br>-h：显示辅助讯息<br>-v：显示较讯息，通常和 -f 用来除错。<br>-a：将 /etc/fstab 中定义的所有档案系统挂上。<br>-F：这个命令通常和 -a 一起使用，它会为每一个 mount 的动作产生一个行程负责执行。在系统需要挂上大量 NFS 档案系统时可以加快挂上的动作。<br>-f：通常用在除错的用途。它会使 mount 并不执行实际挂上的动作，而是模拟整个挂上的过程。通常会和 -v 一起使用。<br>-o remount：将一个已经挂下的档案系统重新用不同的方式挂上。例如原先是唯读的系统，现在用可读写的模式重新挂上。<br>-o ro：用唯读模式挂上。<br>-o rw：用可读写模式挂上。<br>-o loop=：使用 loop 模式用来将一个档案当成硬盘分割挂上系统。<br>-t：指定档案系统的型态，通常不必指定。mount 会自动选择正确的型态。<br>-o async：打开非同步模式，所有的档案读写动作都会用非同步模式执行。<br>-o sync：在同步模式下执行。<br>-o atime、-o noatime：当 atime 打开时，系统会在每次读取档案时更新档案的『上一次调用时间』。当我们使用 flash 档案系统时可能会选项把这个选项关闭以减少写入的次数。</p>\n</blockquote>\n<p>将 /tmp/image.iso 这个光碟的 image 档使用 loop 模式挂在 /mnt/cdrom之下。用这种方法可以将一般网络上可以找到的 Linux 光 碟 ISO 档在不烧录成光碟的情况下检视其内容。<br><code>#mount -o loop /tmp/image.iso /mnt/cdrom</code></p>\n<h3 id=\"df-命令\"><a href=\"#df-命令\" class=\"headerlink\" title=\"df 命令\"></a>df 命令</h3><p>Linux df（英文全拼：disk free） 命令用于显示目前在 Linux 系统上的文件系统磁盘使用情况统计。</p>\n<h3 id=\"mkdir-命令\"><a href=\"#mkdir-命令\" class=\"headerlink\" title=\"mkdir 命令\"></a>mkdir 命令</h3><p>Linux mkdir（英文全拼：make directory）命令用于创建目录。</p>\n<blockquote>\n<p>参数说明：<br>-p 确保目录名称存在，不存在的就建一个。</p>\n</blockquote>\n<h3 id=\"logout命令\"><a href=\"#logout命令\" class=\"headerlink\" title=\"logout命令\"></a>logout命令</h3><p>Linux logout命令用于退出系统。</p>\n<h3 id=\"passwd命令\"><a href=\"#passwd命令\" class=\"headerlink\" title=\"passwd命令\"></a>passwd命令</h3><p><code>passwd [-k] [-l] [-u [-f]] [-d] [-S] [username]</code></p>\n<blockquote>\n<p>必要参数：<br>-d 删除密码<br>-f 强迫用户下次登录时必须修改口令<br>-w 口令要到期提前警告的天数<br>-k 更新只能发送在过期之后<br>-l 停止账号使用<br>-S 显示密码信息<br>-u 启用已被停止的账户<br>-x 指定口令最长存活期<br>-g 修改群组密码<br>指定口令最短存活期<br>-i 口令过期后多少天停用账户</p>\n</blockquote>\n<h3 id=\"Linux系统用户账号的管理\"><a href=\"#Linux系统用户账号的管理\" class=\"headerlink\" title=\"Linux系统用户账号的管理\"></a>Linux系统用户账号的管理</h3><p>添加新的用户账号使用useradd命令，其语法如下：<br><code>useradd 选项 用户名</code></p>\n<p>删除帐号:<br><code>userdel 选项 用户名    //常用的选项是 -r，它的作用是把用户的主目录一起删除。</code></p>\n","categories":["linux"],"tags":[]},{"title":"C","url":"http://www.baidu.com/2020/01/02/c/","content":"<hr>\n<hr>\n<h1 id=\"C语言\"><a href=\"#C语言\" class=\"headerlink\" title=\"C语言\"></a>C语言</h1><h2 id=\"一-数据类型\"><a href=\"#一-数据类型\" class=\"headerlink\" title=\"一.数据类型\"></a>一.数据类型</h2><h3 id=\"常量\"><a href=\"#常量\" class=\"headerlink\" title=\"常量\"></a>常量</h3><ul>\n<li>符号常量  </li>\n</ul>\n<p>（预处理命令以#开头)<br>宏定义：<code>#define 标识符 常量    //行末不需要加&quot;;&quot;</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#define p1 char*\t//只是简单替换</span><br><span class=\"line\">typedef char* p2;\t//对类型说明符重新命名</span><br><span class=\"line\">p1 i,j;\t//等价于char *i,j;</span><br><span class=\"line\">p2 i,j; //等价于char *i,*j;  </span><br></pre></td></tr></table></figure>\n\n<blockquote>\n<p>符号常量的标识符通常用大写，变量标识符用小写<br>符号常量与变量不同，其值在作用域内不能改变和赋值  </p>\n</blockquote>\n<p>带参宏定义：<code>#define M(y) y*y+1 //宏名与形参之间不能有空格，如：#defind MAX (a,b) a+b</code><br>调用： <code>k=M(30);</code></p>\n<p>条件编译：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#ifdef 标示符   //如果宏定义了标示符则执行。。。。</span><br><span class=\"line\">程序段1</span><br><span class=\"line\">#else</span><br><span class=\"line\">程序段2</span><br><span class=\"line\">#endif</span><br><span class=\"line\">----------------</span><br><span class=\"line\">#ifndef 标示符\t//如果没有定义标示符则执行.....</span><br><span class=\"line\">程序段1</span><br><span class=\"line\">#else</span><br><span class=\"line\">程序段2</span><br><span class=\"line\">#endif</span><br><span class=\"line\">------------------------------</span><br><span class=\"line\">#if 常量表达式</span><br><span class=\"line\">程序段1</span><br><span class=\"line\">#else</span><br><span class=\"line\">程序段2</span><br><span class=\"line\">#endif</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>整型常量<br>（程序中是根据前缀来区别各种进制数的）</li>\n</ul>\n<ol>\n<li>八进制整型常数：必须0开头<br>如：015（十进制13）、0177777(十进制65535）  </li>\n<li>十六进制：前缀为0X或0x<br>如：0X2A（十进制42）、OXFFFF（十进制65535）  </li>\n<li>十进制： 无前缀  </li>\n</ol>\n<p><strong>在十六位字长的机器上(short)，整型长度为16位，所以数的范围是有限的。十进制无符号整型常数的范围为0-65535（2^16）；有符号整型常数为-32768~+32767</strong></p>\n<ul>\n<li>实型常量<br>标准C允许浮点数使用“f或F”作后缀，如：32f等价于32.</li>\n</ul>\n<ol>\n<li><p>十进制数：必须有小数点<br>如：<code>0.0</code>、<code>300.</code>、<code>25.0</code>、<code>-2.30</code></p>\n</li>\n<li><p>指数形式：十进制数+阶码“e、E”组成<br>如：2.1E5=2.1*(10^5)  </p>\n</li>\n</ol>\n<blockquote>\n<p><strong>不合法的实数：</strong><br>无小数点或阶码标志：32<br>阶码标志前无数字：E6<br>负号位置不对：3.-E3<br>无阶码：2.3E  </p>\n</blockquote>\n<p>实数数据在内存中的存放形式：<br>(一般占4个字节)<br><code>符号(1位)+小数部分(7位)+指数部分(24位)</code></p>\n<ul>\n<li>字符常量</li>\n</ul>\n<p>只能用单引号括起来的一个字符，不能参与运算<br>转义字符“\\”  </p>\n<blockquote>\n<p>\\n:回车换行<br>\\t:横向调到下一制表符<br>\\b:退格<br>\\r:回车<br>\\f:换页  </p>\n</blockquote>\n<p>ASCII表：  </p>\n<blockquote>\n<p>大写字母:65-90<br>小写字母：97-122</p>\n</blockquote>\n<ul>\n<li><p>字符串常量<br>（双引号括起来）<br>不能把字符串常量赋给字符变量：可以char a=’a’而不能char a=”a”;<br>字符串常量所占内存为字符数加1，增加一个字节用于存放字符串结尾标志“\\o”</p>\n<h3 id=\"变量\"><a href=\"#变量\" class=\"headerlink\" title=\"变量\"></a>变量</h3></li>\n<li><p>整型常量  </p>\n<blockquote>\n<p>内存中以2进制储存<br>数值以补码表示的：  </p>\n</blockquote>\n<ul>\n<li>正数的补码与原码相同</li>\n<li>负数的补码：取反再加1  </li>\n</ul>\n</li>\n</ul>\n<p><strong>整型变量分类</strong><br>整型变量所占字节与系统和编译器有关  </p>\n<blockquote>\n<ol>\n<li>基本型： int 4字节<br>unsigned int(无符号) 4字节  </li>\n<li> 长整型： long 8字节</li>\n<li> 短整型： short 2 字节  </li>\n</ol>\n</blockquote>\n<ul>\n<li>实型变量</li>\n</ul>\n<p>单精度：float  4字节<br>双精度： double 8字节<br>长双精度： long double  </p>\n<blockquote>\n<p>double b;<br>b=1.0/3*3=1.000000<br>b=1/3*3=0.000000<br>b=3/2=1.000000  </p>\n</blockquote>\n<ul>\n<li><p>数据类型转换  </p>\n<ol>\n<li><p>自动转换<br>转换按数据长度增加的方向进行  </p>\n</li>\n<li><p>强制类型转换：</p>\n</li>\n</ol>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">(float)a  //把a转换为实型  </span><br><span class=\"line\">(int)(x+Y) /把x+y的结果转换为整型</span><br></pre></td></tr></table></figure>\n\n\n\n\n<h3 id=\"算术运算\"><a href=\"#算术运算\" class=\"headerlink\" title=\"算术运算\"></a>算术运算</h3><blockquote>\n<ol>\n<li>除法运算符“/”：双目运算具有左结合性，若参与运算量均为整型则结果为整型，舍去小数；若有一个为实型，则结果为双精度实型。  </li>\n<li>求模运算符“%”:求余数  </li>\n<li>自增、自减运算符：i++先参与运算再减1  </li>\n<li>赋值运算符：<code>a+=5为a=a+5、x*=y+3为x=a*(y+3)</code> <code>x=y=z: x=(y=z)</code></li>\n<li>逗号运算符：将多个表达式链接起来，并把最后一个作为整个逗号表达式的值,如<code>y=(e+4),(s+3),(d+s)等价于y=d+s</code></li>\n<li>逻辑运算符：&amp;&amp;、||、！结果为真或假</li>\n<li>关系运算符： &lt; == &lt;= != 结果为真或假，优先级被逻辑运算高  </li>\n<li>条件运算符：”？”和” ：”<br><code>表达式1 ? 表达式2 ： 表达式3  //若表达式1的值为真，则以表达式2的值作为条件表达式的值。若表达式1为假则执行表达式3</code></li>\n</ol>\n</blockquote>\n<h2 id=\"语句\"><a href=\"#语句\" class=\"headerlink\" title=\"语句\"></a>语句</h2><p>错误语句：<br>if((x=y+2;)&gt;0)z=j;应为if((x=y+2)&gt;0)z=j;  </p>\n<ul>\n<li>putchar(字符输出函数）  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">putchar(&#x27;a&#x27;);  //输出字母a  </span><br><span class=\"line\">putchar(a);\t//输出变量a的值  </span><br><span class=\"line\">putchar(&#x27;\\n&#x27;);\t//回车  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>getchar(键盘输入函数）  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char c;  </span><br><span class=\"line\">c=getchar();</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>printf(格式输出函数）  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">printf(&quot;格式控制字符串&quot;,输出列表);  </span><br><span class=\"line\">%d--十进制整型输出  </span><br><span class=\"line\">%u--十进制无符号整数</span><br><span class=\"line\">%ld--十进制长整型</span><br><span class=\"line\">%f--小数形式</span><br><span class=\"line\">%c--字符型  </span><br><span class=\"line\">%s-- 字符串</span><br><span class=\"line\">%e,E--指数形式</span><br><span class=\"line\">%o--八进制无符号</span><br><span class=\"line\">%x,X--十六进制无符号</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>scanf(格式化输入函数)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">scanf(&quot;格式控制字符&quot;,地址表列);\t\t//地址是由地址运算符“&amp;”后缀变量名组成的</span><br><span class=\"line\">&amp;a表示变量a的地址</span><br><span class=\"line\">输入多个数据时可用空格、tab、回车作间隔，c编译时碰到这些即认为数据结束</span><br><span class=\"line\">若格式控制串中无非格式字符，则所有输入有效</span><br><span class=\"line\">scanf(&quot;%c%c%c&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\">若在格式控制串中加入空格作为间隔，则输入数据间可加入空格</span><br><span class=\"line\">scanf(&quot;%c %c %c&quot;,&amp;a,&amp;b,&amp;c);</span><br><span class=\"line\"></span><br><span class=\"line\">scanf(&quot;%5.2f&quot;,&amp;a);错误语法，scanf无精度控制</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>if语句  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">if(**)&#123;xxxxx&#125;</span><br><span class=\"line\">else if (**) &#123;xxxxxxxxx&#125;</span><br><span class=\"line\">else if (**) &#123;xxxxxxxxx&#125;</span><br><span class=\"line\">else&#123;xxxxxxxxx&#125;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>switch语句</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">switch(a)&#123;</span><br><span class=\"line\">case 常量表达式： 语句;</span><br><span class=\"line\">\t语句;</span><br><span class=\"line\">\t语句;</span><br><span class=\"line\">break;</span><br><span class=\"line\">case 常量表达式： 语句;</span><br><span class=\"line\">break;</span><br><span class=\"line\">default: 语句;</span><br><span class=\"line\">&#125;  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>goto 语句   </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">goto 标识符;  </span><br><span class=\"line\">--------------</span><br><span class=\"line\">loop: if(**)</span><br><span class=\"line\">&#123;  </span><br><span class=\"line\">xxxx   </span><br><span class=\"line\">xxx</span><br><span class=\"line\">goto loop;</span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>do-while语句   </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">do   </span><br><span class=\"line\">//先循环再判断</span><br><span class=\"line\">while(**);  </span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>for语句   </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for(表达式1;表达式2;表达式3)&#123;</span><br><span class=\"line\"></span><br><span class=\"line\">//表达式1，2，3都可以省略，但“:”不能缺少</span><br><span class=\"line\">//省略表达式2会进入死循环</span><br><span class=\"line\"></span><br><span class=\"line\">&#125;   </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h3><ul>\n<li><p>一位数组<br>例如： <code>int a[10];</code><br>c语言不允许对数组的大小作动态定义<br>数组的下表从0开始。</p>\n<ul>\n<li>引用：数组名[下标]，如：a[5]=a[1++]  </li>\n<li>赋值:<code> int a[10]=&#123;1,1,2,3&#125;;</code><br>  <code>int a[]=&#123;1,2,3,4&#125;;</code></li>\n</ul>\n</li>\n<li><p>二位数组  </p>\n</li>\n</ul>\n<p>如定义为3x4(3行4列）： <code>int a[3][4];</code> <code>int a[][4]=&#123;2,2,2,3,4,4..&#125; //可以省略行</code><br>初始化：<code>int a[3][4]=&#123;&#123;2,3&#125;,&#123;2.2.2.2&#125;,&#123;3&#125;&#125;;</code>或<code>int a[3][4]=&#123;1,2,3,4,5,6,7,8,9,...&#125;</code></p>\n<h3 id=\"函数\"><a href=\"#函数\" class=\"headerlink\" title=\"函数\"></a>函数</h3><p>mian中声明函数:<code>void xxxxx();</code>  </p>\n<p>(如果被调用的函数在主函数之前则可以不用定义）<br>定义函数：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">无参函数：void xxxx()&#123; .....  &#125;;  </span><br><span class=\"line\">有参函数：int xxxx(int x,int y))&#123; .....&#125;  </span><br></pre></td></tr></table></figure>\n\n<p>不同函数间传递数据：<br>1.形式参数与实际参数<br>2.return 语句返回计算值<br>3.全局变量  </p>\n<p>递归调用：直接或间接地调用本身，递归必须有一个退出条件</p>\n<p>数组函数作函数参数：<br>1.数组元素作函数实参：<code>xxxx(a[3]);</code><br>2.数组名作函数参数:实参和形参应一致,数组名作参数传递时传递的是地址   </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">main()&#123;</span><br><span class=\"line\">void test(int b[10]);\t//可不用定义数组大小</span><br><span class=\"line\">int a[10]=&#123;0&#125;;</span><br><span class=\"line\">test(a);</span><br><span class=\"line\">return 0;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">void test(int b[])&#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>全局变量：函数外部定义的，有效范围从定义变量开始，到本源文件结束。使用全局变量在程序运行过程中都占用着储存单元。<br>局部变量：一个函数内部定义的变量，只在本函数内有效.在复合语句中定义的变量只在复合语句中有效，如for语句,if语句。  </p>\n<ul>\n<li>static声明局部变量：<br>函数调用结束后局部变量不消失保留原值，在程序运行的期间占用储存单元不释放。  </li>\n<li>register变量：将局部变量放到cpu的寄存器中，调用时而不用从内存中  取</li>\n<li>extern声明外部变量：即全局变量,在另一个文件中声明外部变量即可调用<code>extern A;</code> ,不让其他文件引用可在定义全局变量时加<code>static</code> 。定义内部函数不给外部引用也可以加<code>static</code>  </li>\n</ul>\n<h3 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h3><p>指针是个特殊的变量，其存放着地址：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int *P;</span><br><span class=\"line\">p=&amp;i; </span><br><span class=\"line\">printf(&quot;%d\\n&quot;,*p);</span><br><span class=\"line\"></span><br><span class=\"line\">*:取值操作符</span><br><span class=\"line\">&amp;：取址操作符</span><br><span class=\"line\">结合性自右向左：&amp;*p=&amp;i *&amp;i=i</span><br></pre></td></tr></table></figure>\n\n<p>定义指针变量必须指定基类型，指针变量只能存放地址。<br>引用数组元素：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[10];</span><br><span class=\"line\">itn *p;</span><br><span class=\"line\">p=&amp;a[0];</span><br><span class=\"line\">p=a;\t//数组名为数组第一个元素的地址</span><br><span class=\"line\">printf(&quot;%d\\n&quot;,*(p+1));</span><br></pre></td></tr></table></figure>\n\n<p>二维数组：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3][4];</span><br><span class=\"line\">int *(p)[4];</span><br><span class=\"line\">p=a;</span><br><span class=\"line\">a[1]+2=a[1][2] </span><br><span class=\"line\">*(*(a+1)+2)=a[1][2]</span><br></pre></td></tr></table></figure>\n\n<p>字符串：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">char *a=&quot;what the fuck&quot;;</span><br><span class=\"line\">等价于</span><br><span class=\"line\">char *a;</span><br><span class=\"line\">a=&quot;what the fuck&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">可用下标引用指针变量所指的字符串</span><br><span class=\"line\">printf(&quot;%c\\n&quot;,a[1]);</span><br><span class=\"line\">---------</span><br><span class=\"line\">char str[20]=&#123;what are you doning&quot;;</span><br><span class=\"line\">不等价于</span><br><span class=\"line\">char srt[20];</span><br><span class=\"line\">srt[]=&quot;what are you doing&quot;;或</span><br><span class=\"line\">srt=&quot;what are you doing &quot;;</span><br><span class=\"line\">只能scanf(&quot;%s&quot;,str);</span><br></pre></td></tr></table></figure>\n\n<p>函数：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int max(int ,int);</span><br><span class=\"line\">int a,c,d;</span><br><span class=\"line\">int (*p)();</span><br><span class=\"line\">p=max;</span><br><span class=\"line\">a=(*p)(c,d);</span><br></pre></td></tr></table></figure>\n\n<p>指针数组：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">int a[3]=&#123;1.2.3.4&#125;;</span><br><span class=\"line\">int *name[3]=&#123;&amp;a[0],&amp;a[2],&amp;a[3],&amp;a[1];</span><br><span class=\"line\">printf(&quot;%d &quot;,*name[1]);</span><br></pre></td></tr></table></figure>\n\n<p>总结：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">===================</span><br><span class=\"line\">int a[n];</span><br><span class=\"line\">int *p[n];\t//指针数组,包含n个指针元素</span><br><span class=\"line\">int (*p)[n];\t//p为指向n个元素的一位数组的指针变量</span><br><span class=\"line\">int f();</span><br><span class=\"line\">int *p();\t//p为带回一个指针的函数，该指针只想整形数据</span><br><span class=\"line\">int (*p)();\t//p为指向函数的指针，该函数返回一个整型值1</span><br><span class=\"line\">const int *p \t//常量指针不可被修改</span><br><span class=\"line\">void *P\t\t//可转换为其他类型</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"结构体与共用体\"><a href=\"#结构体与共用体\" class=\"headerlink\" title=\"结构体与共用体\"></a>结构体与共用体</h2><ul>\n<li>定义一个结构体：  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct 结构名(也是可选标记名)</span><br><span class=\"line\"></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">成语列表</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"> </span><br><span class=\"line\">//直接创建结构体变量时可省略结构体名，但这样只能用一次</span><br><span class=\"line\">struct &#123;</span><br><span class=\"line\">char title[20];</span><br><span class=\"line\">int num;</span><br><span class=\"line\">&#125;book;</span><br><span class=\"line\"></span><br><span class=\"line\">//或者用typedef重新命名时，可省略结构体名</span><br><span class=\"line\">typedef struct&#123;</span><br><span class=\"line\">char title[20];</span><br><span class=\"line\">int num;</span><br><span class=\"line\">&#125;book;</span><br><span class=\"line\"></span><br><span class=\"line\">book book1,book2,book3;</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">//定义结构体变量：</span><br><span class=\"line\">struct student student1,student2;</span><br><span class=\"line\">或着</span><br><span class=\"line\">struct student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">成员列表</span><br><span class=\"line\">&#125; student1,student2;</span><br><span class=\"line\"></span><br><span class=\"line\">-------------------</span><br><span class=\"line\">结构体变量的引用：  </span><br><span class=\"line\">结构体变量名.成员名 \t</span><br><span class=\"line\">如：student1.num=100</span><br><span class=\"line\">结构体之间可以复制：student1=student2;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体初始化：<br>(与数组初始化类似，用逗号分隔，但使用的花括号括起来)</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">struct student</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">成员列表</span><br><span class=\"line\">&#125; student1,student2=&#123;002,&quot;mame&quot;,&quot;m&quot;&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">//以下可以不按顺序初始化</span><br><span class=\"line\">struct student student1=&#123;</span><br><span class=\"line\">.num=002,</span><br><span class=\"line\">.name=&quot;xiaoming&quot;,</span><br><span class=\"line\">.gender=&quot;man&quot;</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">///注意以下是不可行的，只有在定义变量的时候直接初始化，之后就不能全体赋值了，只能单个赋值，即student1.name=&quot;name&quot;;</span><br><span class=\"line\">struct student</span><br><span class=\"line\">&#123;成员列表&#125;student1;</span><br><span class=\"line\">student1=&#123;002,&quot;name&quot;,&quot;man&quot;&#125;;</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体数组：  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"> struct person</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">char name[20];</span><br><span class=\"line\">char phone[20];</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">struct person person1[3]=&#123;</span><br><span class=\"line\">&#123;&quot;name&quot;,26,&quot;0&quot;&#125;,</span><br><span class=\"line\">&#123;&quot;name&quot;,28,&quot;1&quot;&#125;,</span><br><span class=\"line\">&#123;&quot;name&quot;,20,&quot;0&quot;&#125;,</span><br><span class=\"line\">&#125;;</span><br><span class=\"line\"></span><br><span class=\"line\">gets(person1[0].name);</span><br><span class=\"line\">....</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>结构体指针：  </li>\n</ul>\n<p>指向该结构体的指针：<code>struct 结构名 *结构指针变量名</code></p>\n<p>访问形式：  <code>(*结构指针变量).成员名</code>或<code>结构指针变量-&gt;成员名</code></p>\n<ul>\n<li>结构体函数：</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">//结构体</span><br><span class=\"line\">struct person &#123;</span><br><span class=\"line\">xxx</span><br><span class=\"line\">&#125;person1;</span><br><span class=\"line\">//函数</span><br><span class=\"line\">void sss(struct person person1)//person1为形参</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">return person1.num1+person1.num2;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">//调用</span><br><span class=\"line\">person1.num1=...;</span><br><span class=\"line\">person1.num2=...;</span><br><span class=\"line\">sss(person1);</span><br></pre></td></tr></table></figure>\n\n<p>动态储存分配：</p>\n<p><code>malloc</code>向系统申请分配指定字节的内存空间</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">void *malloc (unsigned int size);</span><br><span class=\"line\">void *calloc (unsigned int size);</span><br><span class=\"line\">void free(*P);</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"共用体\"><a href=\"#共用体\" class=\"headerlink\" title=\"共用体\"></a>共用体</h3><p>定义：  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">union 共用体名</span><br><span class=\"line\">&#123;</span><br><span class=\"line\">成员列表</span><br><span class=\"line\">&#125;变量列表;</span><br><span class=\"line\"></span><br><span class=\"line\">结构体变量所占内存长度为各成员所占内存之和。共用体所占内存长度等于最长成员所占的内存长度。共用体中的成员，每一瞬时只能存放一种，存放后会覆盖其他成员的值  </span><br></pre></td></tr></table></figure>\n\n<h3 id=\"枚举变量\"><a href=\"#枚举变量\" class=\"headerlink\" title=\"枚举变量\"></a>枚举变量</h3><figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">enum weekday&#123;1,2,3,4,5,6,7&#125;;或</span><br><span class=\"line\">enum weekday a,b,v; 或</span><br><span class=\"line\">enum weekday&#123;1,2,3,4,5,6,7&#125;a,b;</span><br><span class=\"line\">使用：</span><br><span class=\"line\">a=1;</span><br><span class=\"line\">b=3;</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"文件操作\"><a href=\"#文件操作\" class=\"headerlink\" title=\"文件操作\"></a>文件操作</h2><p>文件型指针</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">FILE *p;</span><br><span class=\"line\">p=fopen(文件名，使用方式);\t//文件的打开(fopen函数).出错时返回NULL</span><br><span class=\"line\">fclose(文件指针）\t//成功返回0，失败返回EOF(-1)</span><br><span class=\"line\">FILE f[3];\t//文件型数组</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>文件的读写：<br>字符读写：<code>fgetc</code> <code>futc</code>  </li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fputc(字符,文件指针);\t//成功返回写入的字符，错误返回EOF</span><br><span class=\"line\">ch=fgetc(fp);\t//以只读或读写形式打开文件</span><br><span class=\"line\">feof(fp);\t//判断文件是否真的结束，若结束返回1，反之返回0</span><br></pre></td></tr></table></figure>\n\n<p>字符串读写：<code>fgets</code> <code>fputs</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fgets(str,n,fp);\t//从文件中读取n-1个字符送入字符串中，返回首地址</span><br><span class=\"line\">fputs(&quot;xxxx&quot;,fp);\t//把字符串输入到文件中，成功返回0失败返回  </span><br><span class=\"line\">fgets(buffer,len,stdin);\t//scanf(&quot;%s&quot;,buffer);不能接受空格.stdin为键盘输入文件</span><br></pre></td></tr></table></figure>\n\n<p>数据块的读写：<code>freed</code> <code>fwrite</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fread(buffer,size,count,fp);\t//size:要读写的字节数，count:要进行读写多少个size字节的数据线</span><br></pre></td></tr></table></figure>\n\n<p>格式化读写：<code>fscanf</code> <code>fprintf</code>  </p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">fprint(fp,&quot;%d,%f&quot;,i,t);</span><br><span class=\"line\">fscanf(fp,&quot;%d,%f&quot;,&amp;i,&amp;t);  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"位运算\"><a href=\"#位运算\" class=\"headerlink\" title=\"位运算\"></a>位运算</h2><ul>\n<li>位运算符  <blockquote>\n<p>运算量只能是整型或字符型，不能为实型即浮点型    </p>\n</blockquote>\n</li>\n</ul>\n<p>按位与：<code>&amp;</code> 真真才为真 (不进位)<br>按位或：<code>|</code> 一真则为真<br>按位异或：<code>^</code> 相同为假，不同为真(与0异或，保留原值.与1异或翻转)<br>取反：<code>~</code><br>左移：<code>&lt;&lt;</code>高位左移溢出后舍弃,未溢出时左移一位相当与乘于2,<br>右移：<code>&gt;&gt;</code>未溢出时，右移n位相当与除于2^n  </p>\n","categories":["study"],"tags":[]},{"title":"web前端开发技术的优化策略","url":"http://www.baidu.com/2019/12/31/web/","content":"<p>网络页面的核心价值在于传递消费者所需要的信息并且以此来满足消费者相应的需求。而对于消费者和体验用户来说，网页加载的快慢直接影响了这个网页的访问量。如果用户在等待网站信息呈现的事件过长，很大程度上会对其消费体验造成一定影响，会造成用户无法将信息进行高效利用。基于这样的考虑，对web前端技术进行优化并体现信息的真正价值具有重要的意义。web前端技术的优化对网络性能的改善、工作效率的提高都发挥着重要作用。可以从以下几个方面开展工作，对web前端技术进行优化：</p>\n<ol>\n<li><p>减少HTTP请求数<br>减少不必要的消耗时间的Http请求数，是web前端开发技术的一个重要方面。一个完整的Http包括DNS寻址、发送双方的数据、建立浏览器和服务器间的连接并传输数据、等待服务器响应等等多个环节。在这个过程中，每一个Http请求都必须携带数据，因此每一个请求都不免占用宽带资源，导致用户等待时间增加。要减少网页中Http的请求，经常被采用的方法有：将多个CSS文件或者JavaScript文件合并成一个；优化图片地图，在一个图像上划分不同区域以及注入不通过映射的链接；保持图片和文本一起显示和下载；通过利用CSS background进行背景图的绝对定位，这种做法可以提高网页的载入速度，提高用户的体验。</p>\n</li>\n<li><p>优化文件的规模<br>文件规模能对网页加载造成一定的影响 ，这个过程包括压缩JavaScript和CSS文件以及对相应的代码进行优化。优化代码的工作主要是删除一些不必要的Html标签，避免内联式和优化CSS代码。</p>\n</li>\n<li><p>减少DNS查找<br>DNS查找的时间开销很大，这是国内许多网站的通病。在一次DNS的解析过程中会耗费20~120ms，若DNS解析请求过于频繁，就会导致用户等待时间的增加，同时也会使信息传输的质量有所下降。并且在DNS查找结束前，浏览器将无法下载该域名下的任何东西。对于国内的站点来说，过多使用站外的Widget（微件），也易引起DNS查找过多的问题。适当减少DNS查找能有效地提高网页地加载速度，对于web前端开发技术来说，DNS查找的优化也非常重要。</p>\n</li>\n<li><p>杜绝无用响应<br>在用户访问网站的时候，常常会遇到无用响应，如404错误或拒绝访问错误，这是没有找到文件引起的。Http请求耗费时间过长，而较长的等待时间却得到一个无用的响应页面，大大降低了用户体验。对页面的链接进行充分的测试加上对web服务器Errorr日志的不断跟踪能有效地减少404错误。大多时候，这种错误由于定位稍难而容易被技术人员忽略。</p>\n</li>\n<li><p>有效避免重定向<br>网页的重定向会耗费一定的时间，这也是造成用户等待时间过长的一个因素。重定向问题的产生有很多，每增加一次重定向就必然会增加一次对web的请求，所以重定向问题应该尽量避免。这要求技术人员能对web站点的子目录后加一个”/“，这种做法能有效避免重定向。</p>\n</li>\n<li><p>优化网页内容<br>CSS的全称是层叠样式表，层叠表明后面的CSS可以覆盖前面的，高级的可以覆盖低级的，因此浏览器会在完全加载完后才考虑开展渲染工作。根据CSS这样的特性，要实现web的优化，可以考虑将样式表放在顶部。另外，可以将script放在底部，该举措是为了防止script脚本阻塞当前页面，从而造成下载速度较慢，页面的加载时间过长等问题的产生。</p>\n</li>\n</ol>\n","categories":["study"],"tags":[]},{"title":"英语模板","url":"http://www.baidu.com/2018/01/01/English_self_introduce/","content":"<h1 id=\"self-introductions\"><a href=\"#self-introductions\" class=\"headerlink\" title=\"self-introductions\"></a>self-introductions</h1><ol>\n<li>good morning/afternoon. my name is (名字),I’m(年龄)years old,graduated from (学校) ,I’m majoring in (专业),as to my favorite activity ,I like playing basketball .  thank you</li>\n</ol>\n","categories":["study"],"tags":[]},{"title":"about","url":"http://www.baidu.com/about/index.html","content":"","categories":[],"tags":[]},{"title":"分类","url":"http://www.baidu.com/categories/index.html","content":"","categories":[],"tags":[]},{"title":"search","url":"http://www.baidu.com/search/index.html","content":"","categories":[],"tags":[]}]